<?php
/**
 * ServerLogFileConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ServerLogFileConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServerLogFileConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServerLogFileConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'end_offset' => 'int',
        'log_start_date' => 'string',
        'log_date' => 'string',
        'end_date' => 'string',
        'server_name' => 'string',
        'version' => 'string',
        'log_lines' => 'string[]',
        'filter_str' => 'string',
        'ret_line_count' => 'int',
        'log_fields' => 'string',
        'log_software' => 'string',
        'start_offset' => 'int',
        'search_str' => 'string',
        'regex_search' => 'bool',
        'log_version' => 'string',
        'save_field_list' => 'string[]',
        'file_length' => 'int',
        'start_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'end_offset' => 'int64',
        'log_start_date' => null,
        'log_date' => null,
        'end_date' => null,
        'server_name' => null,
        'version' => null,
        'log_lines' => null,
        'filter_str' => null,
        'ret_line_count' => 'int64',
        'log_fields' => null,
        'log_software' => null,
        'start_offset' => 'int64',
        'search_str' => null,
        'regex_search' => null,
        'log_version' => null,
        'save_field_list' => null,
        'file_length' => 'int64',
        'start_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'end_offset' => 'endOffset',
        'log_start_date' => 'logStartDate',
        'log_date' => 'logDate',
        'end_date' => 'endDate',
        'server_name' => 'serverName',
        'version' => 'version',
        'log_lines' => 'logLines',
        'filter_str' => 'filterStr',
        'ret_line_count' => 'retLineCount',
        'log_fields' => 'logFields',
        'log_software' => 'logSoftware',
        'start_offset' => 'startOffset',
        'search_str' => 'searchStr',
        'regex_search' => 'regexSearch',
        'log_version' => 'logVersion',
        'save_field_list' => 'saveFieldList',
        'file_length' => 'fileLength',
        'start_date' => 'startDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'end_offset' => 'setEndOffset',
        'log_start_date' => 'setLogStartDate',
        'log_date' => 'setLogDate',
        'end_date' => 'setEndDate',
        'server_name' => 'setServerName',
        'version' => 'setVersion',
        'log_lines' => 'setLogLines',
        'filter_str' => 'setFilterStr',
        'ret_line_count' => 'setRetLineCount',
        'log_fields' => 'setLogFields',
        'log_software' => 'setLogSoftware',
        'start_offset' => 'setStartOffset',
        'search_str' => 'setSearchStr',
        'regex_search' => 'setRegexSearch',
        'log_version' => 'setLogVersion',
        'save_field_list' => 'setSaveFieldList',
        'file_length' => 'setFileLength',
        'start_date' => 'setStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'end_offset' => 'getEndOffset',
        'log_start_date' => 'getLogStartDate',
        'log_date' => 'getLogDate',
        'end_date' => 'getEndDate',
        'server_name' => 'getServerName',
        'version' => 'getVersion',
        'log_lines' => 'getLogLines',
        'filter_str' => 'getFilterStr',
        'ret_line_count' => 'getRetLineCount',
        'log_fields' => 'getLogFields',
        'log_software' => 'getLogSoftware',
        'start_offset' => 'getStartOffset',
        'search_str' => 'getSearchStr',
        'regex_search' => 'getRegexSearch',
        'log_version' => 'getLogVersion',
        'save_field_list' => 'getSaveFieldList',
        'file_length' => 'getFileLength',
        'start_date' => 'getStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['end_offset'] = isset($data['end_offset']) ? $data['end_offset'] : null;
        $this->container['log_start_date'] = isset($data['log_start_date']) ? $data['log_start_date'] : null;
        $this->container['log_date'] = isset($data['log_date']) ? $data['log_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['log_lines'] = isset($data['log_lines']) ? $data['log_lines'] : null;
        $this->container['filter_str'] = isset($data['filter_str']) ? $data['filter_str'] : null;
        $this->container['ret_line_count'] = isset($data['ret_line_count']) ? $data['ret_line_count'] : null;
        $this->container['log_fields'] = isset($data['log_fields']) ? $data['log_fields'] : null;
        $this->container['log_software'] = isset($data['log_software']) ? $data['log_software'] : null;
        $this->container['start_offset'] = isset($data['start_offset']) ? $data['start_offset'] : null;
        $this->container['search_str'] = isset($data['search_str']) ? $data['search_str'] : null;
        $this->container['regex_search'] = isset($data['regex_search']) ? $data['regex_search'] : null;
        $this->container['log_version'] = isset($data['log_version']) ? $data['log_version'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['file_length'] = isset($data['file_length']) ? $data['file_length'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['end_offset'] === null) {
            $invalidProperties[] = "'end_offset' can't be null";
        }
        if ($this->container['log_start_date'] === null) {
            $invalidProperties[] = "'log_start_date' can't be null";
        }
        if ($this->container['log_date'] === null) {
            $invalidProperties[] = "'log_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['log_lines'] === null) {
            $invalidProperties[] = "'log_lines' can't be null";
        }
        if ($this->container['filter_str'] === null) {
            $invalidProperties[] = "'filter_str' can't be null";
        }
        if ($this->container['ret_line_count'] === null) {
            $invalidProperties[] = "'ret_line_count' can't be null";
        }
        if ($this->container['log_fields'] === null) {
            $invalidProperties[] = "'log_fields' can't be null";
        }
        if ($this->container['log_software'] === null) {
            $invalidProperties[] = "'log_software' can't be null";
        }
        if ($this->container['start_offset'] === null) {
            $invalidProperties[] = "'start_offset' can't be null";
        }
        if ($this->container['search_str'] === null) {
            $invalidProperties[] = "'search_str' can't be null";
        }
        if ($this->container['regex_search'] === null) {
            $invalidProperties[] = "'regex_search' can't be null";
        }
        if ($this->container['log_version'] === null) {
            $invalidProperties[] = "'log_version' can't be null";
        }
        if ($this->container['file_length'] === null) {
            $invalidProperties[] = "'file_length' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets end_offset
     *
     * @return int
     */
    public function getEndOffset()
    {
        return $this->container['end_offset'];
    }

    /**
     * Sets end_offset
     *
     * @param int $end_offset end_offset
     *
     * @return $this
     */
    public function setEndOffset($end_offset)
    {
        $this->container['end_offset'] = $end_offset;

        return $this;
    }

    /**
     * Gets log_start_date
     *
     * @return string
     */
    public function getLogStartDate()
    {
        return $this->container['log_start_date'];
    }

    /**
     * Sets log_start_date
     *
     * @param string $log_start_date log_start_date
     *
     * @return $this
     */
    public function setLogStartDate($log_start_date)
    {
        $this->container['log_start_date'] = $log_start_date;

        return $this;
    }

    /**
     * Gets log_date
     *
     * @return string
     */
    public function getLogDate()
    {
        return $this->container['log_date'];
    }

    /**
     * Sets log_date
     *
     * @param string $log_date log_date
     *
     * @return $this
     */
    public function setLogDate($log_date)
    {
        $this->container['log_date'] = $log_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets log_lines
     *
     * @return string[]
     */
    public function getLogLines()
    {
        return $this->container['log_lines'];
    }

    /**
     * Sets log_lines
     *
     * @param string[] $log_lines log_lines
     *
     * @return $this
     */
    public function setLogLines($log_lines)
    {
        $this->container['log_lines'] = $log_lines;

        return $this;
    }

    /**
     * Gets filter_str
     *
     * @return string
     */
    public function getFilterStr()
    {
        return $this->container['filter_str'];
    }

    /**
     * Sets filter_str
     *
     * @param string $filter_str filter_str
     *
     * @return $this
     */
    public function setFilterStr($filter_str)
    {
        $this->container['filter_str'] = $filter_str;

        return $this;
    }

    /**
     * Gets ret_line_count
     *
     * @return int
     */
    public function getRetLineCount()
    {
        return $this->container['ret_line_count'];
    }

    /**
     * Sets ret_line_count
     *
     * @param int $ret_line_count ret_line_count
     *
     * @return $this
     */
    public function setRetLineCount($ret_line_count)
    {
        $this->container['ret_line_count'] = $ret_line_count;

        return $this;
    }

    /**
     * Gets log_fields
     *
     * @return string
     */
    public function getLogFields()
    {
        return $this->container['log_fields'];
    }

    /**
     * Sets log_fields
     *
     * @param string $log_fields log_fields
     *
     * @return $this
     */
    public function setLogFields($log_fields)
    {
        $this->container['log_fields'] = $log_fields;

        return $this;
    }

    /**
     * Gets log_software
     *
     * @return string
     */
    public function getLogSoftware()
    {
        return $this->container['log_software'];
    }

    /**
     * Sets log_software
     *
     * @param string $log_software log_software
     *
     * @return $this
     */
    public function setLogSoftware($log_software)
    {
        $this->container['log_software'] = $log_software;

        return $this;
    }

    /**
     * Gets start_offset
     *
     * @return int
     */
    public function getStartOffset()
    {
        return $this->container['start_offset'];
    }

    /**
     * Sets start_offset
     *
     * @param int $start_offset start_offset
     *
     * @return $this
     */
    public function setStartOffset($start_offset)
    {
        $this->container['start_offset'] = $start_offset;

        return $this;
    }

    /**
     * Gets search_str
     *
     * @return string
     */
    public function getSearchStr()
    {
        return $this->container['search_str'];
    }

    /**
     * Sets search_str
     *
     * @param string $search_str search_str
     *
     * @return $this
     */
    public function setSearchStr($search_str)
    {
        $this->container['search_str'] = $search_str;

        return $this;
    }

    /**
     * Gets regex_search
     *
     * @return bool
     */
    public function getRegexSearch()
    {
        return $this->container['regex_search'];
    }

    /**
     * Sets regex_search
     *
     * @param bool $regex_search regex_search
     *
     * @return $this
     */
    public function setRegexSearch($regex_search)
    {
        $this->container['regex_search'] = $regex_search;

        return $this;
    }

    /**
     * Gets log_version
     *
     * @return string
     */
    public function getLogVersion()
    {
        return $this->container['log_version'];
    }

    /**
     * Sets log_version
     *
     * @param string $log_version log_version
     *
     * @return $this
     */
    public function setLogVersion($log_version)
    {
        $this->container['log_version'] = $log_version;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets file_length
     *
     * @return int
     */
    public function getFileLength()
    {
        return $this->container['file_length'];
    }

    /**
     * Sets file_length
     *
     * @param int $file_length file_length
     *
     * @return $this
     */
    public function setFileLength($file_length)
    {
        $this->container['file_length'] = $file_length;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


