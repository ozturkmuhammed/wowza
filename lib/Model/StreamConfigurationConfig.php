<?php
/**
 * StreamConfigurationConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StreamConfigurationConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StreamConfigurationConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StreamConfigurationConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stream_type' => 'string',
        'storage_dir_exists' => 'bool',
        'key_dir' => 'string',
        'create_storage_dir' => 'bool',
        'live_stream_packetizer' => 'string[]',
        'server_name' => 'string',
        'storage_dir' => 'string',
        'save_field_list' => 'string[]',
        'version' => 'string',
        'http_randomize_media_name' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stream_type' => null,
        'storage_dir_exists' => null,
        'key_dir' => null,
        'create_storage_dir' => null,
        'live_stream_packetizer' => null,
        'server_name' => null,
        'storage_dir' => null,
        'save_field_list' => null,
        'version' => null,
        'http_randomize_media_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stream_type' => 'streamType',
        'storage_dir_exists' => 'storageDirExists',
        'key_dir' => 'keyDir',
        'create_storage_dir' => 'createStorageDir',
        'live_stream_packetizer' => 'liveStreamPacketizer',
        'server_name' => 'serverName',
        'storage_dir' => 'storageDir',
        'save_field_list' => 'saveFieldList',
        'version' => 'version',
        'http_randomize_media_name' => 'httpRandomizeMediaName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stream_type' => 'setStreamType',
        'storage_dir_exists' => 'setStorageDirExists',
        'key_dir' => 'setKeyDir',
        'create_storage_dir' => 'setCreateStorageDir',
        'live_stream_packetizer' => 'setLiveStreamPacketizer',
        'server_name' => 'setServerName',
        'storage_dir' => 'setStorageDir',
        'save_field_list' => 'setSaveFieldList',
        'version' => 'setVersion',
        'http_randomize_media_name' => 'setHttpRandomizeMediaName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stream_type' => 'getStreamType',
        'storage_dir_exists' => 'getStorageDirExists',
        'key_dir' => 'getKeyDir',
        'create_storage_dir' => 'getCreateStorageDir',
        'live_stream_packetizer' => 'getLiveStreamPacketizer',
        'server_name' => 'getServerName',
        'storage_dir' => 'getStorageDir',
        'save_field_list' => 'getSaveFieldList',
        'version' => 'getVersion',
        'http_randomize_media_name' => 'getHttpRandomizeMediaName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stream_type'] = isset($data['stream_type']) ? $data['stream_type'] : null;
        $this->container['storage_dir_exists'] = isset($data['storage_dir_exists']) ? $data['storage_dir_exists'] : null;
        $this->container['key_dir'] = isset($data['key_dir']) ? $data['key_dir'] : null;
        $this->container['create_storage_dir'] = isset($data['create_storage_dir']) ? $data['create_storage_dir'] : null;
        $this->container['live_stream_packetizer'] = isset($data['live_stream_packetizer']) ? $data['live_stream_packetizer'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['storage_dir'] = isset($data['storage_dir']) ? $data['storage_dir'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['http_randomize_media_name'] = isset($data['http_randomize_media_name']) ? $data['http_randomize_media_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stream_type'] === null) {
            $invalidProperties[] = "'stream_type' can't be null";
        }
        if ($this->container['storage_dir_exists'] === null) {
            $invalidProperties[] = "'storage_dir_exists' can't be null";
        }
        if ($this->container['key_dir'] === null) {
            $invalidProperties[] = "'key_dir' can't be null";
        }
        if ($this->container['create_storage_dir'] === null) {
            $invalidProperties[] = "'create_storage_dir' can't be null";
        }
        if ($this->container['live_stream_packetizer'] === null) {
            $invalidProperties[] = "'live_stream_packetizer' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['storage_dir'] === null) {
            $invalidProperties[] = "'storage_dir' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['http_randomize_media_name'] === null) {
            $invalidProperties[] = "'http_randomize_media_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stream_type
     *
     * @return string
     */
    public function getStreamType()
    {
        return $this->container['stream_type'];
    }

    /**
     * Sets stream_type
     *
     * @param string $stream_type stream_type
     *
     * @return $this
     */
    public function setStreamType($stream_type)
    {
        $this->container['stream_type'] = $stream_type;

        return $this;
    }

    /**
     * Gets storage_dir_exists
     *
     * @return bool
     */
    public function getStorageDirExists()
    {
        return $this->container['storage_dir_exists'];
    }

    /**
     * Sets storage_dir_exists
     *
     * @param bool $storage_dir_exists storage_dir_exists
     *
     * @return $this
     */
    public function setStorageDirExists($storage_dir_exists)
    {
        $this->container['storage_dir_exists'] = $storage_dir_exists;

        return $this;
    }

    /**
     * Gets key_dir
     *
     * @return string
     */
    public function getKeyDir()
    {
        return $this->container['key_dir'];
    }

    /**
     * Sets key_dir
     *
     * @param string $key_dir key_dir
     *
     * @return $this
     */
    public function setKeyDir($key_dir)
    {
        $this->container['key_dir'] = $key_dir;

        return $this;
    }

    /**
     * Gets create_storage_dir
     *
     * @return bool
     */
    public function getCreateStorageDir()
    {
        return $this->container['create_storage_dir'];
    }

    /**
     * Sets create_storage_dir
     *
     * @param bool $create_storage_dir create_storage_dir
     *
     * @return $this
     */
    public function setCreateStorageDir($create_storage_dir)
    {
        $this->container['create_storage_dir'] = $create_storage_dir;

        return $this;
    }

    /**
     * Gets live_stream_packetizer
     *
     * @return string[]
     */
    public function getLiveStreamPacketizer()
    {
        return $this->container['live_stream_packetizer'];
    }

    /**
     * Sets live_stream_packetizer
     *
     * @param string[] $live_stream_packetizer live_stream_packetizer
     *
     * @return $this
     */
    public function setLiveStreamPacketizer($live_stream_packetizer)
    {
        $this->container['live_stream_packetizer'] = $live_stream_packetizer;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets storage_dir
     *
     * @return string
     */
    public function getStorageDir()
    {
        return $this->container['storage_dir'];
    }

    /**
     * Sets storage_dir
     *
     * @param string $storage_dir storage_dir
     *
     * @return $this
     */
    public function setStorageDir($storage_dir)
    {
        $this->container['storage_dir'] = $storage_dir;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets http_randomize_media_name
     *
     * @return bool
     */
    public function getHttpRandomizeMediaName()
    {
        return $this->container['http_randomize_media_name'];
    }

    /**
     * Sets http_randomize_media_name
     *
     * @param bool $http_randomize_media_name http_randomize_media_name
     *
     * @return $this
     */
    public function setHttpRandomizeMediaName($http_randomize_media_name)
    {
        $this->container['http_randomize_media_name'] = $http_randomize_media_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


