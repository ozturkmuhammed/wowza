<?php
/**
 * VHostTuneConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VHostTuneConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VHostTuneConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VHostTuneConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'multicast_outgoing_processor_count_auto_value' => 'string',
        'net_connections_processor_count_auto_value' => 'string',
        'idle_worker_count_auto_value' => 'string',
        'unicast_ıncoming_processor_count_auto_value' => 'string',
        'unicast_outgoing_processor_count_auto_value' => 'string',
        'media_caster_processor_count' => 'string',
        'server_name' => 'string',
        'multicast_outgoing_processor_count' => 'string',
        'multicast_ıncoming_processor_count_auto_value' => 'string',
        'version' => 'string',
        'net_connections_processor_count' => 'string',
        'unicast_outgoing_processor_count' => 'string',
        'media_caster_processor_count_auto_value' => 'string',
        'idle_worker_count' => 'string',
        'transport_thread_pool_size' => 'int',
        'client_ıdle_frequency' => 'int',
        'name' => 'string',
        'unicast_ıncoming_processor_count' => 'string',
        'save_field_list' => 'string[]',
        'multicast_ıncoming_processor_count' => 'string',
        'rtp_ıdle_frequency' => 'int',
        'handler_thread_pool_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'multicast_outgoing_processor_count_auto_value' => null,
        'net_connections_processor_count_auto_value' => null,
        'idle_worker_count_auto_value' => null,
        'unicast_ıncoming_processor_count_auto_value' => null,
        'unicast_outgoing_processor_count_auto_value' => null,
        'media_caster_processor_count' => null,
        'server_name' => null,
        'multicast_outgoing_processor_count' => null,
        'multicast_ıncoming_processor_count_auto_value' => null,
        'version' => null,
        'net_connections_processor_count' => null,
        'unicast_outgoing_processor_count' => null,
        'media_caster_processor_count_auto_value' => null,
        'idle_worker_count' => null,
        'transport_thread_pool_size' => 'int32',
        'client_ıdle_frequency' => 'int32',
        'name' => null,
        'unicast_ıncoming_processor_count' => null,
        'save_field_list' => null,
        'multicast_ıncoming_processor_count' => null,
        'rtp_ıdle_frequency' => 'int32',
        'handler_thread_pool_size' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'multicast_outgoing_processor_count_auto_value' => 'multicastOutgoingProcessorCountAutoValue',
        'net_connections_processor_count_auto_value' => 'netConnectionsProcessorCountAutoValue',
        'idle_worker_count_auto_value' => 'idleWorkerCountAutoValue',
        'unicast_ıncoming_processor_count_auto_value' => 'unicastIncomingProcessorCountAutoValue',
        'unicast_outgoing_processor_count_auto_value' => 'unicastOutgoingProcessorCountAutoValue',
        'media_caster_processor_count' => 'mediaCasterProcessorCount',
        'server_name' => 'serverName',
        'multicast_outgoing_processor_count' => 'multicastOutgoingProcessorCount',
        'multicast_ıncoming_processor_count_auto_value' => 'multicastIncomingProcessorCountAutoValue',
        'version' => 'version',
        'net_connections_processor_count' => 'netConnectionsProcessorCount',
        'unicast_outgoing_processor_count' => 'unicastOutgoingProcessorCount',
        'media_caster_processor_count_auto_value' => 'mediaCasterProcessorCountAutoValue',
        'idle_worker_count' => 'idleWorkerCount',
        'transport_thread_pool_size' => 'transportThreadPoolSize',
        'client_ıdle_frequency' => 'clientIdleFrequency',
        'name' => 'name',
        'unicast_ıncoming_processor_count' => 'unicastIncomingProcessorCount',
        'save_field_list' => 'saveFieldList',
        'multicast_ıncoming_processor_count' => 'multicastIncomingProcessorCount',
        'rtp_ıdle_frequency' => 'rtpIdleFrequency',
        'handler_thread_pool_size' => 'handlerThreadPoolSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'multicast_outgoing_processor_count_auto_value' => 'setMulticastOutgoingProcessorCountAutoValue',
        'net_connections_processor_count_auto_value' => 'setNetConnectionsProcessorCountAutoValue',
        'idle_worker_count_auto_value' => 'setIdleWorkerCountAutoValue',
        'unicast_ıncoming_processor_count_auto_value' => 'setUnicastIncomingProcessorCountAutoValue',
        'unicast_outgoing_processor_count_auto_value' => 'setUnicastOutgoingProcessorCountAutoValue',
        'media_caster_processor_count' => 'setMediaCasterProcessorCount',
        'server_name' => 'setServerName',
        'multicast_outgoing_processor_count' => 'setMulticastOutgoingProcessorCount',
        'multicast_ıncoming_processor_count_auto_value' => 'setMulticastIncomingProcessorCountAutoValue',
        'version' => 'setVersion',
        'net_connections_processor_count' => 'setNetConnectionsProcessorCount',
        'unicast_outgoing_processor_count' => 'setUnicastOutgoingProcessorCount',
        'media_caster_processor_count_auto_value' => 'setMediaCasterProcessorCountAutoValue',
        'idle_worker_count' => 'setIdleWorkerCount',
        'transport_thread_pool_size' => 'setTransportThreadPoolSize',
        'client_ıdle_frequency' => 'setClientIdleFrequency',
        'name' => 'setName',
        'unicast_ıncoming_processor_count' => 'setUnicastIncomingProcessorCount',
        'save_field_list' => 'setSaveFieldList',
        'multicast_ıncoming_processor_count' => 'setMulticastIncomingProcessorCount',
        'rtp_ıdle_frequency' => 'setRtpIdleFrequency',
        'handler_thread_pool_size' => 'setHandlerThreadPoolSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'multicast_outgoing_processor_count_auto_value' => 'getMulticastOutgoingProcessorCountAutoValue',
        'net_connections_processor_count_auto_value' => 'getNetConnectionsProcessorCountAutoValue',
        'idle_worker_count_auto_value' => 'getIdleWorkerCountAutoValue',
        'unicast_ıncoming_processor_count_auto_value' => 'getUnicastIncomingProcessorCountAutoValue',
        'unicast_outgoing_processor_count_auto_value' => 'getUnicastOutgoingProcessorCountAutoValue',
        'media_caster_processor_count' => 'getMediaCasterProcessorCount',
        'server_name' => 'getServerName',
        'multicast_outgoing_processor_count' => 'getMulticastOutgoingProcessorCount',
        'multicast_ıncoming_processor_count_auto_value' => 'getMulticastIncomingProcessorCountAutoValue',
        'version' => 'getVersion',
        'net_connections_processor_count' => 'getNetConnectionsProcessorCount',
        'unicast_outgoing_processor_count' => 'getUnicastOutgoingProcessorCount',
        'media_caster_processor_count_auto_value' => 'getMediaCasterProcessorCountAutoValue',
        'idle_worker_count' => 'getIdleWorkerCount',
        'transport_thread_pool_size' => 'getTransportThreadPoolSize',
        'client_ıdle_frequency' => 'getClientIdleFrequency',
        'name' => 'getName',
        'unicast_ıncoming_processor_count' => 'getUnicastIncomingProcessorCount',
        'save_field_list' => 'getSaveFieldList',
        'multicast_ıncoming_processor_count' => 'getMulticastIncomingProcessorCount',
        'rtp_ıdle_frequency' => 'getRtpIdleFrequency',
        'handler_thread_pool_size' => 'getHandlerThreadPoolSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['multicast_outgoing_processor_count_auto_value'] = isset($data['multicast_outgoing_processor_count_auto_value']) ? $data['multicast_outgoing_processor_count_auto_value'] : null;
        $this->container['net_connections_processor_count_auto_value'] = isset($data['net_connections_processor_count_auto_value']) ? $data['net_connections_processor_count_auto_value'] : null;
        $this->container['idle_worker_count_auto_value'] = isset($data['idle_worker_count_auto_value']) ? $data['idle_worker_count_auto_value'] : null;
        $this->container['unicast_ıncoming_processor_count_auto_value'] = isset($data['unicast_ıncoming_processor_count_auto_value']) ? $data['unicast_ıncoming_processor_count_auto_value'] : null;
        $this->container['unicast_outgoing_processor_count_auto_value'] = isset($data['unicast_outgoing_processor_count_auto_value']) ? $data['unicast_outgoing_processor_count_auto_value'] : null;
        $this->container['media_caster_processor_count'] = isset($data['media_caster_processor_count']) ? $data['media_caster_processor_count'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['multicast_outgoing_processor_count'] = isset($data['multicast_outgoing_processor_count']) ? $data['multicast_outgoing_processor_count'] : null;
        $this->container['multicast_ıncoming_processor_count_auto_value'] = isset($data['multicast_ıncoming_processor_count_auto_value']) ? $data['multicast_ıncoming_processor_count_auto_value'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['net_connections_processor_count'] = isset($data['net_connections_processor_count']) ? $data['net_connections_processor_count'] : null;
        $this->container['unicast_outgoing_processor_count'] = isset($data['unicast_outgoing_processor_count']) ? $data['unicast_outgoing_processor_count'] : null;
        $this->container['media_caster_processor_count_auto_value'] = isset($data['media_caster_processor_count_auto_value']) ? $data['media_caster_processor_count_auto_value'] : null;
        $this->container['idle_worker_count'] = isset($data['idle_worker_count']) ? $data['idle_worker_count'] : null;
        $this->container['transport_thread_pool_size'] = isset($data['transport_thread_pool_size']) ? $data['transport_thread_pool_size'] : null;
        $this->container['client_ıdle_frequency'] = isset($data['client_ıdle_frequency']) ? $data['client_ıdle_frequency'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['unicast_ıncoming_processor_count'] = isset($data['unicast_ıncoming_processor_count']) ? $data['unicast_ıncoming_processor_count'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['multicast_ıncoming_processor_count'] = isset($data['multicast_ıncoming_processor_count']) ? $data['multicast_ıncoming_processor_count'] : null;
        $this->container['rtp_ıdle_frequency'] = isset($data['rtp_ıdle_frequency']) ? $data['rtp_ıdle_frequency'] : null;
        $this->container['handler_thread_pool_size'] = isset($data['handler_thread_pool_size']) ? $data['handler_thread_pool_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['multicast_outgoing_processor_count_auto_value'] === null) {
            $invalidProperties[] = "'multicast_outgoing_processor_count_auto_value' can't be null";
        }
        if ($this->container['net_connections_processor_count_auto_value'] === null) {
            $invalidProperties[] = "'net_connections_processor_count_auto_value' can't be null";
        }
        if ($this->container['idle_worker_count_auto_value'] === null) {
            $invalidProperties[] = "'idle_worker_count_auto_value' can't be null";
        }
        if ($this->container['unicast_ıncoming_processor_count_auto_value'] === null) {
            $invalidProperties[] = "'unicast_ıncoming_processor_count_auto_value' can't be null";
        }
        if ($this->container['unicast_outgoing_processor_count_auto_value'] === null) {
            $invalidProperties[] = "'unicast_outgoing_processor_count_auto_value' can't be null";
        }
        if ($this->container['media_caster_processor_count'] === null) {
            $invalidProperties[] = "'media_caster_processor_count' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['multicast_outgoing_processor_count'] === null) {
            $invalidProperties[] = "'multicast_outgoing_processor_count' can't be null";
        }
        if ($this->container['multicast_ıncoming_processor_count_auto_value'] === null) {
            $invalidProperties[] = "'multicast_ıncoming_processor_count_auto_value' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['net_connections_processor_count'] === null) {
            $invalidProperties[] = "'net_connections_processor_count' can't be null";
        }
        if ($this->container['unicast_outgoing_processor_count'] === null) {
            $invalidProperties[] = "'unicast_outgoing_processor_count' can't be null";
        }
        if ($this->container['media_caster_processor_count_auto_value'] === null) {
            $invalidProperties[] = "'media_caster_processor_count_auto_value' can't be null";
        }
        if ($this->container['idle_worker_count'] === null) {
            $invalidProperties[] = "'idle_worker_count' can't be null";
        }
        if ($this->container['transport_thread_pool_size'] === null) {
            $invalidProperties[] = "'transport_thread_pool_size' can't be null";
        }
        if ($this->container['client_ıdle_frequency'] === null) {
            $invalidProperties[] = "'client_ıdle_frequency' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['unicast_ıncoming_processor_count'] === null) {
            $invalidProperties[] = "'unicast_ıncoming_processor_count' can't be null";
        }
        if ($this->container['multicast_ıncoming_processor_count'] === null) {
            $invalidProperties[] = "'multicast_ıncoming_processor_count' can't be null";
        }
        if ($this->container['rtp_ıdle_frequency'] === null) {
            $invalidProperties[] = "'rtp_ıdle_frequency' can't be null";
        }
        if ($this->container['handler_thread_pool_size'] === null) {
            $invalidProperties[] = "'handler_thread_pool_size' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets multicast_outgoing_processor_count_auto_value
     *
     * @return string
     */
    public function getMulticastOutgoingProcessorCountAutoValue()
    {
        return $this->container['multicast_outgoing_processor_count_auto_value'];
    }

    /**
     * Sets multicast_outgoing_processor_count_auto_value
     *
     * @param string $multicast_outgoing_processor_count_auto_value multicast_outgoing_processor_count_auto_value
     *
     * @return $this
     */
    public function setMulticastOutgoingProcessorCountAutoValue($multicast_outgoing_processor_count_auto_value)
    {
        $this->container['multicast_outgoing_processor_count_auto_value'] = $multicast_outgoing_processor_count_auto_value;

        return $this;
    }

    /**
     * Gets net_connections_processor_count_auto_value
     *
     * @return string
     */
    public function getNetConnectionsProcessorCountAutoValue()
    {
        return $this->container['net_connections_processor_count_auto_value'];
    }

    /**
     * Sets net_connections_processor_count_auto_value
     *
     * @param string $net_connections_processor_count_auto_value net_connections_processor_count_auto_value
     *
     * @return $this
     */
    public function setNetConnectionsProcessorCountAutoValue($net_connections_processor_count_auto_value)
    {
        $this->container['net_connections_processor_count_auto_value'] = $net_connections_processor_count_auto_value;

        return $this;
    }

    /**
     * Gets idle_worker_count_auto_value
     *
     * @return string
     */
    public function getIdleWorkerCountAutoValue()
    {
        return $this->container['idle_worker_count_auto_value'];
    }

    /**
     * Sets idle_worker_count_auto_value
     *
     * @param string $idle_worker_count_auto_value idle_worker_count_auto_value
     *
     * @return $this
     */
    public function setIdleWorkerCountAutoValue($idle_worker_count_auto_value)
    {
        $this->container['idle_worker_count_auto_value'] = $idle_worker_count_auto_value;

        return $this;
    }

    /**
     * Gets unicast_ıncoming_processor_count_auto_value
     *
     * @return string
     */
    public function getUnicastIncomingProcessorCountAutoValue()
    {
        return $this->container['unicast_ıncoming_processor_count_auto_value'];
    }

    /**
     * Sets unicast_ıncoming_processor_count_auto_value
     *
     * @param string $unicast_ıncoming_processor_count_auto_value unicast_ıncoming_processor_count_auto_value
     *
     * @return $this
     */
    public function setUnicastIncomingProcessorCountAutoValue($unicast_ıncoming_processor_count_auto_value)
    {
        $this->container['unicast_ıncoming_processor_count_auto_value'] = $unicast_ıncoming_processor_count_auto_value;

        return $this;
    }

    /**
     * Gets unicast_outgoing_processor_count_auto_value
     *
     * @return string
     */
    public function getUnicastOutgoingProcessorCountAutoValue()
    {
        return $this->container['unicast_outgoing_processor_count_auto_value'];
    }

    /**
     * Sets unicast_outgoing_processor_count_auto_value
     *
     * @param string $unicast_outgoing_processor_count_auto_value unicast_outgoing_processor_count_auto_value
     *
     * @return $this
     */
    public function setUnicastOutgoingProcessorCountAutoValue($unicast_outgoing_processor_count_auto_value)
    {
        $this->container['unicast_outgoing_processor_count_auto_value'] = $unicast_outgoing_processor_count_auto_value;

        return $this;
    }

    /**
     * Gets media_caster_processor_count
     *
     * @return string
     */
    public function getMediaCasterProcessorCount()
    {
        return $this->container['media_caster_processor_count'];
    }

    /**
     * Sets media_caster_processor_count
     *
     * @param string $media_caster_processor_count media_caster_processor_count
     *
     * @return $this
     */
    public function setMediaCasterProcessorCount($media_caster_processor_count)
    {
        $this->container['media_caster_processor_count'] = $media_caster_processor_count;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets multicast_outgoing_processor_count
     *
     * @return string
     */
    public function getMulticastOutgoingProcessorCount()
    {
        return $this->container['multicast_outgoing_processor_count'];
    }

    /**
     * Sets multicast_outgoing_processor_count
     *
     * @param string $multicast_outgoing_processor_count multicast_outgoing_processor_count
     *
     * @return $this
     */
    public function setMulticastOutgoingProcessorCount($multicast_outgoing_processor_count)
    {
        $this->container['multicast_outgoing_processor_count'] = $multicast_outgoing_processor_count;

        return $this;
    }

    /**
     * Gets multicast_ıncoming_processor_count_auto_value
     *
     * @return string
     */
    public function getMulticastIncomingProcessorCountAutoValue()
    {
        return $this->container['multicast_ıncoming_processor_count_auto_value'];
    }

    /**
     * Sets multicast_ıncoming_processor_count_auto_value
     *
     * @param string $multicast_ıncoming_processor_count_auto_value multicast_ıncoming_processor_count_auto_value
     *
     * @return $this
     */
    public function setMulticastIncomingProcessorCountAutoValue($multicast_ıncoming_processor_count_auto_value)
    {
        $this->container['multicast_ıncoming_processor_count_auto_value'] = $multicast_ıncoming_processor_count_auto_value;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets net_connections_processor_count
     *
     * @return string
     */
    public function getNetConnectionsProcessorCount()
    {
        return $this->container['net_connections_processor_count'];
    }

    /**
     * Sets net_connections_processor_count
     *
     * @param string $net_connections_processor_count net_connections_processor_count
     *
     * @return $this
     */
    public function setNetConnectionsProcessorCount($net_connections_processor_count)
    {
        $this->container['net_connections_processor_count'] = $net_connections_processor_count;

        return $this;
    }

    /**
     * Gets unicast_outgoing_processor_count
     *
     * @return string
     */
    public function getUnicastOutgoingProcessorCount()
    {
        return $this->container['unicast_outgoing_processor_count'];
    }

    /**
     * Sets unicast_outgoing_processor_count
     *
     * @param string $unicast_outgoing_processor_count unicast_outgoing_processor_count
     *
     * @return $this
     */
    public function setUnicastOutgoingProcessorCount($unicast_outgoing_processor_count)
    {
        $this->container['unicast_outgoing_processor_count'] = $unicast_outgoing_processor_count;

        return $this;
    }

    /**
     * Gets media_caster_processor_count_auto_value
     *
     * @return string
     */
    public function getMediaCasterProcessorCountAutoValue()
    {
        return $this->container['media_caster_processor_count_auto_value'];
    }

    /**
     * Sets media_caster_processor_count_auto_value
     *
     * @param string $media_caster_processor_count_auto_value media_caster_processor_count_auto_value
     *
     * @return $this
     */
    public function setMediaCasterProcessorCountAutoValue($media_caster_processor_count_auto_value)
    {
        $this->container['media_caster_processor_count_auto_value'] = $media_caster_processor_count_auto_value;

        return $this;
    }

    /**
     * Gets idle_worker_count
     *
     * @return string
     */
    public function getIdleWorkerCount()
    {
        return $this->container['idle_worker_count'];
    }

    /**
     * Sets idle_worker_count
     *
     * @param string $idle_worker_count idle_worker_count
     *
     * @return $this
     */
    public function setIdleWorkerCount($idle_worker_count)
    {
        $this->container['idle_worker_count'] = $idle_worker_count;

        return $this;
    }

    /**
     * Gets transport_thread_pool_size
     *
     * @return int
     */
    public function getTransportThreadPoolSize()
    {
        return $this->container['transport_thread_pool_size'];
    }

    /**
     * Sets transport_thread_pool_size
     *
     * @param int $transport_thread_pool_size transport_thread_pool_size
     *
     * @return $this
     */
    public function setTransportThreadPoolSize($transport_thread_pool_size)
    {
        $this->container['transport_thread_pool_size'] = $transport_thread_pool_size;

        return $this;
    }

    /**
     * Gets client_ıdle_frequency
     *
     * @return int
     */
    public function getClientIdleFrequency()
    {
        return $this->container['client_ıdle_frequency'];
    }

    /**
     * Sets client_ıdle_frequency
     *
     * @param int $client_ıdle_frequency client_ıdle_frequency
     *
     * @return $this
     */
    public function setClientIdleFrequency($client_ıdle_frequency)
    {
        $this->container['client_ıdle_frequency'] = $client_ıdle_frequency;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets unicast_ıncoming_processor_count
     *
     * @return string
     */
    public function getUnicastIncomingProcessorCount()
    {
        return $this->container['unicast_ıncoming_processor_count'];
    }

    /**
     * Sets unicast_ıncoming_processor_count
     *
     * @param string $unicast_ıncoming_processor_count unicast_ıncoming_processor_count
     *
     * @return $this
     */
    public function setUnicastIncomingProcessorCount($unicast_ıncoming_processor_count)
    {
        $this->container['unicast_ıncoming_processor_count'] = $unicast_ıncoming_processor_count;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets multicast_ıncoming_processor_count
     *
     * @return string
     */
    public function getMulticastIncomingProcessorCount()
    {
        return $this->container['multicast_ıncoming_processor_count'];
    }

    /**
     * Sets multicast_ıncoming_processor_count
     *
     * @param string $multicast_ıncoming_processor_count multicast_ıncoming_processor_count
     *
     * @return $this
     */
    public function setMulticastIncomingProcessorCount($multicast_ıncoming_processor_count)
    {
        $this->container['multicast_ıncoming_processor_count'] = $multicast_ıncoming_processor_count;

        return $this;
    }

    /**
     * Gets rtp_ıdle_frequency
     *
     * @return int
     */
    public function getRtpIdleFrequency()
    {
        return $this->container['rtp_ıdle_frequency'];
    }

    /**
     * Sets rtp_ıdle_frequency
     *
     * @param int $rtp_ıdle_frequency rtp_ıdle_frequency
     *
     * @return $this
     */
    public function setRtpIdleFrequency($rtp_ıdle_frequency)
    {
        $this->container['rtp_ıdle_frequency'] = $rtp_ıdle_frequency;

        return $this;
    }

    /**
     * Gets handler_thread_pool_size
     *
     * @return int
     */
    public function getHandlerThreadPoolSize()
    {
        return $this->container['handler_thread_pool_size'];
    }

    /**
     * Sets handler_thread_pool_size
     *
     * @param int $handler_thread_pool_size handler_thread_pool_size
     *
     * @return $this
     */
    public function setHandlerThreadPoolSize($handler_thread_pool_size)
    {
        $this->container['handler_thread_pool_size'] = $handler_thread_pool_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


