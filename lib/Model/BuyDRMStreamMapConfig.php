<?php
/**
 * BuyDRMStreamMapConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BuyDRMStreamMapConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuyDRMStreamMapConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuyDRMStreamMapConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content_ıd' => 'string',
        'server_name' => 'string',
        'key_ıd' => 'string',
        'save_field_list' => 'string[]',
        'media_ıd' => 'string',
        'version' => 'string',
        'stream_name' => 'string',
        'order' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'content_ıd' => null,
        'server_name' => null,
        'key_ıd' => null,
        'save_field_list' => null,
        'media_ıd' => null,
        'version' => null,
        'stream_name' => null,
        'order' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content_ıd' => 'contentID',
        'server_name' => 'serverName',
        'key_ıd' => 'keyID',
        'save_field_list' => 'saveFieldList',
        'media_ıd' => 'mediaID',
        'version' => 'version',
        'stream_name' => 'streamName',
        'order' => 'order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content_ıd' => 'setContentId',
        'server_name' => 'setServerName',
        'key_ıd' => 'setKeyId',
        'save_field_list' => 'setSaveFieldList',
        'media_ıd' => 'setMediaId',
        'version' => 'setVersion',
        'stream_name' => 'setStreamName',
        'order' => 'setOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content_ıd' => 'getContentId',
        'server_name' => 'getServerName',
        'key_ıd' => 'getKeyId',
        'save_field_list' => 'getSaveFieldList',
        'media_ıd' => 'getMediaId',
        'version' => 'getVersion',
        'stream_name' => 'getStreamName',
        'order' => 'getOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content_ıd'] = isset($data['content_ıd']) ? $data['content_ıd'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['key_ıd'] = isset($data['key_ıd']) ? $data['key_ıd'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['media_ıd'] = isset($data['media_ıd']) ? $data['media_ıd'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['stream_name'] = isset($data['stream_name']) ? $data['stream_name'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['content_ıd'] === null) {
            $invalidProperties[] = "'content_ıd' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['key_ıd'] === null) {
            $invalidProperties[] = "'key_ıd' can't be null";
        }
        if ($this->container['media_ıd'] === null) {
            $invalidProperties[] = "'media_ıd' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['stream_name'] === null) {
            $invalidProperties[] = "'stream_name' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content_ıd
     *
     * @return string
     */
    public function getContentId()
    {
        return $this->container['content_ıd'];
    }

    /**
     * Sets content_ıd
     *
     * @param string $content_ıd content_ıd
     *
     * @return $this
     */
    public function setContentId($content_ıd)
    {
        $this->container['content_ıd'] = $content_ıd;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets key_ıd
     *
     * @return string
     */
    public function getKeyId()
    {
        return $this->container['key_ıd'];
    }

    /**
     * Sets key_ıd
     *
     * @param string $key_ıd key_ıd
     *
     * @return $this
     */
    public function setKeyId($key_ıd)
    {
        $this->container['key_ıd'] = $key_ıd;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets media_ıd
     *
     * @return string
     */
    public function getMediaId()
    {
        return $this->container['media_ıd'];
    }

    /**
     * Sets media_ıd
     *
     * @param string $media_ıd media_ıd
     *
     * @return $this
     */
    public function setMediaId($media_ıd)
    {
        $this->container['media_ıd'] = $media_ıd;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets stream_name
     *
     * @return string
     */
    public function getStreamName()
    {
        return $this->container['stream_name'];
    }

    /**
     * Sets stream_name
     *
     * @param string $stream_name stream_name
     *
     * @return $this
     */
    public function setStreamName($stream_name)
    {
        $this->container['stream_name'] = $stream_name;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


