<?php
/**
 * ServerConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ServerConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServerConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServerConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transport_thread_pool_auto_value' => 'string',
        'handler_thread_pool' => 'string',
        'transport_thread_pool' => 'string',
        'ip_address' => 'string',
        'server_ıd1' => 'string',
        'server_name' => 'string',
        'description' => 'string',
        'rtp_data_port_sharing_port' => 'int',
        'version' => 'string',
        'server_ıd2' => 'string',
        'server_ts' => 'int',
        'port' => 'int',
        'server_listeners' => '\Swagger\Client\Model\ServerListenersConfig',
        'name' => 'string',
        'rtp_data_port_sharing' => 'bool',
        'handler_thread_pool_auto_value' => 'string',
        'default_stream_prefix' => 'string',
        'save_field_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transport_thread_pool_auto_value' => null,
        'handler_thread_pool' => null,
        'transport_thread_pool' => null,
        'ip_address' => null,
        'server_ıd1' => null,
        'server_name' => null,
        'description' => null,
        'rtp_data_port_sharing_port' => 'int32',
        'version' => null,
        'server_ıd2' => null,
        'server_ts' => 'int64',
        'port' => 'int32',
        'server_listeners' => null,
        'name' => null,
        'rtp_data_port_sharing' => null,
        'handler_thread_pool_auto_value' => null,
        'default_stream_prefix' => null,
        'save_field_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transport_thread_pool_auto_value' => 'transportThreadPoolAutoValue',
        'handler_thread_pool' => 'handlerThreadPool',
        'transport_thread_pool' => 'transportThreadPool',
        'ip_address' => 'ipAddress',
        'server_ıd1' => 'serverId1',
        'server_name' => 'serverName',
        'description' => 'description',
        'rtp_data_port_sharing_port' => 'rtpDataPortSharingPort',
        'version' => 'version',
        'server_ıd2' => 'serverId2',
        'server_ts' => 'serverTS',
        'port' => 'port',
        'server_listeners' => 'serverListeners',
        'name' => 'name',
        'rtp_data_port_sharing' => 'rtpDataPortSharing',
        'handler_thread_pool_auto_value' => 'handlerThreadPoolAutoValue',
        'default_stream_prefix' => 'defaultStreamPrefix',
        'save_field_list' => 'saveFieldList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transport_thread_pool_auto_value' => 'setTransportThreadPoolAutoValue',
        'handler_thread_pool' => 'setHandlerThreadPool',
        'transport_thread_pool' => 'setTransportThreadPool',
        'ip_address' => 'setIpAddress',
        'server_ıd1' => 'setServerId1',
        'server_name' => 'setServerName',
        'description' => 'setDescription',
        'rtp_data_port_sharing_port' => 'setRtpDataPortSharingPort',
        'version' => 'setVersion',
        'server_ıd2' => 'setServerId2',
        'server_ts' => 'setServerTs',
        'port' => 'setPort',
        'server_listeners' => 'setServerListeners',
        'name' => 'setName',
        'rtp_data_port_sharing' => 'setRtpDataPortSharing',
        'handler_thread_pool_auto_value' => 'setHandlerThreadPoolAutoValue',
        'default_stream_prefix' => 'setDefaultStreamPrefix',
        'save_field_list' => 'setSaveFieldList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transport_thread_pool_auto_value' => 'getTransportThreadPoolAutoValue',
        'handler_thread_pool' => 'getHandlerThreadPool',
        'transport_thread_pool' => 'getTransportThreadPool',
        'ip_address' => 'getIpAddress',
        'server_ıd1' => 'getServerId1',
        'server_name' => 'getServerName',
        'description' => 'getDescription',
        'rtp_data_port_sharing_port' => 'getRtpDataPortSharingPort',
        'version' => 'getVersion',
        'server_ıd2' => 'getServerId2',
        'server_ts' => 'getServerTs',
        'port' => 'getPort',
        'server_listeners' => 'getServerListeners',
        'name' => 'getName',
        'rtp_data_port_sharing' => 'getRtpDataPortSharing',
        'handler_thread_pool_auto_value' => 'getHandlerThreadPoolAutoValue',
        'default_stream_prefix' => 'getDefaultStreamPrefix',
        'save_field_list' => 'getSaveFieldList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transport_thread_pool_auto_value'] = isset($data['transport_thread_pool_auto_value']) ? $data['transport_thread_pool_auto_value'] : null;
        $this->container['handler_thread_pool'] = isset($data['handler_thread_pool']) ? $data['handler_thread_pool'] : null;
        $this->container['transport_thread_pool'] = isset($data['transport_thread_pool']) ? $data['transport_thread_pool'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['server_ıd1'] = isset($data['server_ıd1']) ? $data['server_ıd1'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['rtp_data_port_sharing_port'] = isset($data['rtp_data_port_sharing_port']) ? $data['rtp_data_port_sharing_port'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['server_ıd2'] = isset($data['server_ıd2']) ? $data['server_ıd2'] : null;
        $this->container['server_ts'] = isset($data['server_ts']) ? $data['server_ts'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['server_listeners'] = isset($data['server_listeners']) ? $data['server_listeners'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['rtp_data_port_sharing'] = isset($data['rtp_data_port_sharing']) ? $data['rtp_data_port_sharing'] : null;
        $this->container['handler_thread_pool_auto_value'] = isset($data['handler_thread_pool_auto_value']) ? $data['handler_thread_pool_auto_value'] : null;
        $this->container['default_stream_prefix'] = isset($data['default_stream_prefix']) ? $data['default_stream_prefix'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transport_thread_pool_auto_value'] === null) {
            $invalidProperties[] = "'transport_thread_pool_auto_value' can't be null";
        }
        if ($this->container['handler_thread_pool'] === null) {
            $invalidProperties[] = "'handler_thread_pool' can't be null";
        }
        if ($this->container['transport_thread_pool'] === null) {
            $invalidProperties[] = "'transport_thread_pool' can't be null";
        }
        if ($this->container['ip_address'] === null) {
            $invalidProperties[] = "'ip_address' can't be null";
        }
        if ($this->container['server_ıd1'] === null) {
            $invalidProperties[] = "'server_ıd1' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['rtp_data_port_sharing_port'] === null) {
            $invalidProperties[] = "'rtp_data_port_sharing_port' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['server_ıd2'] === null) {
            $invalidProperties[] = "'server_ıd2' can't be null";
        }
        if ($this->container['server_ts'] === null) {
            $invalidProperties[] = "'server_ts' can't be null";
        }
        if ($this->container['port'] === null) {
            $invalidProperties[] = "'port' can't be null";
        }
        if ($this->container['server_listeners'] === null) {
            $invalidProperties[] = "'server_listeners' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['rtp_data_port_sharing'] === null) {
            $invalidProperties[] = "'rtp_data_port_sharing' can't be null";
        }
        if ($this->container['handler_thread_pool_auto_value'] === null) {
            $invalidProperties[] = "'handler_thread_pool_auto_value' can't be null";
        }
        if ($this->container['default_stream_prefix'] === null) {
            $invalidProperties[] = "'default_stream_prefix' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transport_thread_pool_auto_value
     *
     * @return string
     */
    public function getTransportThreadPoolAutoValue()
    {
        return $this->container['transport_thread_pool_auto_value'];
    }

    /**
     * Sets transport_thread_pool_auto_value
     *
     * @param string $transport_thread_pool_auto_value transport_thread_pool_auto_value
     *
     * @return $this
     */
    public function setTransportThreadPoolAutoValue($transport_thread_pool_auto_value)
    {
        $this->container['transport_thread_pool_auto_value'] = $transport_thread_pool_auto_value;

        return $this;
    }

    /**
     * Gets handler_thread_pool
     *
     * @return string
     */
    public function getHandlerThreadPool()
    {
        return $this->container['handler_thread_pool'];
    }

    /**
     * Sets handler_thread_pool
     *
     * @param string $handler_thread_pool handler_thread_pool
     *
     * @return $this
     */
    public function setHandlerThreadPool($handler_thread_pool)
    {
        $this->container['handler_thread_pool'] = $handler_thread_pool;

        return $this;
    }

    /**
     * Gets transport_thread_pool
     *
     * @return string
     */
    public function getTransportThreadPool()
    {
        return $this->container['transport_thread_pool'];
    }

    /**
     * Sets transport_thread_pool
     *
     * @param string $transport_thread_pool transport_thread_pool
     *
     * @return $this
     */
    public function setTransportThreadPool($transport_thread_pool)
    {
        $this->container['transport_thread_pool'] = $transport_thread_pool;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets server_ıd1
     *
     * @return string
     */
    public function getServerId1()
    {
        return $this->container['server_ıd1'];
    }

    /**
     * Sets server_ıd1
     *
     * @param string $server_ıd1 server_ıd1
     *
     * @return $this
     */
    public function setServerId1($server_ıd1)
    {
        $this->container['server_ıd1'] = $server_ıd1;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets rtp_data_port_sharing_port
     *
     * @return int
     */
    public function getRtpDataPortSharingPort()
    {
        return $this->container['rtp_data_port_sharing_port'];
    }

    /**
     * Sets rtp_data_port_sharing_port
     *
     * @param int $rtp_data_port_sharing_port rtp_data_port_sharing_port
     *
     * @return $this
     */
    public function setRtpDataPortSharingPort($rtp_data_port_sharing_port)
    {
        $this->container['rtp_data_port_sharing_port'] = $rtp_data_port_sharing_port;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets server_ıd2
     *
     * @return string
     */
    public function getServerId2()
    {
        return $this->container['server_ıd2'];
    }

    /**
     * Sets server_ıd2
     *
     * @param string $server_ıd2 server_ıd2
     *
     * @return $this
     */
    public function setServerId2($server_ıd2)
    {
        $this->container['server_ıd2'] = $server_ıd2;

        return $this;
    }

    /**
     * Gets server_ts
     *
     * @return int
     */
    public function getServerTs()
    {
        return $this->container['server_ts'];
    }

    /**
     * Sets server_ts
     *
     * @param int $server_ts server_ts
     *
     * @return $this
     */
    public function setServerTs($server_ts)
    {
        $this->container['server_ts'] = $server_ts;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets server_listeners
     *
     * @return \Swagger\Client\Model\ServerListenersConfig
     */
    public function getServerListeners()
    {
        return $this->container['server_listeners'];
    }

    /**
     * Sets server_listeners
     *
     * @param \Swagger\Client\Model\ServerListenersConfig $server_listeners server_listeners
     *
     * @return $this
     */
    public function setServerListeners($server_listeners)
    {
        $this->container['server_listeners'] = $server_listeners;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rtp_data_port_sharing
     *
     * @return bool
     */
    public function getRtpDataPortSharing()
    {
        return $this->container['rtp_data_port_sharing'];
    }

    /**
     * Sets rtp_data_port_sharing
     *
     * @param bool $rtp_data_port_sharing rtp_data_port_sharing
     *
     * @return $this
     */
    public function setRtpDataPortSharing($rtp_data_port_sharing)
    {
        $this->container['rtp_data_port_sharing'] = $rtp_data_port_sharing;

        return $this;
    }

    /**
     * Gets handler_thread_pool_auto_value
     *
     * @return string
     */
    public function getHandlerThreadPoolAutoValue()
    {
        return $this->container['handler_thread_pool_auto_value'];
    }

    /**
     * Sets handler_thread_pool_auto_value
     *
     * @param string $handler_thread_pool_auto_value handler_thread_pool_auto_value
     *
     * @return $this
     */
    public function setHandlerThreadPoolAutoValue($handler_thread_pool_auto_value)
    {
        $this->container['handler_thread_pool_auto_value'] = $handler_thread_pool_auto_value;

        return $this;
    }

    /**
     * Gets default_stream_prefix
     *
     * @return string
     */
    public function getDefaultStreamPrefix()
    {
        return $this->container['default_stream_prefix'];
    }

    /**
     * Sets default_stream_prefix
     *
     * @param string $default_stream_prefix default_stream_prefix
     *
     * @return $this
     */
    public function setDefaultStreamPrefix($default_stream_prefix)
    {
        $this->container['default_stream_prefix'] = $default_stream_prefix;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


