<?php
/**
 * SMILFileStreamConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SMILFileStreamConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SMILFileStreamConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SMILFileStreamConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'system_language' => 'string',
        'dur' => 'string',
        'ngrp' => 'string',
        'key_frame_only' => 'string',
        'src' => 'string',
        'system_bitrate' => 'string',
        'server_name' => 'string',
        'video_codec_ıd' => 'string',
        'type' => 'string',
        'version' => 'string',
        'audio_bitrate' => 'string',
        'audio_codec_ıd' => 'string',
        'video_bitrate' => 'string',
        'is_wowza_caption_stream' => 'string',
        'video_only' => 'string',
        'audio_only' => 'string',
        'width' => 'string',
        'save_field_list' => 'string[]',
        'idx' => 'int',
        'begin' => 'string',
        'wowza_caption_ıngest_type' => 'string',
        'height' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'system_language' => null,
        'dur' => null,
        'ngrp' => null,
        'key_frame_only' => null,
        'src' => null,
        'system_bitrate' => null,
        'server_name' => null,
        'video_codec_ıd' => null,
        'type' => null,
        'version' => null,
        'audio_bitrate' => null,
        'audio_codec_ıd' => null,
        'video_bitrate' => null,
        'is_wowza_caption_stream' => null,
        'video_only' => null,
        'audio_only' => null,
        'width' => null,
        'save_field_list' => null,
        'idx' => 'int32',
        'begin' => null,
        'wowza_caption_ıngest_type' => null,
        'height' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'system_language' => 'systemLanguage',
        'dur' => 'dur',
        'ngrp' => 'ngrp',
        'key_frame_only' => 'keyFrameOnly',
        'src' => 'src',
        'system_bitrate' => 'systemBitrate',
        'server_name' => 'serverName',
        'video_codec_ıd' => 'videoCodecId',
        'type' => 'type',
        'version' => 'version',
        'audio_bitrate' => 'audioBitrate',
        'audio_codec_ıd' => 'audioCodecId',
        'video_bitrate' => 'videoBitrate',
        'is_wowza_caption_stream' => 'isWowzaCaptionStream',
        'video_only' => 'videoOnly',
        'audio_only' => 'audioOnly',
        'width' => 'width',
        'save_field_list' => 'saveFieldList',
        'idx' => 'idx',
        'begin' => 'begin',
        'wowza_caption_ıngest_type' => 'wowzaCaptionIngestType',
        'height' => 'height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'system_language' => 'setSystemLanguage',
        'dur' => 'setDur',
        'ngrp' => 'setNgrp',
        'key_frame_only' => 'setKeyFrameOnly',
        'src' => 'setSrc',
        'system_bitrate' => 'setSystemBitrate',
        'server_name' => 'setServerName',
        'video_codec_ıd' => 'setVideoCodecId',
        'type' => 'setType',
        'version' => 'setVersion',
        'audio_bitrate' => 'setAudioBitrate',
        'audio_codec_ıd' => 'setAudioCodecId',
        'video_bitrate' => 'setVideoBitrate',
        'is_wowza_caption_stream' => 'setIsWowzaCaptionStream',
        'video_only' => 'setVideoOnly',
        'audio_only' => 'setAudioOnly',
        'width' => 'setWidth',
        'save_field_list' => 'setSaveFieldList',
        'idx' => 'setIdx',
        'begin' => 'setBegin',
        'wowza_caption_ıngest_type' => 'setWowzaCaptionIngestType',
        'height' => 'setHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'system_language' => 'getSystemLanguage',
        'dur' => 'getDur',
        'ngrp' => 'getNgrp',
        'key_frame_only' => 'getKeyFrameOnly',
        'src' => 'getSrc',
        'system_bitrate' => 'getSystemBitrate',
        'server_name' => 'getServerName',
        'video_codec_ıd' => 'getVideoCodecId',
        'type' => 'getType',
        'version' => 'getVersion',
        'audio_bitrate' => 'getAudioBitrate',
        'audio_codec_ıd' => 'getAudioCodecId',
        'video_bitrate' => 'getVideoBitrate',
        'is_wowza_caption_stream' => 'getIsWowzaCaptionStream',
        'video_only' => 'getVideoOnly',
        'audio_only' => 'getAudioOnly',
        'width' => 'getWidth',
        'save_field_list' => 'getSaveFieldList',
        'idx' => 'getIdx',
        'begin' => 'getBegin',
        'wowza_caption_ıngest_type' => 'getWowzaCaptionIngestType',
        'height' => 'getHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['system_language'] = isset($data['system_language']) ? $data['system_language'] : null;
        $this->container['dur'] = isset($data['dur']) ? $data['dur'] : null;
        $this->container['ngrp'] = isset($data['ngrp']) ? $data['ngrp'] : null;
        $this->container['key_frame_only'] = isset($data['key_frame_only']) ? $data['key_frame_only'] : null;
        $this->container['src'] = isset($data['src']) ? $data['src'] : null;
        $this->container['system_bitrate'] = isset($data['system_bitrate']) ? $data['system_bitrate'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['video_codec_ıd'] = isset($data['video_codec_ıd']) ? $data['video_codec_ıd'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['audio_bitrate'] = isset($data['audio_bitrate']) ? $data['audio_bitrate'] : null;
        $this->container['audio_codec_ıd'] = isset($data['audio_codec_ıd']) ? $data['audio_codec_ıd'] : null;
        $this->container['video_bitrate'] = isset($data['video_bitrate']) ? $data['video_bitrate'] : null;
        $this->container['is_wowza_caption_stream'] = isset($data['is_wowza_caption_stream']) ? $data['is_wowza_caption_stream'] : null;
        $this->container['video_only'] = isset($data['video_only']) ? $data['video_only'] : null;
        $this->container['audio_only'] = isset($data['audio_only']) ? $data['audio_only'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['idx'] = isset($data['idx']) ? $data['idx'] : null;
        $this->container['begin'] = isset($data['begin']) ? $data['begin'] : null;
        $this->container['wowza_caption_ıngest_type'] = isset($data['wowza_caption_ıngest_type']) ? $data['wowza_caption_ıngest_type'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['system_language'] === null) {
            $invalidProperties[] = "'system_language' can't be null";
        }
        if ($this->container['dur'] === null) {
            $invalidProperties[] = "'dur' can't be null";
        }
        if ($this->container['ngrp'] === null) {
            $invalidProperties[] = "'ngrp' can't be null";
        }
        if ($this->container['key_frame_only'] === null) {
            $invalidProperties[] = "'key_frame_only' can't be null";
        }
        if ($this->container['src'] === null) {
            $invalidProperties[] = "'src' can't be null";
        }
        if ($this->container['system_bitrate'] === null) {
            $invalidProperties[] = "'system_bitrate' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['video_codec_ıd'] === null) {
            $invalidProperties[] = "'video_codec_ıd' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['audio_bitrate'] === null) {
            $invalidProperties[] = "'audio_bitrate' can't be null";
        }
        if ($this->container['audio_codec_ıd'] === null) {
            $invalidProperties[] = "'audio_codec_ıd' can't be null";
        }
        if ($this->container['video_bitrate'] === null) {
            $invalidProperties[] = "'video_bitrate' can't be null";
        }
        if ($this->container['is_wowza_caption_stream'] === null) {
            $invalidProperties[] = "'is_wowza_caption_stream' can't be null";
        }
        if ($this->container['video_only'] === null) {
            $invalidProperties[] = "'video_only' can't be null";
        }
        if ($this->container['audio_only'] === null) {
            $invalidProperties[] = "'audio_only' can't be null";
        }
        if ($this->container['width'] === null) {
            $invalidProperties[] = "'width' can't be null";
        }
        if ($this->container['idx'] === null) {
            $invalidProperties[] = "'idx' can't be null";
        }
        if ($this->container['begin'] === null) {
            $invalidProperties[] = "'begin' can't be null";
        }
        if ($this->container['wowza_caption_ıngest_type'] === null) {
            $invalidProperties[] = "'wowza_caption_ıngest_type' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets system_language
     *
     * @return string
     */
    public function getSystemLanguage()
    {
        return $this->container['system_language'];
    }

    /**
     * Sets system_language
     *
     * @param string $system_language system_language
     *
     * @return $this
     */
    public function setSystemLanguage($system_language)
    {
        $this->container['system_language'] = $system_language;

        return $this;
    }

    /**
     * Gets dur
     *
     * @return string
     */
    public function getDur()
    {
        return $this->container['dur'];
    }

    /**
     * Sets dur
     *
     * @param string $dur dur
     *
     * @return $this
     */
    public function setDur($dur)
    {
        $this->container['dur'] = $dur;

        return $this;
    }

    /**
     * Gets ngrp
     *
     * @return string
     */
    public function getNgrp()
    {
        return $this->container['ngrp'];
    }

    /**
     * Sets ngrp
     *
     * @param string $ngrp ngrp
     *
     * @return $this
     */
    public function setNgrp($ngrp)
    {
        $this->container['ngrp'] = $ngrp;

        return $this;
    }

    /**
     * Gets key_frame_only
     *
     * @return string
     */
    public function getKeyFrameOnly()
    {
        return $this->container['key_frame_only'];
    }

    /**
     * Sets key_frame_only
     *
     * @param string $key_frame_only key_frame_only
     *
     * @return $this
     */
    public function setKeyFrameOnly($key_frame_only)
    {
        $this->container['key_frame_only'] = $key_frame_only;

        return $this;
    }

    /**
     * Gets src
     *
     * @return string
     */
    public function getSrc()
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param string $src src
     *
     * @return $this
     */
    public function setSrc($src)
    {
        $this->container['src'] = $src;

        return $this;
    }

    /**
     * Gets system_bitrate
     *
     * @return string
     */
    public function getSystemBitrate()
    {
        return $this->container['system_bitrate'];
    }

    /**
     * Sets system_bitrate
     *
     * @param string $system_bitrate system_bitrate
     *
     * @return $this
     */
    public function setSystemBitrate($system_bitrate)
    {
        $this->container['system_bitrate'] = $system_bitrate;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets video_codec_ıd
     *
     * @return string
     */
    public function getVideoCodecId()
    {
        return $this->container['video_codec_ıd'];
    }

    /**
     * Sets video_codec_ıd
     *
     * @param string $video_codec_ıd video_codec_ıd
     *
     * @return $this
     */
    public function setVideoCodecId($video_codec_ıd)
    {
        $this->container['video_codec_ıd'] = $video_codec_ıd;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets audio_bitrate
     *
     * @return string
     */
    public function getAudioBitrate()
    {
        return $this->container['audio_bitrate'];
    }

    /**
     * Sets audio_bitrate
     *
     * @param string $audio_bitrate audio_bitrate
     *
     * @return $this
     */
    public function setAudioBitrate($audio_bitrate)
    {
        $this->container['audio_bitrate'] = $audio_bitrate;

        return $this;
    }

    /**
     * Gets audio_codec_ıd
     *
     * @return string
     */
    public function getAudioCodecId()
    {
        return $this->container['audio_codec_ıd'];
    }

    /**
     * Sets audio_codec_ıd
     *
     * @param string $audio_codec_ıd audio_codec_ıd
     *
     * @return $this
     */
    public function setAudioCodecId($audio_codec_ıd)
    {
        $this->container['audio_codec_ıd'] = $audio_codec_ıd;

        return $this;
    }

    /**
     * Gets video_bitrate
     *
     * @return string
     */
    public function getVideoBitrate()
    {
        return $this->container['video_bitrate'];
    }

    /**
     * Sets video_bitrate
     *
     * @param string $video_bitrate video_bitrate
     *
     * @return $this
     */
    public function setVideoBitrate($video_bitrate)
    {
        $this->container['video_bitrate'] = $video_bitrate;

        return $this;
    }

    /**
     * Gets is_wowza_caption_stream
     *
     * @return string
     */
    public function getIsWowzaCaptionStream()
    {
        return $this->container['is_wowza_caption_stream'];
    }

    /**
     * Sets is_wowza_caption_stream
     *
     * @param string $is_wowza_caption_stream is_wowza_caption_stream
     *
     * @return $this
     */
    public function setIsWowzaCaptionStream($is_wowza_caption_stream)
    {
        $this->container['is_wowza_caption_stream'] = $is_wowza_caption_stream;

        return $this;
    }

    /**
     * Gets video_only
     *
     * @return string
     */
    public function getVideoOnly()
    {
        return $this->container['video_only'];
    }

    /**
     * Sets video_only
     *
     * @param string $video_only video_only
     *
     * @return $this
     */
    public function setVideoOnly($video_only)
    {
        $this->container['video_only'] = $video_only;

        return $this;
    }

    /**
     * Gets audio_only
     *
     * @return string
     */
    public function getAudioOnly()
    {
        return $this->container['audio_only'];
    }

    /**
     * Sets audio_only
     *
     * @param string $audio_only audio_only
     *
     * @return $this
     */
    public function setAudioOnly($audio_only)
    {
        $this->container['audio_only'] = $audio_only;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets idx
     *
     * @return int
     */
    public function getIdx()
    {
        return $this->container['idx'];
    }

    /**
     * Sets idx
     *
     * @param int $idx idx
     *
     * @return $this
     */
    public function setIdx($idx)
    {
        $this->container['idx'] = $idx;

        return $this;
    }

    /**
     * Gets begin
     *
     * @return string
     */
    public function getBegin()
    {
        return $this->container['begin'];
    }

    /**
     * Sets begin
     *
     * @param string $begin begin
     *
     * @return $this
     */
    public function setBegin($begin)
    {
        $this->container['begin'] = $begin;

        return $this;
    }

    /**
     * Gets wowza_caption_ıngest_type
     *
     * @return string
     */
    public function getWowzaCaptionIngestType()
    {
        return $this->container['wowza_caption_ıngest_type'];
    }

    /**
     * Sets wowza_caption_ıngest_type
     *
     * @param string $wowza_caption_ıngest_type wowza_caption_ıngest_type
     *
     * @return $this
     */
    public function setWowzaCaptionIngestType($wowza_caption_ıngest_type)
    {
        $this->container['wowza_caption_ıngest_type'] = $wowza_caption_ıngest_type;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


