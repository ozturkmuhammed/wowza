<?php
/**
 * SSLConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SSLConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SSLConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SSLConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ssl_key_store_password' => 'string',
        'ssl_protocols' => 'string[]',
        'ssl_domain_to_key_store_map_path' => 'string',
        'ssl_cipher_suites' => 'string[]',
        'server_name' => 'string',
        'ssl_key_store_type' => 'string',
        'ssl_protocol' => 'string',
        'ssl_algorithm' => 'string',
        'save_field_list' => 'string[]',
        'ssl_key_store_path' => 'string',
        'version' => 'string',
        'ssl_enable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ssl_key_store_password' => null,
        'ssl_protocols' => null,
        'ssl_domain_to_key_store_map_path' => null,
        'ssl_cipher_suites' => null,
        'server_name' => null,
        'ssl_key_store_type' => null,
        'ssl_protocol' => null,
        'ssl_algorithm' => null,
        'save_field_list' => null,
        'ssl_key_store_path' => null,
        'version' => null,
        'ssl_enable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ssl_key_store_password' => 'sslKeyStorePassword',
        'ssl_protocols' => 'sslProtocols',
        'ssl_domain_to_key_store_map_path' => 'sslDomainToKeyStoreMapPath',
        'ssl_cipher_suites' => 'sslCipherSuites',
        'server_name' => 'serverName',
        'ssl_key_store_type' => 'sslKeyStoreType',
        'ssl_protocol' => 'sslProtocol',
        'ssl_algorithm' => 'sslAlgorithm',
        'save_field_list' => 'saveFieldList',
        'ssl_key_store_path' => 'sslKeyStorePath',
        'version' => 'version',
        'ssl_enable' => 'sslEnable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ssl_key_store_password' => 'setSslKeyStorePassword',
        'ssl_protocols' => 'setSslProtocols',
        'ssl_domain_to_key_store_map_path' => 'setSslDomainToKeyStoreMapPath',
        'ssl_cipher_suites' => 'setSslCipherSuites',
        'server_name' => 'setServerName',
        'ssl_key_store_type' => 'setSslKeyStoreType',
        'ssl_protocol' => 'setSslProtocol',
        'ssl_algorithm' => 'setSslAlgorithm',
        'save_field_list' => 'setSaveFieldList',
        'ssl_key_store_path' => 'setSslKeyStorePath',
        'version' => 'setVersion',
        'ssl_enable' => 'setSslEnable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ssl_key_store_password' => 'getSslKeyStorePassword',
        'ssl_protocols' => 'getSslProtocols',
        'ssl_domain_to_key_store_map_path' => 'getSslDomainToKeyStoreMapPath',
        'ssl_cipher_suites' => 'getSslCipherSuites',
        'server_name' => 'getServerName',
        'ssl_key_store_type' => 'getSslKeyStoreType',
        'ssl_protocol' => 'getSslProtocol',
        'ssl_algorithm' => 'getSslAlgorithm',
        'save_field_list' => 'getSaveFieldList',
        'ssl_key_store_path' => 'getSslKeyStorePath',
        'version' => 'getVersion',
        'ssl_enable' => 'getSslEnable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ssl_key_store_password'] = isset($data['ssl_key_store_password']) ? $data['ssl_key_store_password'] : null;
        $this->container['ssl_protocols'] = isset($data['ssl_protocols']) ? $data['ssl_protocols'] : null;
        $this->container['ssl_domain_to_key_store_map_path'] = isset($data['ssl_domain_to_key_store_map_path']) ? $data['ssl_domain_to_key_store_map_path'] : null;
        $this->container['ssl_cipher_suites'] = isset($data['ssl_cipher_suites']) ? $data['ssl_cipher_suites'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['ssl_key_store_type'] = isset($data['ssl_key_store_type']) ? $data['ssl_key_store_type'] : null;
        $this->container['ssl_protocol'] = isset($data['ssl_protocol']) ? $data['ssl_protocol'] : null;
        $this->container['ssl_algorithm'] = isset($data['ssl_algorithm']) ? $data['ssl_algorithm'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['ssl_key_store_path'] = isset($data['ssl_key_store_path']) ? $data['ssl_key_store_path'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['ssl_enable'] = isset($data['ssl_enable']) ? $data['ssl_enable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ssl_key_store_password'] === null) {
            $invalidProperties[] = "'ssl_key_store_password' can't be null";
        }
        if ($this->container['ssl_protocols'] === null) {
            $invalidProperties[] = "'ssl_protocols' can't be null";
        }
        if ($this->container['ssl_domain_to_key_store_map_path'] === null) {
            $invalidProperties[] = "'ssl_domain_to_key_store_map_path' can't be null";
        }
        if ($this->container['ssl_cipher_suites'] === null) {
            $invalidProperties[] = "'ssl_cipher_suites' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['ssl_key_store_type'] === null) {
            $invalidProperties[] = "'ssl_key_store_type' can't be null";
        }
        if ($this->container['ssl_protocol'] === null) {
            $invalidProperties[] = "'ssl_protocol' can't be null";
        }
        if ($this->container['ssl_algorithm'] === null) {
            $invalidProperties[] = "'ssl_algorithm' can't be null";
        }
        if ($this->container['ssl_key_store_path'] === null) {
            $invalidProperties[] = "'ssl_key_store_path' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['ssl_enable'] === null) {
            $invalidProperties[] = "'ssl_enable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ssl_key_store_password
     *
     * @return string
     */
    public function getSslKeyStorePassword()
    {
        return $this->container['ssl_key_store_password'];
    }

    /**
     * Sets ssl_key_store_password
     *
     * @param string $ssl_key_store_password ssl_key_store_password
     *
     * @return $this
     */
    public function setSslKeyStorePassword($ssl_key_store_password)
    {
        $this->container['ssl_key_store_password'] = $ssl_key_store_password;

        return $this;
    }

    /**
     * Gets ssl_protocols
     *
     * @return string[]
     */
    public function getSslProtocols()
    {
        return $this->container['ssl_protocols'];
    }

    /**
     * Sets ssl_protocols
     *
     * @param string[] $ssl_protocols ssl_protocols
     *
     * @return $this
     */
    public function setSslProtocols($ssl_protocols)
    {
        $this->container['ssl_protocols'] = $ssl_protocols;

        return $this;
    }

    /**
     * Gets ssl_domain_to_key_store_map_path
     *
     * @return string
     */
    public function getSslDomainToKeyStoreMapPath()
    {
        return $this->container['ssl_domain_to_key_store_map_path'];
    }

    /**
     * Sets ssl_domain_to_key_store_map_path
     *
     * @param string $ssl_domain_to_key_store_map_path ssl_domain_to_key_store_map_path
     *
     * @return $this
     */
    public function setSslDomainToKeyStoreMapPath($ssl_domain_to_key_store_map_path)
    {
        $this->container['ssl_domain_to_key_store_map_path'] = $ssl_domain_to_key_store_map_path;

        return $this;
    }

    /**
     * Gets ssl_cipher_suites
     *
     * @return string[]
     */
    public function getSslCipherSuites()
    {
        return $this->container['ssl_cipher_suites'];
    }

    /**
     * Sets ssl_cipher_suites
     *
     * @param string[] $ssl_cipher_suites ssl_cipher_suites
     *
     * @return $this
     */
    public function setSslCipherSuites($ssl_cipher_suites)
    {
        $this->container['ssl_cipher_suites'] = $ssl_cipher_suites;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets ssl_key_store_type
     *
     * @return string
     */
    public function getSslKeyStoreType()
    {
        return $this->container['ssl_key_store_type'];
    }

    /**
     * Sets ssl_key_store_type
     *
     * @param string $ssl_key_store_type ssl_key_store_type
     *
     * @return $this
     */
    public function setSslKeyStoreType($ssl_key_store_type)
    {
        $this->container['ssl_key_store_type'] = $ssl_key_store_type;

        return $this;
    }

    /**
     * Gets ssl_protocol
     *
     * @return string
     */
    public function getSslProtocol()
    {
        return $this->container['ssl_protocol'];
    }

    /**
     * Sets ssl_protocol
     *
     * @param string $ssl_protocol ssl_protocol
     *
     * @return $this
     */
    public function setSslProtocol($ssl_protocol)
    {
        $this->container['ssl_protocol'] = $ssl_protocol;

        return $this;
    }

    /**
     * Gets ssl_algorithm
     *
     * @return string
     */
    public function getSslAlgorithm()
    {
        return $this->container['ssl_algorithm'];
    }

    /**
     * Sets ssl_algorithm
     *
     * @param string $ssl_algorithm ssl_algorithm
     *
     * @return $this
     */
    public function setSslAlgorithm($ssl_algorithm)
    {
        $this->container['ssl_algorithm'] = $ssl_algorithm;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets ssl_key_store_path
     *
     * @return string
     */
    public function getSslKeyStorePath()
    {
        return $this->container['ssl_key_store_path'];
    }

    /**
     * Sets ssl_key_store_path
     *
     * @param string $ssl_key_store_path ssl_key_store_path
     *
     * @return $this
     */
    public function setSslKeyStorePath($ssl_key_store_path)
    {
        $this->container['ssl_key_store_path'] = $ssl_key_store_path;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets ssl_enable
     *
     * @return bool
     */
    public function getSslEnable()
    {
        return $this->container['ssl_enable'];
    }

    /**
     * Sets ssl_enable
     *
     * @param bool $ssl_enable ssl_enable
     *
     * @return $this
     */
    public function setSslEnable($ssl_enable)
    {
        $this->container['ssl_enable'] = $ssl_enable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


