<?php
/**
 * DVRConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DVRConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DVRConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DVRConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'window_duration' => 'int',
        'dvr_media_cache_enabled' => 'bool',
        'dvr_enable' => 'bool',
        'start_recording_on_startup' => 'bool',
        'server_name' => 'string',
        'store' => 'string',
        'version' => 'string',
        'recorders' => 'string',
        'dvr_only_streaming' => 'bool',
        'http_randomize_media_name' => 'bool',
        'license_type' => 'string',
        'dvr_encryption_shared_secret' => 'string',
        'in_use' => 'bool',
        'archive_strategy' => 'string',
        'storage_dir' => 'string',
        'save_field_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'window_duration' => 'int32',
        'dvr_media_cache_enabled' => null,
        'dvr_enable' => null,
        'start_recording_on_startup' => null,
        'server_name' => null,
        'store' => null,
        'version' => null,
        'recorders' => null,
        'dvr_only_streaming' => null,
        'http_randomize_media_name' => null,
        'license_type' => null,
        'dvr_encryption_shared_secret' => null,
        'in_use' => null,
        'archive_strategy' => null,
        'storage_dir' => null,
        'save_field_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'window_duration' => 'windowDuration',
        'dvr_media_cache_enabled' => 'dvrMediaCacheEnabled',
        'dvr_enable' => 'dvrEnable',
        'start_recording_on_startup' => 'startRecordingOnStartup',
        'server_name' => 'serverName',
        'store' => 'store',
        'version' => 'version',
        'recorders' => 'recorders',
        'dvr_only_streaming' => 'dvrOnlyStreaming',
        'http_randomize_media_name' => 'httpRandomizeMediaName',
        'license_type' => 'licenseType',
        'dvr_encryption_shared_secret' => 'dvrEncryptionSharedSecret',
        'in_use' => 'inUse',
        'archive_strategy' => 'archiveStrategy',
        'storage_dir' => 'storageDir',
        'save_field_list' => 'saveFieldList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'window_duration' => 'setWindowDuration',
        'dvr_media_cache_enabled' => 'setDvrMediaCacheEnabled',
        'dvr_enable' => 'setDvrEnable',
        'start_recording_on_startup' => 'setStartRecordingOnStartup',
        'server_name' => 'setServerName',
        'store' => 'setStore',
        'version' => 'setVersion',
        'recorders' => 'setRecorders',
        'dvr_only_streaming' => 'setDvrOnlyStreaming',
        'http_randomize_media_name' => 'setHttpRandomizeMediaName',
        'license_type' => 'setLicenseType',
        'dvr_encryption_shared_secret' => 'setDvrEncryptionSharedSecret',
        'in_use' => 'setInUse',
        'archive_strategy' => 'setArchiveStrategy',
        'storage_dir' => 'setStorageDir',
        'save_field_list' => 'setSaveFieldList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'window_duration' => 'getWindowDuration',
        'dvr_media_cache_enabled' => 'getDvrMediaCacheEnabled',
        'dvr_enable' => 'getDvrEnable',
        'start_recording_on_startup' => 'getStartRecordingOnStartup',
        'server_name' => 'getServerName',
        'store' => 'getStore',
        'version' => 'getVersion',
        'recorders' => 'getRecorders',
        'dvr_only_streaming' => 'getDvrOnlyStreaming',
        'http_randomize_media_name' => 'getHttpRandomizeMediaName',
        'license_type' => 'getLicenseType',
        'dvr_encryption_shared_secret' => 'getDvrEncryptionSharedSecret',
        'in_use' => 'getInUse',
        'archive_strategy' => 'getArchiveStrategy',
        'storage_dir' => 'getStorageDir',
        'save_field_list' => 'getSaveFieldList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['window_duration'] = isset($data['window_duration']) ? $data['window_duration'] : null;
        $this->container['dvr_media_cache_enabled'] = isset($data['dvr_media_cache_enabled']) ? $data['dvr_media_cache_enabled'] : null;
        $this->container['dvr_enable'] = isset($data['dvr_enable']) ? $data['dvr_enable'] : null;
        $this->container['start_recording_on_startup'] = isset($data['start_recording_on_startup']) ? $data['start_recording_on_startup'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['store'] = isset($data['store']) ? $data['store'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['recorders'] = isset($data['recorders']) ? $data['recorders'] : null;
        $this->container['dvr_only_streaming'] = isset($data['dvr_only_streaming']) ? $data['dvr_only_streaming'] : null;
        $this->container['http_randomize_media_name'] = isset($data['http_randomize_media_name']) ? $data['http_randomize_media_name'] : null;
        $this->container['license_type'] = isset($data['license_type']) ? $data['license_type'] : null;
        $this->container['dvr_encryption_shared_secret'] = isset($data['dvr_encryption_shared_secret']) ? $data['dvr_encryption_shared_secret'] : null;
        $this->container['in_use'] = isset($data['in_use']) ? $data['in_use'] : null;
        $this->container['archive_strategy'] = isset($data['archive_strategy']) ? $data['archive_strategy'] : null;
        $this->container['storage_dir'] = isset($data['storage_dir']) ? $data['storage_dir'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['window_duration'] === null) {
            $invalidProperties[] = "'window_duration' can't be null";
        }
        if ($this->container['dvr_media_cache_enabled'] === null) {
            $invalidProperties[] = "'dvr_media_cache_enabled' can't be null";
        }
        if ($this->container['dvr_enable'] === null) {
            $invalidProperties[] = "'dvr_enable' can't be null";
        }
        if ($this->container['start_recording_on_startup'] === null) {
            $invalidProperties[] = "'start_recording_on_startup' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['store'] === null) {
            $invalidProperties[] = "'store' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['recorders'] === null) {
            $invalidProperties[] = "'recorders' can't be null";
        }
        if ($this->container['dvr_only_streaming'] === null) {
            $invalidProperties[] = "'dvr_only_streaming' can't be null";
        }
        if ($this->container['http_randomize_media_name'] === null) {
            $invalidProperties[] = "'http_randomize_media_name' can't be null";
        }
        if ($this->container['license_type'] === null) {
            $invalidProperties[] = "'license_type' can't be null";
        }
        if ($this->container['dvr_encryption_shared_secret'] === null) {
            $invalidProperties[] = "'dvr_encryption_shared_secret' can't be null";
        }
        if ($this->container['in_use'] === null) {
            $invalidProperties[] = "'in_use' can't be null";
        }
        if ($this->container['archive_strategy'] === null) {
            $invalidProperties[] = "'archive_strategy' can't be null";
        }
        if ($this->container['storage_dir'] === null) {
            $invalidProperties[] = "'storage_dir' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets window_duration
     *
     * @return int
     */
    public function getWindowDuration()
    {
        return $this->container['window_duration'];
    }

    /**
     * Sets window_duration
     *
     * @param int $window_duration window_duration
     *
     * @return $this
     */
    public function setWindowDuration($window_duration)
    {
        $this->container['window_duration'] = $window_duration;

        return $this;
    }

    /**
     * Gets dvr_media_cache_enabled
     *
     * @return bool
     */
    public function getDvrMediaCacheEnabled()
    {
        return $this->container['dvr_media_cache_enabled'];
    }

    /**
     * Sets dvr_media_cache_enabled
     *
     * @param bool $dvr_media_cache_enabled dvr_media_cache_enabled
     *
     * @return $this
     */
    public function setDvrMediaCacheEnabled($dvr_media_cache_enabled)
    {
        $this->container['dvr_media_cache_enabled'] = $dvr_media_cache_enabled;

        return $this;
    }

    /**
     * Gets dvr_enable
     *
     * @return bool
     */
    public function getDvrEnable()
    {
        return $this->container['dvr_enable'];
    }

    /**
     * Sets dvr_enable
     *
     * @param bool $dvr_enable dvr_enable
     *
     * @return $this
     */
    public function setDvrEnable($dvr_enable)
    {
        $this->container['dvr_enable'] = $dvr_enable;

        return $this;
    }

    /**
     * Gets start_recording_on_startup
     *
     * @return bool
     */
    public function getStartRecordingOnStartup()
    {
        return $this->container['start_recording_on_startup'];
    }

    /**
     * Sets start_recording_on_startup
     *
     * @param bool $start_recording_on_startup start_recording_on_startup
     *
     * @return $this
     */
    public function setStartRecordingOnStartup($start_recording_on_startup)
    {
        $this->container['start_recording_on_startup'] = $start_recording_on_startup;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets store
     *
     * @return string
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param string $store store
     *
     * @return $this
     */
    public function setStore($store)
    {
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets recorders
     *
     * @return string
     */
    public function getRecorders()
    {
        return $this->container['recorders'];
    }

    /**
     * Sets recorders
     *
     * @param string $recorders recorders
     *
     * @return $this
     */
    public function setRecorders($recorders)
    {
        $this->container['recorders'] = $recorders;

        return $this;
    }

    /**
     * Gets dvr_only_streaming
     *
     * @return bool
     */
    public function getDvrOnlyStreaming()
    {
        return $this->container['dvr_only_streaming'];
    }

    /**
     * Sets dvr_only_streaming
     *
     * @param bool $dvr_only_streaming dvr_only_streaming
     *
     * @return $this
     */
    public function setDvrOnlyStreaming($dvr_only_streaming)
    {
        $this->container['dvr_only_streaming'] = $dvr_only_streaming;

        return $this;
    }

    /**
     * Gets http_randomize_media_name
     *
     * @return bool
     */
    public function getHttpRandomizeMediaName()
    {
        return $this->container['http_randomize_media_name'];
    }

    /**
     * Sets http_randomize_media_name
     *
     * @param bool $http_randomize_media_name http_randomize_media_name
     *
     * @return $this
     */
    public function setHttpRandomizeMediaName($http_randomize_media_name)
    {
        $this->container['http_randomize_media_name'] = $http_randomize_media_name;

        return $this;
    }

    /**
     * Gets license_type
     *
     * @return string
     */
    public function getLicenseType()
    {
        return $this->container['license_type'];
    }

    /**
     * Sets license_type
     *
     * @param string $license_type license_type
     *
     * @return $this
     */
    public function setLicenseType($license_type)
    {
        $this->container['license_type'] = $license_type;

        return $this;
    }

    /**
     * Gets dvr_encryption_shared_secret
     *
     * @return string
     */
    public function getDvrEncryptionSharedSecret()
    {
        return $this->container['dvr_encryption_shared_secret'];
    }

    /**
     * Sets dvr_encryption_shared_secret
     *
     * @param string $dvr_encryption_shared_secret dvr_encryption_shared_secret
     *
     * @return $this
     */
    public function setDvrEncryptionSharedSecret($dvr_encryption_shared_secret)
    {
        $this->container['dvr_encryption_shared_secret'] = $dvr_encryption_shared_secret;

        return $this;
    }

    /**
     * Gets in_use
     *
     * @return bool
     */
    public function getInUse()
    {
        return $this->container['in_use'];
    }

    /**
     * Sets in_use
     *
     * @param bool $in_use in_use
     *
     * @return $this
     */
    public function setInUse($in_use)
    {
        $this->container['in_use'] = $in_use;

        return $this;
    }

    /**
     * Gets archive_strategy
     *
     * @return string
     */
    public function getArchiveStrategy()
    {
        return $this->container['archive_strategy'];
    }

    /**
     * Sets archive_strategy
     *
     * @param string $archive_strategy archive_strategy
     *
     * @return $this
     */
    public function setArchiveStrategy($archive_strategy)
    {
        $this->container['archive_strategy'] = $archive_strategy;

        return $this;
    }

    /**
     * Gets storage_dir
     *
     * @return string
     */
    public function getStorageDir()
    {
        return $this->container['storage_dir'];
    }

    /**
     * Sets storage_dir
     *
     * @param string $storage_dir storage_dir
     *
     * @return $this
     */
    public function setStorageDir($storage_dir)
    {
        $this->container['storage_dir'] = $storage_dir;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


