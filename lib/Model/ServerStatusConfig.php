<?php
/**
 * ServerStatusConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ServerStatusConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServerStatusConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServerStatusConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transcoder_watermark' => 'bool',
        'server_version' => 'string',
        'gpu_acceleration' => 'string',
        'wse_name' => 'string',
        'transcoder_licensed' => 'bool',
        'java_max_heap_size' => 'string',
        'transcoder_licenses_ın_use' => 'int',
        'java_version' => 'string',
        'http_origin_available' => 'bool',
        'server_name' => 'string',
        'os_architecture' => 'string',
        'drm_applications' => 'string[]',
        'java_vm_version' => 'string',
        'transcoder_licenses' => 'int',
        'time_running' => 'double',
        'license_type' => 'string',
        'os_bitness' => 'string',
        'dvr_applications' => 'string[]',
        'os_version' => 'string',
        'server_build' => 'string',
        'save_field_list' => 'string[]',
        'java_name' => 'string',
        'max_connections' => 'int',
        'dvr_licensed' => 'bool',
        'server_mode' => 'string',
        'java_bitness' => 'string',
        'current_connections' => 'int',
        'drm_licensed' => 'bool',
        'java_vendor' => 'string',
        'os_name' => 'string',
        'version' => 'string',
        'transcoder_applications' => 'string[]',
        'transcoder_available' => 'bool',
        'java_home' => 'string',
        'max_ıncomming_streams' => 'int',
        'total_memory' => 'int',
        'available_memory' => 'int',
        'native_base' => 'string',
        'dvr_ın_use' => 'bool',
        'drm_ın_use' => 'bool',
        'license_expire_date' => 'string',
        'processor_cores' => 'int',
        'rest_apı_available' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transcoder_watermark' => null,
        'server_version' => null,
        'gpu_acceleration' => null,
        'wse_name' => null,
        'transcoder_licensed' => null,
        'java_max_heap_size' => null,
        'transcoder_licenses_ın_use' => 'int32',
        'java_version' => null,
        'http_origin_available' => null,
        'server_name' => null,
        'os_architecture' => null,
        'drm_applications' => null,
        'java_vm_version' => null,
        'transcoder_licenses' => 'int32',
        'time_running' => 'double',
        'license_type' => null,
        'os_bitness' => null,
        'dvr_applications' => null,
        'os_version' => null,
        'server_build' => null,
        'save_field_list' => null,
        'java_name' => null,
        'max_connections' => 'int64',
        'dvr_licensed' => null,
        'server_mode' => null,
        'java_bitness' => null,
        'current_connections' => 'int64',
        'drm_licensed' => null,
        'java_vendor' => null,
        'os_name' => null,
        'version' => null,
        'transcoder_applications' => null,
        'transcoder_available' => null,
        'java_home' => null,
        'max_ıncomming_streams' => 'int64',
        'total_memory' => 'int64',
        'available_memory' => 'int64',
        'native_base' => null,
        'dvr_ın_use' => null,
        'drm_ın_use' => null,
        'license_expire_date' => null,
        'processor_cores' => 'int32',
        'rest_apı_available' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transcoder_watermark' => 'transcoderWatermark',
        'server_version' => 'serverVersion',
        'gpu_acceleration' => 'gpuAcceleration',
        'wse_name' => 'wseName',
        'transcoder_licensed' => 'transcoderLicensed',
        'java_max_heap_size' => 'javaMaxHeapSize',
        'transcoder_licenses_ın_use' => 'transcoderLicensesInUse',
        'java_version' => 'javaVersion',
        'http_origin_available' => 'httpOriginAvailable',
        'server_name' => 'serverName',
        'os_architecture' => 'osArchitecture',
        'drm_applications' => 'drmApplications',
        'java_vm_version' => 'javaVMVersion',
        'transcoder_licenses' => 'transcoderLicenses',
        'time_running' => 'timeRunning',
        'license_type' => 'licenseType',
        'os_bitness' => 'osBitness',
        'dvr_applications' => 'dvrApplications',
        'os_version' => 'osVersion',
        'server_build' => 'serverBuild',
        'save_field_list' => 'saveFieldList',
        'java_name' => 'javaName',
        'max_connections' => 'maxConnections',
        'dvr_licensed' => 'dvrLicensed',
        'server_mode' => 'serverMode',
        'java_bitness' => 'javaBitness',
        'current_connections' => 'currentConnections',
        'drm_licensed' => 'drmLicensed',
        'java_vendor' => 'javaVendor',
        'os_name' => 'osName',
        'version' => 'version',
        'transcoder_applications' => 'transcoderApplications',
        'transcoder_available' => 'transcoderAvailable',
        'java_home' => 'javaHome',
        'max_ıncomming_streams' => 'maxIncommingStreams',
        'total_memory' => 'totalMemory',
        'available_memory' => 'availableMemory',
        'native_base' => 'nativeBase',
        'dvr_ın_use' => 'dvrInUse',
        'drm_ın_use' => 'drmInUse',
        'license_expire_date' => 'licenseExpireDate',
        'processor_cores' => 'processorCores',
        'rest_apı_available' => 'restAPIAvailable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transcoder_watermark' => 'setTranscoderWatermark',
        'server_version' => 'setServerVersion',
        'gpu_acceleration' => 'setGpuAcceleration',
        'wse_name' => 'setWseName',
        'transcoder_licensed' => 'setTranscoderLicensed',
        'java_max_heap_size' => 'setJavaMaxHeapSize',
        'transcoder_licenses_ın_use' => 'setTranscoderLicensesInUse',
        'java_version' => 'setJavaVersion',
        'http_origin_available' => 'setHttpOriginAvailable',
        'server_name' => 'setServerName',
        'os_architecture' => 'setOsArchitecture',
        'drm_applications' => 'setDrmApplications',
        'java_vm_version' => 'setJavaVmVersion',
        'transcoder_licenses' => 'setTranscoderLicenses',
        'time_running' => 'setTimeRunning',
        'license_type' => 'setLicenseType',
        'os_bitness' => 'setOsBitness',
        'dvr_applications' => 'setDvrApplications',
        'os_version' => 'setOsVersion',
        'server_build' => 'setServerBuild',
        'save_field_list' => 'setSaveFieldList',
        'java_name' => 'setJavaName',
        'max_connections' => 'setMaxConnections',
        'dvr_licensed' => 'setDvrLicensed',
        'server_mode' => 'setServerMode',
        'java_bitness' => 'setJavaBitness',
        'current_connections' => 'setCurrentConnections',
        'drm_licensed' => 'setDrmLicensed',
        'java_vendor' => 'setJavaVendor',
        'os_name' => 'setOsName',
        'version' => 'setVersion',
        'transcoder_applications' => 'setTranscoderApplications',
        'transcoder_available' => 'setTranscoderAvailable',
        'java_home' => 'setJavaHome',
        'max_ıncomming_streams' => 'setMaxIncommingStreams',
        'total_memory' => 'setTotalMemory',
        'available_memory' => 'setAvailableMemory',
        'native_base' => 'setNativeBase',
        'dvr_ın_use' => 'setDvrInUse',
        'drm_ın_use' => 'setDrmInUse',
        'license_expire_date' => 'setLicenseExpireDate',
        'processor_cores' => 'setProcessorCores',
        'rest_apı_available' => 'setRestApıAvailable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transcoder_watermark' => 'getTranscoderWatermark',
        'server_version' => 'getServerVersion',
        'gpu_acceleration' => 'getGpuAcceleration',
        'wse_name' => 'getWseName',
        'transcoder_licensed' => 'getTranscoderLicensed',
        'java_max_heap_size' => 'getJavaMaxHeapSize',
        'transcoder_licenses_ın_use' => 'getTranscoderLicensesInUse',
        'java_version' => 'getJavaVersion',
        'http_origin_available' => 'getHttpOriginAvailable',
        'server_name' => 'getServerName',
        'os_architecture' => 'getOsArchitecture',
        'drm_applications' => 'getDrmApplications',
        'java_vm_version' => 'getJavaVmVersion',
        'transcoder_licenses' => 'getTranscoderLicenses',
        'time_running' => 'getTimeRunning',
        'license_type' => 'getLicenseType',
        'os_bitness' => 'getOsBitness',
        'dvr_applications' => 'getDvrApplications',
        'os_version' => 'getOsVersion',
        'server_build' => 'getServerBuild',
        'save_field_list' => 'getSaveFieldList',
        'java_name' => 'getJavaName',
        'max_connections' => 'getMaxConnections',
        'dvr_licensed' => 'getDvrLicensed',
        'server_mode' => 'getServerMode',
        'java_bitness' => 'getJavaBitness',
        'current_connections' => 'getCurrentConnections',
        'drm_licensed' => 'getDrmLicensed',
        'java_vendor' => 'getJavaVendor',
        'os_name' => 'getOsName',
        'version' => 'getVersion',
        'transcoder_applications' => 'getTranscoderApplications',
        'transcoder_available' => 'getTranscoderAvailable',
        'java_home' => 'getJavaHome',
        'max_ıncomming_streams' => 'getMaxIncommingStreams',
        'total_memory' => 'getTotalMemory',
        'available_memory' => 'getAvailableMemory',
        'native_base' => 'getNativeBase',
        'dvr_ın_use' => 'getDvrInUse',
        'drm_ın_use' => 'getDrmInUse',
        'license_expire_date' => 'getLicenseExpireDate',
        'processor_cores' => 'getProcessorCores',
        'rest_apı_available' => 'getRestApıAvailable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transcoder_watermark'] = isset($data['transcoder_watermark']) ? $data['transcoder_watermark'] : null;
        $this->container['server_version'] = isset($data['server_version']) ? $data['server_version'] : null;
        $this->container['gpu_acceleration'] = isset($data['gpu_acceleration']) ? $data['gpu_acceleration'] : null;
        $this->container['wse_name'] = isset($data['wse_name']) ? $data['wse_name'] : null;
        $this->container['transcoder_licensed'] = isset($data['transcoder_licensed']) ? $data['transcoder_licensed'] : null;
        $this->container['java_max_heap_size'] = isset($data['java_max_heap_size']) ? $data['java_max_heap_size'] : null;
        $this->container['transcoder_licenses_ın_use'] = isset($data['transcoder_licenses_ın_use']) ? $data['transcoder_licenses_ın_use'] : null;
        $this->container['java_version'] = isset($data['java_version']) ? $data['java_version'] : null;
        $this->container['http_origin_available'] = isset($data['http_origin_available']) ? $data['http_origin_available'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['os_architecture'] = isset($data['os_architecture']) ? $data['os_architecture'] : null;
        $this->container['drm_applications'] = isset($data['drm_applications']) ? $data['drm_applications'] : null;
        $this->container['java_vm_version'] = isset($data['java_vm_version']) ? $data['java_vm_version'] : null;
        $this->container['transcoder_licenses'] = isset($data['transcoder_licenses']) ? $data['transcoder_licenses'] : null;
        $this->container['time_running'] = isset($data['time_running']) ? $data['time_running'] : null;
        $this->container['license_type'] = isset($data['license_type']) ? $data['license_type'] : null;
        $this->container['os_bitness'] = isset($data['os_bitness']) ? $data['os_bitness'] : null;
        $this->container['dvr_applications'] = isset($data['dvr_applications']) ? $data['dvr_applications'] : null;
        $this->container['os_version'] = isset($data['os_version']) ? $data['os_version'] : null;
        $this->container['server_build'] = isset($data['server_build']) ? $data['server_build'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['java_name'] = isset($data['java_name']) ? $data['java_name'] : null;
        $this->container['max_connections'] = isset($data['max_connections']) ? $data['max_connections'] : null;
        $this->container['dvr_licensed'] = isset($data['dvr_licensed']) ? $data['dvr_licensed'] : null;
        $this->container['server_mode'] = isset($data['server_mode']) ? $data['server_mode'] : null;
        $this->container['java_bitness'] = isset($data['java_bitness']) ? $data['java_bitness'] : null;
        $this->container['current_connections'] = isset($data['current_connections']) ? $data['current_connections'] : null;
        $this->container['drm_licensed'] = isset($data['drm_licensed']) ? $data['drm_licensed'] : null;
        $this->container['java_vendor'] = isset($data['java_vendor']) ? $data['java_vendor'] : null;
        $this->container['os_name'] = isset($data['os_name']) ? $data['os_name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['transcoder_applications'] = isset($data['transcoder_applications']) ? $data['transcoder_applications'] : null;
        $this->container['transcoder_available'] = isset($data['transcoder_available']) ? $data['transcoder_available'] : null;
        $this->container['java_home'] = isset($data['java_home']) ? $data['java_home'] : null;
        $this->container['max_ıncomming_streams'] = isset($data['max_ıncomming_streams']) ? $data['max_ıncomming_streams'] : null;
        $this->container['total_memory'] = isset($data['total_memory']) ? $data['total_memory'] : null;
        $this->container['available_memory'] = isset($data['available_memory']) ? $data['available_memory'] : null;
        $this->container['native_base'] = isset($data['native_base']) ? $data['native_base'] : null;
        $this->container['dvr_ın_use'] = isset($data['dvr_ın_use']) ? $data['dvr_ın_use'] : null;
        $this->container['drm_ın_use'] = isset($data['drm_ın_use']) ? $data['drm_ın_use'] : null;
        $this->container['license_expire_date'] = isset($data['license_expire_date']) ? $data['license_expire_date'] : null;
        $this->container['processor_cores'] = isset($data['processor_cores']) ? $data['processor_cores'] : null;
        $this->container['rest_apı_available'] = isset($data['rest_apı_available']) ? $data['rest_apı_available'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transcoder_watermark'] === null) {
            $invalidProperties[] = "'transcoder_watermark' can't be null";
        }
        if ($this->container['server_version'] === null) {
            $invalidProperties[] = "'server_version' can't be null";
        }
        if ($this->container['gpu_acceleration'] === null) {
            $invalidProperties[] = "'gpu_acceleration' can't be null";
        }
        if ($this->container['wse_name'] === null) {
            $invalidProperties[] = "'wse_name' can't be null";
        }
        if ($this->container['transcoder_licensed'] === null) {
            $invalidProperties[] = "'transcoder_licensed' can't be null";
        }
        if ($this->container['java_max_heap_size'] === null) {
            $invalidProperties[] = "'java_max_heap_size' can't be null";
        }
        if ($this->container['transcoder_licenses_ın_use'] === null) {
            $invalidProperties[] = "'transcoder_licenses_ın_use' can't be null";
        }
        if ($this->container['java_version'] === null) {
            $invalidProperties[] = "'java_version' can't be null";
        }
        if ($this->container['http_origin_available'] === null) {
            $invalidProperties[] = "'http_origin_available' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['os_architecture'] === null) {
            $invalidProperties[] = "'os_architecture' can't be null";
        }
        if ($this->container['drm_applications'] === null) {
            $invalidProperties[] = "'drm_applications' can't be null";
        }
        if ($this->container['java_vm_version'] === null) {
            $invalidProperties[] = "'java_vm_version' can't be null";
        }
        if ($this->container['transcoder_licenses'] === null) {
            $invalidProperties[] = "'transcoder_licenses' can't be null";
        }
        if ($this->container['time_running'] === null) {
            $invalidProperties[] = "'time_running' can't be null";
        }
        if ($this->container['license_type'] === null) {
            $invalidProperties[] = "'license_type' can't be null";
        }
        if ($this->container['os_bitness'] === null) {
            $invalidProperties[] = "'os_bitness' can't be null";
        }
        if ($this->container['dvr_applications'] === null) {
            $invalidProperties[] = "'dvr_applications' can't be null";
        }
        if ($this->container['os_version'] === null) {
            $invalidProperties[] = "'os_version' can't be null";
        }
        if ($this->container['server_build'] === null) {
            $invalidProperties[] = "'server_build' can't be null";
        }
        if ($this->container['java_name'] === null) {
            $invalidProperties[] = "'java_name' can't be null";
        }
        if ($this->container['max_connections'] === null) {
            $invalidProperties[] = "'max_connections' can't be null";
        }
        if ($this->container['dvr_licensed'] === null) {
            $invalidProperties[] = "'dvr_licensed' can't be null";
        }
        if ($this->container['server_mode'] === null) {
            $invalidProperties[] = "'server_mode' can't be null";
        }
        if ($this->container['java_bitness'] === null) {
            $invalidProperties[] = "'java_bitness' can't be null";
        }
        if ($this->container['current_connections'] === null) {
            $invalidProperties[] = "'current_connections' can't be null";
        }
        if ($this->container['drm_licensed'] === null) {
            $invalidProperties[] = "'drm_licensed' can't be null";
        }
        if ($this->container['java_vendor'] === null) {
            $invalidProperties[] = "'java_vendor' can't be null";
        }
        if ($this->container['os_name'] === null) {
            $invalidProperties[] = "'os_name' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['transcoder_applications'] === null) {
            $invalidProperties[] = "'transcoder_applications' can't be null";
        }
        if ($this->container['transcoder_available'] === null) {
            $invalidProperties[] = "'transcoder_available' can't be null";
        }
        if ($this->container['java_home'] === null) {
            $invalidProperties[] = "'java_home' can't be null";
        }
        if ($this->container['max_ıncomming_streams'] === null) {
            $invalidProperties[] = "'max_ıncomming_streams' can't be null";
        }
        if ($this->container['total_memory'] === null) {
            $invalidProperties[] = "'total_memory' can't be null";
        }
        if ($this->container['available_memory'] === null) {
            $invalidProperties[] = "'available_memory' can't be null";
        }
        if ($this->container['native_base'] === null) {
            $invalidProperties[] = "'native_base' can't be null";
        }
        if ($this->container['dvr_ın_use'] === null) {
            $invalidProperties[] = "'dvr_ın_use' can't be null";
        }
        if ($this->container['drm_ın_use'] === null) {
            $invalidProperties[] = "'drm_ın_use' can't be null";
        }
        if ($this->container['license_expire_date'] === null) {
            $invalidProperties[] = "'license_expire_date' can't be null";
        }
        if ($this->container['processor_cores'] === null) {
            $invalidProperties[] = "'processor_cores' can't be null";
        }
        if ($this->container['rest_apı_available'] === null) {
            $invalidProperties[] = "'rest_apı_available' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transcoder_watermark
     *
     * @return bool
     */
    public function getTranscoderWatermark()
    {
        return $this->container['transcoder_watermark'];
    }

    /**
     * Sets transcoder_watermark
     *
     * @param bool $transcoder_watermark transcoder_watermark
     *
     * @return $this
     */
    public function setTranscoderWatermark($transcoder_watermark)
    {
        $this->container['transcoder_watermark'] = $transcoder_watermark;

        return $this;
    }

    /**
     * Gets server_version
     *
     * @return string
     */
    public function getServerVersion()
    {
        return $this->container['server_version'];
    }

    /**
     * Sets server_version
     *
     * @param string $server_version server_version
     *
     * @return $this
     */
    public function setServerVersion($server_version)
    {
        $this->container['server_version'] = $server_version;

        return $this;
    }

    /**
     * Gets gpu_acceleration
     *
     * @return string
     */
    public function getGpuAcceleration()
    {
        return $this->container['gpu_acceleration'];
    }

    /**
     * Sets gpu_acceleration
     *
     * @param string $gpu_acceleration gpu_acceleration
     *
     * @return $this
     */
    public function setGpuAcceleration($gpu_acceleration)
    {
        $this->container['gpu_acceleration'] = $gpu_acceleration;

        return $this;
    }

    /**
     * Gets wse_name
     *
     * @return string
     */
    public function getWseName()
    {
        return $this->container['wse_name'];
    }

    /**
     * Sets wse_name
     *
     * @param string $wse_name wse_name
     *
     * @return $this
     */
    public function setWseName($wse_name)
    {
        $this->container['wse_name'] = $wse_name;

        return $this;
    }

    /**
     * Gets transcoder_licensed
     *
     * @return bool
     */
    public function getTranscoderLicensed()
    {
        return $this->container['transcoder_licensed'];
    }

    /**
     * Sets transcoder_licensed
     *
     * @param bool $transcoder_licensed transcoder_licensed
     *
     * @return $this
     */
    public function setTranscoderLicensed($transcoder_licensed)
    {
        $this->container['transcoder_licensed'] = $transcoder_licensed;

        return $this;
    }

    /**
     * Gets java_max_heap_size
     *
     * @return string
     */
    public function getJavaMaxHeapSize()
    {
        return $this->container['java_max_heap_size'];
    }

    /**
     * Sets java_max_heap_size
     *
     * @param string $java_max_heap_size java_max_heap_size
     *
     * @return $this
     */
    public function setJavaMaxHeapSize($java_max_heap_size)
    {
        $this->container['java_max_heap_size'] = $java_max_heap_size;

        return $this;
    }

    /**
     * Gets transcoder_licenses_ın_use
     *
     * @return int
     */
    public function getTranscoderLicensesInUse()
    {
        return $this->container['transcoder_licenses_ın_use'];
    }

    /**
     * Sets transcoder_licenses_ın_use
     *
     * @param int $transcoder_licenses_ın_use transcoder_licenses_ın_use
     *
     * @return $this
     */
    public function setTranscoderLicensesInUse($transcoder_licenses_ın_use)
    {
        $this->container['transcoder_licenses_ın_use'] = $transcoder_licenses_ın_use;

        return $this;
    }

    /**
     * Gets java_version
     *
     * @return string
     */
    public function getJavaVersion()
    {
        return $this->container['java_version'];
    }

    /**
     * Sets java_version
     *
     * @param string $java_version java_version
     *
     * @return $this
     */
    public function setJavaVersion($java_version)
    {
        $this->container['java_version'] = $java_version;

        return $this;
    }

    /**
     * Gets http_origin_available
     *
     * @return bool
     */
    public function getHttpOriginAvailable()
    {
        return $this->container['http_origin_available'];
    }

    /**
     * Sets http_origin_available
     *
     * @param bool $http_origin_available http_origin_available
     *
     * @return $this
     */
    public function setHttpOriginAvailable($http_origin_available)
    {
        $this->container['http_origin_available'] = $http_origin_available;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets os_architecture
     *
     * @return string
     */
    public function getOsArchitecture()
    {
        return $this->container['os_architecture'];
    }

    /**
     * Sets os_architecture
     *
     * @param string $os_architecture os_architecture
     *
     * @return $this
     */
    public function setOsArchitecture($os_architecture)
    {
        $this->container['os_architecture'] = $os_architecture;

        return $this;
    }

    /**
     * Gets drm_applications
     *
     * @return string[]
     */
    public function getDrmApplications()
    {
        return $this->container['drm_applications'];
    }

    /**
     * Sets drm_applications
     *
     * @param string[] $drm_applications drm_applications
     *
     * @return $this
     */
    public function setDrmApplications($drm_applications)
    {
        $this->container['drm_applications'] = $drm_applications;

        return $this;
    }

    /**
     * Gets java_vm_version
     *
     * @return string
     */
    public function getJavaVmVersion()
    {
        return $this->container['java_vm_version'];
    }

    /**
     * Sets java_vm_version
     *
     * @param string $java_vm_version java_vm_version
     *
     * @return $this
     */
    public function setJavaVmVersion($java_vm_version)
    {
        $this->container['java_vm_version'] = $java_vm_version;

        return $this;
    }

    /**
     * Gets transcoder_licenses
     *
     * @return int
     */
    public function getTranscoderLicenses()
    {
        return $this->container['transcoder_licenses'];
    }

    /**
     * Sets transcoder_licenses
     *
     * @param int $transcoder_licenses transcoder_licenses
     *
     * @return $this
     */
    public function setTranscoderLicenses($transcoder_licenses)
    {
        $this->container['transcoder_licenses'] = $transcoder_licenses;

        return $this;
    }

    /**
     * Gets time_running
     *
     * @return double
     */
    public function getTimeRunning()
    {
        return $this->container['time_running'];
    }

    /**
     * Sets time_running
     *
     * @param double $time_running time_running
     *
     * @return $this
     */
    public function setTimeRunning($time_running)
    {
        $this->container['time_running'] = $time_running;

        return $this;
    }

    /**
     * Gets license_type
     *
     * @return string
     */
    public function getLicenseType()
    {
        return $this->container['license_type'];
    }

    /**
     * Sets license_type
     *
     * @param string $license_type license_type
     *
     * @return $this
     */
    public function setLicenseType($license_type)
    {
        $this->container['license_type'] = $license_type;

        return $this;
    }

    /**
     * Gets os_bitness
     *
     * @return string
     */
    public function getOsBitness()
    {
        return $this->container['os_bitness'];
    }

    /**
     * Sets os_bitness
     *
     * @param string $os_bitness os_bitness
     *
     * @return $this
     */
    public function setOsBitness($os_bitness)
    {
        $this->container['os_bitness'] = $os_bitness;

        return $this;
    }

    /**
     * Gets dvr_applications
     *
     * @return string[]
     */
    public function getDvrApplications()
    {
        return $this->container['dvr_applications'];
    }

    /**
     * Sets dvr_applications
     *
     * @param string[] $dvr_applications dvr_applications
     *
     * @return $this
     */
    public function setDvrApplications($dvr_applications)
    {
        $this->container['dvr_applications'] = $dvr_applications;

        return $this;
    }

    /**
     * Gets os_version
     *
     * @return string
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version
     *
     * @param string $os_version os_version
     *
     * @return $this
     */
    public function setOsVersion($os_version)
    {
        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets server_build
     *
     * @return string
     */
    public function getServerBuild()
    {
        return $this->container['server_build'];
    }

    /**
     * Sets server_build
     *
     * @param string $server_build server_build
     *
     * @return $this
     */
    public function setServerBuild($server_build)
    {
        $this->container['server_build'] = $server_build;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets java_name
     *
     * @return string
     */
    public function getJavaName()
    {
        return $this->container['java_name'];
    }

    /**
     * Sets java_name
     *
     * @param string $java_name java_name
     *
     * @return $this
     */
    public function setJavaName($java_name)
    {
        $this->container['java_name'] = $java_name;

        return $this;
    }

    /**
     * Gets max_connections
     *
     * @return int
     */
    public function getMaxConnections()
    {
        return $this->container['max_connections'];
    }

    /**
     * Sets max_connections
     *
     * @param int $max_connections max_connections
     *
     * @return $this
     */
    public function setMaxConnections($max_connections)
    {
        $this->container['max_connections'] = $max_connections;

        return $this;
    }

    /**
     * Gets dvr_licensed
     *
     * @return bool
     */
    public function getDvrLicensed()
    {
        return $this->container['dvr_licensed'];
    }

    /**
     * Sets dvr_licensed
     *
     * @param bool $dvr_licensed dvr_licensed
     *
     * @return $this
     */
    public function setDvrLicensed($dvr_licensed)
    {
        $this->container['dvr_licensed'] = $dvr_licensed;

        return $this;
    }

    /**
     * Gets server_mode
     *
     * @return string
     */
    public function getServerMode()
    {
        return $this->container['server_mode'];
    }

    /**
     * Sets server_mode
     *
     * @param string $server_mode server_mode
     *
     * @return $this
     */
    public function setServerMode($server_mode)
    {
        $this->container['server_mode'] = $server_mode;

        return $this;
    }

    /**
     * Gets java_bitness
     *
     * @return string
     */
    public function getJavaBitness()
    {
        return $this->container['java_bitness'];
    }

    /**
     * Sets java_bitness
     *
     * @param string $java_bitness java_bitness
     *
     * @return $this
     */
    public function setJavaBitness($java_bitness)
    {
        $this->container['java_bitness'] = $java_bitness;

        return $this;
    }

    /**
     * Gets current_connections
     *
     * @return int
     */
    public function getCurrentConnections()
    {
        return $this->container['current_connections'];
    }

    /**
     * Sets current_connections
     *
     * @param int $current_connections current_connections
     *
     * @return $this
     */
    public function setCurrentConnections($current_connections)
    {
        $this->container['current_connections'] = $current_connections;

        return $this;
    }

    /**
     * Gets drm_licensed
     *
     * @return bool
     */
    public function getDrmLicensed()
    {
        return $this->container['drm_licensed'];
    }

    /**
     * Sets drm_licensed
     *
     * @param bool $drm_licensed drm_licensed
     *
     * @return $this
     */
    public function setDrmLicensed($drm_licensed)
    {
        $this->container['drm_licensed'] = $drm_licensed;

        return $this;
    }

    /**
     * Gets java_vendor
     *
     * @return string
     */
    public function getJavaVendor()
    {
        return $this->container['java_vendor'];
    }

    /**
     * Sets java_vendor
     *
     * @param string $java_vendor java_vendor
     *
     * @return $this
     */
    public function setJavaVendor($java_vendor)
    {
        $this->container['java_vendor'] = $java_vendor;

        return $this;
    }

    /**
     * Gets os_name
     *
     * @return string
     */
    public function getOsName()
    {
        return $this->container['os_name'];
    }

    /**
     * Sets os_name
     *
     * @param string $os_name os_name
     *
     * @return $this
     */
    public function setOsName($os_name)
    {
        $this->container['os_name'] = $os_name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets transcoder_applications
     *
     * @return string[]
     */
    public function getTranscoderApplications()
    {
        return $this->container['transcoder_applications'];
    }

    /**
     * Sets transcoder_applications
     *
     * @param string[] $transcoder_applications transcoder_applications
     *
     * @return $this
     */
    public function setTranscoderApplications($transcoder_applications)
    {
        $this->container['transcoder_applications'] = $transcoder_applications;

        return $this;
    }

    /**
     * Gets transcoder_available
     *
     * @return bool
     */
    public function getTranscoderAvailable()
    {
        return $this->container['transcoder_available'];
    }

    /**
     * Sets transcoder_available
     *
     * @param bool $transcoder_available transcoder_available
     *
     * @return $this
     */
    public function setTranscoderAvailable($transcoder_available)
    {
        $this->container['transcoder_available'] = $transcoder_available;

        return $this;
    }

    /**
     * Gets java_home
     *
     * @return string
     */
    public function getJavaHome()
    {
        return $this->container['java_home'];
    }

    /**
     * Sets java_home
     *
     * @param string $java_home java_home
     *
     * @return $this
     */
    public function setJavaHome($java_home)
    {
        $this->container['java_home'] = $java_home;

        return $this;
    }

    /**
     * Gets max_ıncomming_streams
     *
     * @return int
     */
    public function getMaxIncommingStreams()
    {
        return $this->container['max_ıncomming_streams'];
    }

    /**
     * Sets max_ıncomming_streams
     *
     * @param int $max_ıncomming_streams max_ıncomming_streams
     *
     * @return $this
     */
    public function setMaxIncommingStreams($max_ıncomming_streams)
    {
        $this->container['max_ıncomming_streams'] = $max_ıncomming_streams;

        return $this;
    }

    /**
     * Gets total_memory
     *
     * @return int
     */
    public function getTotalMemory()
    {
        return $this->container['total_memory'];
    }

    /**
     * Sets total_memory
     *
     * @param int $total_memory total_memory
     *
     * @return $this
     */
    public function setTotalMemory($total_memory)
    {
        $this->container['total_memory'] = $total_memory;

        return $this;
    }

    /**
     * Gets available_memory
     *
     * @return int
     */
    public function getAvailableMemory()
    {
        return $this->container['available_memory'];
    }

    /**
     * Sets available_memory
     *
     * @param int $available_memory available_memory
     *
     * @return $this
     */
    public function setAvailableMemory($available_memory)
    {
        $this->container['available_memory'] = $available_memory;

        return $this;
    }

    /**
     * Gets native_base
     *
     * @return string
     */
    public function getNativeBase()
    {
        return $this->container['native_base'];
    }

    /**
     * Sets native_base
     *
     * @param string $native_base native_base
     *
     * @return $this
     */
    public function setNativeBase($native_base)
    {
        $this->container['native_base'] = $native_base;

        return $this;
    }

    /**
     * Gets dvr_ın_use
     *
     * @return bool
     */
    public function getDvrInUse()
    {
        return $this->container['dvr_ın_use'];
    }

    /**
     * Sets dvr_ın_use
     *
     * @param bool $dvr_ın_use dvr_ın_use
     *
     * @return $this
     */
    public function setDvrInUse($dvr_ın_use)
    {
        $this->container['dvr_ın_use'] = $dvr_ın_use;

        return $this;
    }

    /**
     * Gets drm_ın_use
     *
     * @return bool
     */
    public function getDrmInUse()
    {
        return $this->container['drm_ın_use'];
    }

    /**
     * Sets drm_ın_use
     *
     * @param bool $drm_ın_use drm_ın_use
     *
     * @return $this
     */
    public function setDrmInUse($drm_ın_use)
    {
        $this->container['drm_ın_use'] = $drm_ın_use;

        return $this;
    }

    /**
     * Gets license_expire_date
     *
     * @return string
     */
    public function getLicenseExpireDate()
    {
        return $this->container['license_expire_date'];
    }

    /**
     * Sets license_expire_date
     *
     * @param string $license_expire_date license_expire_date
     *
     * @return $this
     */
    public function setLicenseExpireDate($license_expire_date)
    {
        $this->container['license_expire_date'] = $license_expire_date;

        return $this;
    }

    /**
     * Gets processor_cores
     *
     * @return int
     */
    public function getProcessorCores()
    {
        return $this->container['processor_cores'];
    }

    /**
     * Sets processor_cores
     *
     * @param int $processor_cores processor_cores
     *
     * @return $this
     */
    public function setProcessorCores($processor_cores)
    {
        $this->container['processor_cores'] = $processor_cores;

        return $this;
    }

    /**
     * Gets rest_apı_available
     *
     * @return bool
     */
    public function getRestApıAvailable()
    {
        return $this->container['rest_apı_available'];
    }

    /**
     * Sets rest_apı_available
     *
     * @param bool $rest_apı_available rest_apı_available
     *
     * @return $this
     */
    public function setRestApıAvailable($rest_apı_available)
    {
        $this->container['rest_apı_available'] = $rest_apı_available;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


