<?php
/**
 * CurrentMachineStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CurrentMachineStatistics Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CurrentMachineStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CurrentMachineStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'heap_used' => '\Swagger\Client\Model\Long',
        'cpu_system' => '\Swagger\Client\Model\Integer',
        'connection_count' => '\Swagger\Client\Model\Long',
        'memory_free' => '\Swagger\Client\Model\Long',
        'cpu_ıdle' => '\Swagger\Client\Model\Integer',
        'server_name' => 'string',
        'memory_used' => '\Swagger\Client\Model\Long',
        'version' => 'string',
        'disk_free' => '\Swagger\Client\Model\Long',
        'cpu_user' => '\Swagger\Client\Model\Integer',
        'disk_used' => '\Swagger\Client\Model\Long',
        'heap_free' => '\Swagger\Client\Model\Long',
        'server_uptime' => 'int',
        'save_field_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'heap_used' => null,
        'cpu_system' => null,
        'connection_count' => null,
        'memory_free' => null,
        'cpu_ıdle' => null,
        'server_name' => null,
        'memory_used' => null,
        'version' => null,
        'disk_free' => null,
        'cpu_user' => null,
        'disk_used' => null,
        'heap_free' => null,
        'server_uptime' => 'int64',
        'save_field_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'heap_used' => 'heapUsed',
        'cpu_system' => 'cpuSystem',
        'connection_count' => 'connectionCount',
        'memory_free' => 'memoryFree',
        'cpu_ıdle' => 'cpuIdle',
        'server_name' => 'serverName',
        'memory_used' => 'memoryUsed',
        'version' => 'version',
        'disk_free' => 'diskFree',
        'cpu_user' => 'cpuUser',
        'disk_used' => 'diskUsed',
        'heap_free' => 'heapFree',
        'server_uptime' => 'serverUptime',
        'save_field_list' => 'saveFieldList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'heap_used' => 'setHeapUsed',
        'cpu_system' => 'setCpuSystem',
        'connection_count' => 'setConnectionCount',
        'memory_free' => 'setMemoryFree',
        'cpu_ıdle' => 'setCpuIdle',
        'server_name' => 'setServerName',
        'memory_used' => 'setMemoryUsed',
        'version' => 'setVersion',
        'disk_free' => 'setDiskFree',
        'cpu_user' => 'setCpuUser',
        'disk_used' => 'setDiskUsed',
        'heap_free' => 'setHeapFree',
        'server_uptime' => 'setServerUptime',
        'save_field_list' => 'setSaveFieldList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'heap_used' => 'getHeapUsed',
        'cpu_system' => 'getCpuSystem',
        'connection_count' => 'getConnectionCount',
        'memory_free' => 'getMemoryFree',
        'cpu_ıdle' => 'getCpuIdle',
        'server_name' => 'getServerName',
        'memory_used' => 'getMemoryUsed',
        'version' => 'getVersion',
        'disk_free' => 'getDiskFree',
        'cpu_user' => 'getCpuUser',
        'disk_used' => 'getDiskUsed',
        'heap_free' => 'getHeapFree',
        'server_uptime' => 'getServerUptime',
        'save_field_list' => 'getSaveFieldList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['heap_used'] = isset($data['heap_used']) ? $data['heap_used'] : null;
        $this->container['cpu_system'] = isset($data['cpu_system']) ? $data['cpu_system'] : null;
        $this->container['connection_count'] = isset($data['connection_count']) ? $data['connection_count'] : null;
        $this->container['memory_free'] = isset($data['memory_free']) ? $data['memory_free'] : null;
        $this->container['cpu_ıdle'] = isset($data['cpu_ıdle']) ? $data['cpu_ıdle'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['memory_used'] = isset($data['memory_used']) ? $data['memory_used'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['disk_free'] = isset($data['disk_free']) ? $data['disk_free'] : null;
        $this->container['cpu_user'] = isset($data['cpu_user']) ? $data['cpu_user'] : null;
        $this->container['disk_used'] = isset($data['disk_used']) ? $data['disk_used'] : null;
        $this->container['heap_free'] = isset($data['heap_free']) ? $data['heap_free'] : null;
        $this->container['server_uptime'] = isset($data['server_uptime']) ? $data['server_uptime'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['heap_used'] === null) {
            $invalidProperties[] = "'heap_used' can't be null";
        }
        if ($this->container['cpu_system'] === null) {
            $invalidProperties[] = "'cpu_system' can't be null";
        }
        if ($this->container['connection_count'] === null) {
            $invalidProperties[] = "'connection_count' can't be null";
        }
        if ($this->container['memory_free'] === null) {
            $invalidProperties[] = "'memory_free' can't be null";
        }
        if ($this->container['cpu_ıdle'] === null) {
            $invalidProperties[] = "'cpu_ıdle' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['memory_used'] === null) {
            $invalidProperties[] = "'memory_used' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['disk_free'] === null) {
            $invalidProperties[] = "'disk_free' can't be null";
        }
        if ($this->container['cpu_user'] === null) {
            $invalidProperties[] = "'cpu_user' can't be null";
        }
        if ($this->container['disk_used'] === null) {
            $invalidProperties[] = "'disk_used' can't be null";
        }
        if ($this->container['heap_free'] === null) {
            $invalidProperties[] = "'heap_free' can't be null";
        }
        if ($this->container['server_uptime'] === null) {
            $invalidProperties[] = "'server_uptime' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets heap_used
     *
     * @return \Swagger\Client\Model\Long
     */
    public function getHeapUsed()
    {
        return $this->container['heap_used'];
    }

    /**
     * Sets heap_used
     *
     * @param \Swagger\Client\Model\Long $heap_used heap_used
     *
     * @return $this
     */
    public function setHeapUsed($heap_used)
    {
        $this->container['heap_used'] = $heap_used;

        return $this;
    }

    /**
     * Gets cpu_system
     *
     * @return \Swagger\Client\Model\Integer
     */
    public function getCpuSystem()
    {
        return $this->container['cpu_system'];
    }

    /**
     * Sets cpu_system
     *
     * @param \Swagger\Client\Model\Integer $cpu_system cpu_system
     *
     * @return $this
     */
    public function setCpuSystem($cpu_system)
    {
        $this->container['cpu_system'] = $cpu_system;

        return $this;
    }

    /**
     * Gets connection_count
     *
     * @return \Swagger\Client\Model\Long
     */
    public function getConnectionCount()
    {
        return $this->container['connection_count'];
    }

    /**
     * Sets connection_count
     *
     * @param \Swagger\Client\Model\Long $connection_count connection_count
     *
     * @return $this
     */
    public function setConnectionCount($connection_count)
    {
        $this->container['connection_count'] = $connection_count;

        return $this;
    }

    /**
     * Gets memory_free
     *
     * @return \Swagger\Client\Model\Long
     */
    public function getMemoryFree()
    {
        return $this->container['memory_free'];
    }

    /**
     * Sets memory_free
     *
     * @param \Swagger\Client\Model\Long $memory_free memory_free
     *
     * @return $this
     */
    public function setMemoryFree($memory_free)
    {
        $this->container['memory_free'] = $memory_free;

        return $this;
    }

    /**
     * Gets cpu_ıdle
     *
     * @return \Swagger\Client\Model\Integer
     */
    public function getCpuIdle()
    {
        return $this->container['cpu_ıdle'];
    }

    /**
     * Sets cpu_ıdle
     *
     * @param \Swagger\Client\Model\Integer $cpu_ıdle cpu_ıdle
     *
     * @return $this
     */
    public function setCpuIdle($cpu_ıdle)
    {
        $this->container['cpu_ıdle'] = $cpu_ıdle;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets memory_used
     *
     * @return \Swagger\Client\Model\Long
     */
    public function getMemoryUsed()
    {
        return $this->container['memory_used'];
    }

    /**
     * Sets memory_used
     *
     * @param \Swagger\Client\Model\Long $memory_used memory_used
     *
     * @return $this
     */
    public function setMemoryUsed($memory_used)
    {
        $this->container['memory_used'] = $memory_used;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets disk_free
     *
     * @return \Swagger\Client\Model\Long
     */
    public function getDiskFree()
    {
        return $this->container['disk_free'];
    }

    /**
     * Sets disk_free
     *
     * @param \Swagger\Client\Model\Long $disk_free disk_free
     *
     * @return $this
     */
    public function setDiskFree($disk_free)
    {
        $this->container['disk_free'] = $disk_free;

        return $this;
    }

    /**
     * Gets cpu_user
     *
     * @return \Swagger\Client\Model\Integer
     */
    public function getCpuUser()
    {
        return $this->container['cpu_user'];
    }

    /**
     * Sets cpu_user
     *
     * @param \Swagger\Client\Model\Integer $cpu_user cpu_user
     *
     * @return $this
     */
    public function setCpuUser($cpu_user)
    {
        $this->container['cpu_user'] = $cpu_user;

        return $this;
    }

    /**
     * Gets disk_used
     *
     * @return \Swagger\Client\Model\Long
     */
    public function getDiskUsed()
    {
        return $this->container['disk_used'];
    }

    /**
     * Sets disk_used
     *
     * @param \Swagger\Client\Model\Long $disk_used disk_used
     *
     * @return $this
     */
    public function setDiskUsed($disk_used)
    {
        $this->container['disk_used'] = $disk_used;

        return $this;
    }

    /**
     * Gets heap_free
     *
     * @return \Swagger\Client\Model\Long
     */
    public function getHeapFree()
    {
        return $this->container['heap_free'];
    }

    /**
     * Sets heap_free
     *
     * @param \Swagger\Client\Model\Long $heap_free heap_free
     *
     * @return $this
     */
    public function setHeapFree($heap_free)
    {
        $this->container['heap_free'] = $heap_free;

        return $this;
    }

    /**
     * Gets server_uptime
     *
     * @return int
     */
    public function getServerUptime()
    {
        return $this->container['server_uptime'];
    }

    /**
     * Sets server_uptime
     *
     * @param int $server_uptime server_uptime
     *
     * @return $this
     */
    public function setServerUptime($server_uptime)
    {
        $this->container['server_uptime'] = $server_uptime;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


