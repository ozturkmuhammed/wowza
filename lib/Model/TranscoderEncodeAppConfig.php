<?php
/**
 * TranscoderEncodeAppConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TranscoderEncodeAppConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TranscoderEncodeAppConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TranscoderEncodeAppConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'follow_source' => 'bool',
        'implementation' => 'string',
        'gpuid' => 'int',
        'profile' => 'string',
        'server_name' => 'string',
        'description' => 'string',
        'audio_codec' => 'string',
        'version' => 'string',
        'stream_name' => 'string',
        'overlays' => '\Swagger\Client\Model\TranscoderOverlayEncodeConfig[]',
        'audio_bitrate' => 'string',
        'video_bitrate' => 'string',
        'enable' => 'bool',
        'name' => 'string',
        'width' => 'int',
        'interval' => 'int',
        'fit_mode' => 'string',
        'save_field_list' => 'string[]',
        'crop' => 'string',
        'video_codec' => 'string',
        'height' => 'int',
        'source_rectangle' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'follow_source' => null,
        'implementation' => null,
        'gpuid' => 'int32',
        'profile' => null,
        'server_name' => null,
        'description' => null,
        'audio_codec' => null,
        'version' => null,
        'stream_name' => null,
        'overlays' => null,
        'audio_bitrate' => null,
        'video_bitrate' => null,
        'enable' => null,
        'name' => null,
        'width' => 'int32',
        'interval' => 'int32',
        'fit_mode' => null,
        'save_field_list' => null,
        'crop' => null,
        'video_codec' => null,
        'height' => 'int32',
        'source_rectangle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'follow_source' => 'followSource',
        'implementation' => 'implementation',
        'gpuid' => 'gpuid',
        'profile' => 'profile',
        'server_name' => 'serverName',
        'description' => 'description',
        'audio_codec' => 'audioCodec',
        'version' => 'version',
        'stream_name' => 'streamName',
        'overlays' => 'Overlays',
        'audio_bitrate' => 'audioBitrate',
        'video_bitrate' => 'videoBitrate',
        'enable' => 'enable',
        'name' => 'name',
        'width' => 'width',
        'interval' => 'interval',
        'fit_mode' => 'fitMode',
        'save_field_list' => 'saveFieldList',
        'crop' => 'crop',
        'video_codec' => 'videoCodec',
        'height' => 'height',
        'source_rectangle' => 'sourceRectangle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'follow_source' => 'setFollowSource',
        'implementation' => 'setImplementation',
        'gpuid' => 'setGpuid',
        'profile' => 'setProfile',
        'server_name' => 'setServerName',
        'description' => 'setDescription',
        'audio_codec' => 'setAudioCodec',
        'version' => 'setVersion',
        'stream_name' => 'setStreamName',
        'overlays' => 'setOverlays',
        'audio_bitrate' => 'setAudioBitrate',
        'video_bitrate' => 'setVideoBitrate',
        'enable' => 'setEnable',
        'name' => 'setName',
        'width' => 'setWidth',
        'interval' => 'setInterval',
        'fit_mode' => 'setFitMode',
        'save_field_list' => 'setSaveFieldList',
        'crop' => 'setCrop',
        'video_codec' => 'setVideoCodec',
        'height' => 'setHeight',
        'source_rectangle' => 'setSourceRectangle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'follow_source' => 'getFollowSource',
        'implementation' => 'getImplementation',
        'gpuid' => 'getGpuid',
        'profile' => 'getProfile',
        'server_name' => 'getServerName',
        'description' => 'getDescription',
        'audio_codec' => 'getAudioCodec',
        'version' => 'getVersion',
        'stream_name' => 'getStreamName',
        'overlays' => 'getOverlays',
        'audio_bitrate' => 'getAudioBitrate',
        'video_bitrate' => 'getVideoBitrate',
        'enable' => 'getEnable',
        'name' => 'getName',
        'width' => 'getWidth',
        'interval' => 'getInterval',
        'fit_mode' => 'getFitMode',
        'save_field_list' => 'getSaveFieldList',
        'crop' => 'getCrop',
        'video_codec' => 'getVideoCodec',
        'height' => 'getHeight',
        'source_rectangle' => 'getSourceRectangle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['follow_source'] = isset($data['follow_source']) ? $data['follow_source'] : null;
        $this->container['implementation'] = isset($data['implementation']) ? $data['implementation'] : null;
        $this->container['gpuid'] = isset($data['gpuid']) ? $data['gpuid'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['audio_codec'] = isset($data['audio_codec']) ? $data['audio_codec'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['stream_name'] = isset($data['stream_name']) ? $data['stream_name'] : null;
        $this->container['overlays'] = isset($data['overlays']) ? $data['overlays'] : null;
        $this->container['audio_bitrate'] = isset($data['audio_bitrate']) ? $data['audio_bitrate'] : null;
        $this->container['video_bitrate'] = isset($data['video_bitrate']) ? $data['video_bitrate'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['fit_mode'] = isset($data['fit_mode']) ? $data['fit_mode'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['crop'] = isset($data['crop']) ? $data['crop'] : null;
        $this->container['video_codec'] = isset($data['video_codec']) ? $data['video_codec'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['source_rectangle'] = isset($data['source_rectangle']) ? $data['source_rectangle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['follow_source'] === null) {
            $invalidProperties[] = "'follow_source' can't be null";
        }
        if ($this->container['implementation'] === null) {
            $invalidProperties[] = "'implementation' can't be null";
        }
        if ($this->container['gpuid'] === null) {
            $invalidProperties[] = "'gpuid' can't be null";
        }
        if ($this->container['profile'] === null) {
            $invalidProperties[] = "'profile' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['audio_codec'] === null) {
            $invalidProperties[] = "'audio_codec' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['stream_name'] === null) {
            $invalidProperties[] = "'stream_name' can't be null";
        }
        if ($this->container['overlays'] === null) {
            $invalidProperties[] = "'overlays' can't be null";
        }
        if ($this->container['audio_bitrate'] === null) {
            $invalidProperties[] = "'audio_bitrate' can't be null";
        }
        if ($this->container['video_bitrate'] === null) {
            $invalidProperties[] = "'video_bitrate' can't be null";
        }
        if ($this->container['enable'] === null) {
            $invalidProperties[] = "'enable' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['width'] === null) {
            $invalidProperties[] = "'width' can't be null";
        }
        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        if ($this->container['fit_mode'] === null) {
            $invalidProperties[] = "'fit_mode' can't be null";
        }
        if ($this->container['crop'] === null) {
            $invalidProperties[] = "'crop' can't be null";
        }
        if ($this->container['video_codec'] === null) {
            $invalidProperties[] = "'video_codec' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['source_rectangle'] === null) {
            $invalidProperties[] = "'source_rectangle' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets follow_source
     *
     * @return bool
     */
    public function getFollowSource()
    {
        return $this->container['follow_source'];
    }

    /**
     * Sets follow_source
     *
     * @param bool $follow_source follow_source
     *
     * @return $this
     */
    public function setFollowSource($follow_source)
    {
        $this->container['follow_source'] = $follow_source;

        return $this;
    }

    /**
     * Gets implementation
     *
     * @return string
     */
    public function getImplementation()
    {
        return $this->container['implementation'];
    }

    /**
     * Sets implementation
     *
     * @param string $implementation implementation
     *
     * @return $this
     */
    public function setImplementation($implementation)
    {
        $this->container['implementation'] = $implementation;

        return $this;
    }

    /**
     * Gets gpuid
     *
     * @return int
     */
    public function getGpuid()
    {
        return $this->container['gpuid'];
    }

    /**
     * Sets gpuid
     *
     * @param int $gpuid gpuid
     *
     * @return $this
     */
    public function setGpuid($gpuid)
    {
        $this->container['gpuid'] = $gpuid;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return string
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param string $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets audio_codec
     *
     * @return string
     */
    public function getAudioCodec()
    {
        return $this->container['audio_codec'];
    }

    /**
     * Sets audio_codec
     *
     * @param string $audio_codec audio_codec
     *
     * @return $this
     */
    public function setAudioCodec($audio_codec)
    {
        $this->container['audio_codec'] = $audio_codec;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets stream_name
     *
     * @return string
     */
    public function getStreamName()
    {
        return $this->container['stream_name'];
    }

    /**
     * Sets stream_name
     *
     * @param string $stream_name stream_name
     *
     * @return $this
     */
    public function setStreamName($stream_name)
    {
        $this->container['stream_name'] = $stream_name;

        return $this;
    }

    /**
     * Gets overlays
     *
     * @return \Swagger\Client\Model\TranscoderOverlayEncodeConfig[]
     */
    public function getOverlays()
    {
        return $this->container['overlays'];
    }

    /**
     * Sets overlays
     *
     * @param \Swagger\Client\Model\TranscoderOverlayEncodeConfig[] $overlays overlays
     *
     * @return $this
     */
    public function setOverlays($overlays)
    {
        $this->container['overlays'] = $overlays;

        return $this;
    }

    /**
     * Gets audio_bitrate
     *
     * @return string
     */
    public function getAudioBitrate()
    {
        return $this->container['audio_bitrate'];
    }

    /**
     * Sets audio_bitrate
     *
     * @param string $audio_bitrate audio_bitrate
     *
     * @return $this
     */
    public function setAudioBitrate($audio_bitrate)
    {
        $this->container['audio_bitrate'] = $audio_bitrate;

        return $this;
    }

    /**
     * Gets video_bitrate
     *
     * @return string
     */
    public function getVideoBitrate()
    {
        return $this->container['video_bitrate'];
    }

    /**
     * Sets video_bitrate
     *
     * @param string $video_bitrate video_bitrate
     *
     * @return $this
     */
    public function setVideoBitrate($video_bitrate)
    {
        $this->container['video_bitrate'] = $video_bitrate;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool $enable enable
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets fit_mode
     *
     * @return string
     */
    public function getFitMode()
    {
        return $this->container['fit_mode'];
    }

    /**
     * Sets fit_mode
     *
     * @param string $fit_mode fit_mode
     *
     * @return $this
     */
    public function setFitMode($fit_mode)
    {
        $this->container['fit_mode'] = $fit_mode;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets crop
     *
     * @return string
     */
    public function getCrop()
    {
        return $this->container['crop'];
    }

    /**
     * Sets crop
     *
     * @param string $crop crop
     *
     * @return $this
     */
    public function setCrop($crop)
    {
        $this->container['crop'] = $crop;

        return $this;
    }

    /**
     * Gets video_codec
     *
     * @return string
     */
    public function getVideoCodec()
    {
        return $this->container['video_codec'];
    }

    /**
     * Sets video_codec
     *
     * @param string $video_codec video_codec
     *
     * @return $this
     */
    public function setVideoCodec($video_codec)
    {
        $this->container['video_codec'] = $video_codec;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets source_rectangle
     *
     * @return string
     */
    public function getSourceRectangle()
    {
        return $this->container['source_rectangle'];
    }

    /**
     * Sets source_rectangle
     *
     * @param string $source_rectangle source_rectangle
     *
     * @return $this
     */
    public function setSourceRectangle($source_rectangle)
    {
        $this->container['source_rectangle'] = $source_rectangle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


