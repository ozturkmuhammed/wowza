<?php
/**
 * DefaultStreamRecorderConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultStreamRecorderConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultStreamRecorderConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DefaultStreamRecorderConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time_scale' => 'int',
        'instance_name' => 'string',
        'file_version_delegate_name' => 'string',
        'server_name' => 'string',
        'recorder_name' => 'string',
        'current_size' => 'int',
        'segment_schedule' => 'string',
        'start_on_key_frame' => 'bool',
        'output_path' => 'string',
        'current_file' => 'string',
        'save_field_list' => 'string[]',
        'default_audio_search_position' => 'bool',
        'record_data' => 'bool',
        'application_name' => 'string',
        'move_first_video_frame_to_zero' => 'bool',
        'recorder_error_string' => 'string',
        'segment_size' => 'int',
        'default_recorder' => 'bool',
        'split_on_tc_discontinuity' => 'bool',
        'version' => 'string',
        'skip_key_frame_until_audio_timeout' => 'int',
        'base_file' => 'string',
        'segment_duration' => 'int',
        'recording_start_time' => 'string',
        'file_template' => 'string',
        'back_buffer_time' => 'int',
        'segmentation_type' => 'string',
        'current_duration' => 'int',
        'file_format' => 'string',
        'recorder_state' => 'string',
        'option' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'time_scale' => 'int64',
        'instance_name' => null,
        'file_version_delegate_name' => null,
        'server_name' => null,
        'recorder_name' => null,
        'current_size' => 'int64',
        'segment_schedule' => null,
        'start_on_key_frame' => null,
        'output_path' => null,
        'current_file' => null,
        'save_field_list' => null,
        'default_audio_search_position' => null,
        'record_data' => null,
        'application_name' => null,
        'move_first_video_frame_to_zero' => null,
        'recorder_error_string' => null,
        'segment_size' => 'int64',
        'default_recorder' => null,
        'split_on_tc_discontinuity' => null,
        'version' => null,
        'skip_key_frame_until_audio_timeout' => 'int32',
        'base_file' => null,
        'segment_duration' => 'int64',
        'recording_start_time' => null,
        'file_template' => null,
        'back_buffer_time' => 'int64',
        'segmentation_type' => null,
        'current_duration' => 'int64',
        'file_format' => null,
        'recorder_state' => null,
        'option' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_scale' => 'timeScale',
        'instance_name' => 'instanceName',
        'file_version_delegate_name' => 'fileVersionDelegateName',
        'server_name' => 'serverName',
        'recorder_name' => 'recorderName',
        'current_size' => 'currentSize',
        'segment_schedule' => 'segmentSchedule',
        'start_on_key_frame' => 'startOnKeyFrame',
        'output_path' => 'outputPath',
        'current_file' => 'currentFile',
        'save_field_list' => 'saveFieldList',
        'default_audio_search_position' => 'defaultAudioSearchPosition',
        'record_data' => 'recordData',
        'application_name' => 'applicationName',
        'move_first_video_frame_to_zero' => 'moveFirstVideoFrameToZero',
        'recorder_error_string' => 'recorderErrorString',
        'segment_size' => 'segmentSize',
        'default_recorder' => 'defaultRecorder',
        'split_on_tc_discontinuity' => 'splitOnTcDiscontinuity',
        'version' => 'version',
        'skip_key_frame_until_audio_timeout' => 'skipKeyFrameUntilAudioTimeout',
        'base_file' => 'baseFile',
        'segment_duration' => 'segmentDuration',
        'recording_start_time' => 'recordingStartTime',
        'file_template' => 'fileTemplate',
        'back_buffer_time' => 'backBufferTime',
        'segmentation_type' => 'segmentationType',
        'current_duration' => 'currentDuration',
        'file_format' => 'fileFormat',
        'recorder_state' => 'recorderState',
        'option' => 'option'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_scale' => 'setTimeScale',
        'instance_name' => 'setInstanceName',
        'file_version_delegate_name' => 'setFileVersionDelegateName',
        'server_name' => 'setServerName',
        'recorder_name' => 'setRecorderName',
        'current_size' => 'setCurrentSize',
        'segment_schedule' => 'setSegmentSchedule',
        'start_on_key_frame' => 'setStartOnKeyFrame',
        'output_path' => 'setOutputPath',
        'current_file' => 'setCurrentFile',
        'save_field_list' => 'setSaveFieldList',
        'default_audio_search_position' => 'setDefaultAudioSearchPosition',
        'record_data' => 'setRecordData',
        'application_name' => 'setApplicationName',
        'move_first_video_frame_to_zero' => 'setMoveFirstVideoFrameToZero',
        'recorder_error_string' => 'setRecorderErrorString',
        'segment_size' => 'setSegmentSize',
        'default_recorder' => 'setDefaultRecorder',
        'split_on_tc_discontinuity' => 'setSplitOnTcDiscontinuity',
        'version' => 'setVersion',
        'skip_key_frame_until_audio_timeout' => 'setSkipKeyFrameUntilAudioTimeout',
        'base_file' => 'setBaseFile',
        'segment_duration' => 'setSegmentDuration',
        'recording_start_time' => 'setRecordingStartTime',
        'file_template' => 'setFileTemplate',
        'back_buffer_time' => 'setBackBufferTime',
        'segmentation_type' => 'setSegmentationType',
        'current_duration' => 'setCurrentDuration',
        'file_format' => 'setFileFormat',
        'recorder_state' => 'setRecorderState',
        'option' => 'setOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_scale' => 'getTimeScale',
        'instance_name' => 'getInstanceName',
        'file_version_delegate_name' => 'getFileVersionDelegateName',
        'server_name' => 'getServerName',
        'recorder_name' => 'getRecorderName',
        'current_size' => 'getCurrentSize',
        'segment_schedule' => 'getSegmentSchedule',
        'start_on_key_frame' => 'getStartOnKeyFrame',
        'output_path' => 'getOutputPath',
        'current_file' => 'getCurrentFile',
        'save_field_list' => 'getSaveFieldList',
        'default_audio_search_position' => 'getDefaultAudioSearchPosition',
        'record_data' => 'getRecordData',
        'application_name' => 'getApplicationName',
        'move_first_video_frame_to_zero' => 'getMoveFirstVideoFrameToZero',
        'recorder_error_string' => 'getRecorderErrorString',
        'segment_size' => 'getSegmentSize',
        'default_recorder' => 'getDefaultRecorder',
        'split_on_tc_discontinuity' => 'getSplitOnTcDiscontinuity',
        'version' => 'getVersion',
        'skip_key_frame_until_audio_timeout' => 'getSkipKeyFrameUntilAudioTimeout',
        'base_file' => 'getBaseFile',
        'segment_duration' => 'getSegmentDuration',
        'recording_start_time' => 'getRecordingStartTime',
        'file_template' => 'getFileTemplate',
        'back_buffer_time' => 'getBackBufferTime',
        'segmentation_type' => 'getSegmentationType',
        'current_duration' => 'getCurrentDuration',
        'file_format' => 'getFileFormat',
        'recorder_state' => 'getRecorderState',
        'option' => 'getOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_scale'] = isset($data['time_scale']) ? $data['time_scale'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['file_version_delegate_name'] = isset($data['file_version_delegate_name']) ? $data['file_version_delegate_name'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['recorder_name'] = isset($data['recorder_name']) ? $data['recorder_name'] : null;
        $this->container['current_size'] = isset($data['current_size']) ? $data['current_size'] : null;
        $this->container['segment_schedule'] = isset($data['segment_schedule']) ? $data['segment_schedule'] : null;
        $this->container['start_on_key_frame'] = isset($data['start_on_key_frame']) ? $data['start_on_key_frame'] : null;
        $this->container['output_path'] = isset($data['output_path']) ? $data['output_path'] : null;
        $this->container['current_file'] = isset($data['current_file']) ? $data['current_file'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['default_audio_search_position'] = isset($data['default_audio_search_position']) ? $data['default_audio_search_position'] : null;
        $this->container['record_data'] = isset($data['record_data']) ? $data['record_data'] : null;
        $this->container['application_name'] = isset($data['application_name']) ? $data['application_name'] : null;
        $this->container['move_first_video_frame_to_zero'] = isset($data['move_first_video_frame_to_zero']) ? $data['move_first_video_frame_to_zero'] : null;
        $this->container['recorder_error_string'] = isset($data['recorder_error_string']) ? $data['recorder_error_string'] : null;
        $this->container['segment_size'] = isset($data['segment_size']) ? $data['segment_size'] : null;
        $this->container['default_recorder'] = isset($data['default_recorder']) ? $data['default_recorder'] : null;
        $this->container['split_on_tc_discontinuity'] = isset($data['split_on_tc_discontinuity']) ? $data['split_on_tc_discontinuity'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['skip_key_frame_until_audio_timeout'] = isset($data['skip_key_frame_until_audio_timeout']) ? $data['skip_key_frame_until_audio_timeout'] : null;
        $this->container['base_file'] = isset($data['base_file']) ? $data['base_file'] : null;
        $this->container['segment_duration'] = isset($data['segment_duration']) ? $data['segment_duration'] : null;
        $this->container['recording_start_time'] = isset($data['recording_start_time']) ? $data['recording_start_time'] : null;
        $this->container['file_template'] = isset($data['file_template']) ? $data['file_template'] : null;
        $this->container['back_buffer_time'] = isset($data['back_buffer_time']) ? $data['back_buffer_time'] : null;
        $this->container['segmentation_type'] = isset($data['segmentation_type']) ? $data['segmentation_type'] : null;
        $this->container['current_duration'] = isset($data['current_duration']) ? $data['current_duration'] : null;
        $this->container['file_format'] = isset($data['file_format']) ? $data['file_format'] : null;
        $this->container['recorder_state'] = isset($data['recorder_state']) ? $data['recorder_state'] : null;
        $this->container['option'] = isset($data['option']) ? $data['option'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['time_scale'] === null) {
            $invalidProperties[] = "'time_scale' can't be null";
        }
        if ($this->container['instance_name'] === null) {
            $invalidProperties[] = "'instance_name' can't be null";
        }
        if ($this->container['file_version_delegate_name'] === null) {
            $invalidProperties[] = "'file_version_delegate_name' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['recorder_name'] === null) {
            $invalidProperties[] = "'recorder_name' can't be null";
        }
        if ($this->container['current_size'] === null) {
            $invalidProperties[] = "'current_size' can't be null";
        }
        if ($this->container['segment_schedule'] === null) {
            $invalidProperties[] = "'segment_schedule' can't be null";
        }
        if ($this->container['start_on_key_frame'] === null) {
            $invalidProperties[] = "'start_on_key_frame' can't be null";
        }
        if ($this->container['output_path'] === null) {
            $invalidProperties[] = "'output_path' can't be null";
        }
        if ($this->container['current_file'] === null) {
            $invalidProperties[] = "'current_file' can't be null";
        }
        if ($this->container['default_audio_search_position'] === null) {
            $invalidProperties[] = "'default_audio_search_position' can't be null";
        }
        if ($this->container['record_data'] === null) {
            $invalidProperties[] = "'record_data' can't be null";
        }
        if ($this->container['application_name'] === null) {
            $invalidProperties[] = "'application_name' can't be null";
        }
        if ($this->container['move_first_video_frame_to_zero'] === null) {
            $invalidProperties[] = "'move_first_video_frame_to_zero' can't be null";
        }
        if ($this->container['recorder_error_string'] === null) {
            $invalidProperties[] = "'recorder_error_string' can't be null";
        }
        if ($this->container['segment_size'] === null) {
            $invalidProperties[] = "'segment_size' can't be null";
        }
        if ($this->container['default_recorder'] === null) {
            $invalidProperties[] = "'default_recorder' can't be null";
        }
        if ($this->container['split_on_tc_discontinuity'] === null) {
            $invalidProperties[] = "'split_on_tc_discontinuity' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['skip_key_frame_until_audio_timeout'] === null) {
            $invalidProperties[] = "'skip_key_frame_until_audio_timeout' can't be null";
        }
        if ($this->container['base_file'] === null) {
            $invalidProperties[] = "'base_file' can't be null";
        }
        if ($this->container['segment_duration'] === null) {
            $invalidProperties[] = "'segment_duration' can't be null";
        }
        if ($this->container['recording_start_time'] === null) {
            $invalidProperties[] = "'recording_start_time' can't be null";
        }
        if ($this->container['file_template'] === null) {
            $invalidProperties[] = "'file_template' can't be null";
        }
        if ($this->container['back_buffer_time'] === null) {
            $invalidProperties[] = "'back_buffer_time' can't be null";
        }
        if ($this->container['segmentation_type'] === null) {
            $invalidProperties[] = "'segmentation_type' can't be null";
        }
        if ($this->container['current_duration'] === null) {
            $invalidProperties[] = "'current_duration' can't be null";
        }
        if ($this->container['file_format'] === null) {
            $invalidProperties[] = "'file_format' can't be null";
        }
        if ($this->container['recorder_state'] === null) {
            $invalidProperties[] = "'recorder_state' can't be null";
        }
        if ($this->container['option'] === null) {
            $invalidProperties[] = "'option' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_scale
     *
     * @return int
     */
    public function getTimeScale()
    {
        return $this->container['time_scale'];
    }

    /**
     * Sets time_scale
     *
     * @param int $time_scale time_scale
     *
     * @return $this
     */
    public function setTimeScale($time_scale)
    {
        $this->container['time_scale'] = $time_scale;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets file_version_delegate_name
     *
     * @return string
     */
    public function getFileVersionDelegateName()
    {
        return $this->container['file_version_delegate_name'];
    }

    /**
     * Sets file_version_delegate_name
     *
     * @param string $file_version_delegate_name file_version_delegate_name
     *
     * @return $this
     */
    public function setFileVersionDelegateName($file_version_delegate_name)
    {
        $this->container['file_version_delegate_name'] = $file_version_delegate_name;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets recorder_name
     *
     * @return string
     */
    public function getRecorderName()
    {
        return $this->container['recorder_name'];
    }

    /**
     * Sets recorder_name
     *
     * @param string $recorder_name recorder_name
     *
     * @return $this
     */
    public function setRecorderName($recorder_name)
    {
        $this->container['recorder_name'] = $recorder_name;

        return $this;
    }

    /**
     * Gets current_size
     *
     * @return int
     */
    public function getCurrentSize()
    {
        return $this->container['current_size'];
    }

    /**
     * Sets current_size
     *
     * @param int $current_size current_size
     *
     * @return $this
     */
    public function setCurrentSize($current_size)
    {
        $this->container['current_size'] = $current_size;

        return $this;
    }

    /**
     * Gets segment_schedule
     *
     * @return string
     */
    public function getSegmentSchedule()
    {
        return $this->container['segment_schedule'];
    }

    /**
     * Sets segment_schedule
     *
     * @param string $segment_schedule segment_schedule
     *
     * @return $this
     */
    public function setSegmentSchedule($segment_schedule)
    {
        $this->container['segment_schedule'] = $segment_schedule;

        return $this;
    }

    /**
     * Gets start_on_key_frame
     *
     * @return bool
     */
    public function getStartOnKeyFrame()
    {
        return $this->container['start_on_key_frame'];
    }

    /**
     * Sets start_on_key_frame
     *
     * @param bool $start_on_key_frame start_on_key_frame
     *
     * @return $this
     */
    public function setStartOnKeyFrame($start_on_key_frame)
    {
        $this->container['start_on_key_frame'] = $start_on_key_frame;

        return $this;
    }

    /**
     * Gets output_path
     *
     * @return string
     */
    public function getOutputPath()
    {
        return $this->container['output_path'];
    }

    /**
     * Sets output_path
     *
     * @param string $output_path output_path
     *
     * @return $this
     */
    public function setOutputPath($output_path)
    {
        $this->container['output_path'] = $output_path;

        return $this;
    }

    /**
     * Gets current_file
     *
     * @return string
     */
    public function getCurrentFile()
    {
        return $this->container['current_file'];
    }

    /**
     * Sets current_file
     *
     * @param string $current_file current_file
     *
     * @return $this
     */
    public function setCurrentFile($current_file)
    {
        $this->container['current_file'] = $current_file;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets default_audio_search_position
     *
     * @return bool
     */
    public function getDefaultAudioSearchPosition()
    {
        return $this->container['default_audio_search_position'];
    }

    /**
     * Sets default_audio_search_position
     *
     * @param bool $default_audio_search_position default_audio_search_position
     *
     * @return $this
     */
    public function setDefaultAudioSearchPosition($default_audio_search_position)
    {
        $this->container['default_audio_search_position'] = $default_audio_search_position;

        return $this;
    }

    /**
     * Gets record_data
     *
     * @return bool
     */
    public function getRecordData()
    {
        return $this->container['record_data'];
    }

    /**
     * Sets record_data
     *
     * @param bool $record_data record_data
     *
     * @return $this
     */
    public function setRecordData($record_data)
    {
        $this->container['record_data'] = $record_data;

        return $this;
    }

    /**
     * Gets application_name
     *
     * @return string
     */
    public function getApplicationName()
    {
        return $this->container['application_name'];
    }

    /**
     * Sets application_name
     *
     * @param string $application_name application_name
     *
     * @return $this
     */
    public function setApplicationName($application_name)
    {
        $this->container['application_name'] = $application_name;

        return $this;
    }

    /**
     * Gets move_first_video_frame_to_zero
     *
     * @return bool
     */
    public function getMoveFirstVideoFrameToZero()
    {
        return $this->container['move_first_video_frame_to_zero'];
    }

    /**
     * Sets move_first_video_frame_to_zero
     *
     * @param bool $move_first_video_frame_to_zero move_first_video_frame_to_zero
     *
     * @return $this
     */
    public function setMoveFirstVideoFrameToZero($move_first_video_frame_to_zero)
    {
        $this->container['move_first_video_frame_to_zero'] = $move_first_video_frame_to_zero;

        return $this;
    }

    /**
     * Gets recorder_error_string
     *
     * @return string
     */
    public function getRecorderErrorString()
    {
        return $this->container['recorder_error_string'];
    }

    /**
     * Sets recorder_error_string
     *
     * @param string $recorder_error_string recorder_error_string
     *
     * @return $this
     */
    public function setRecorderErrorString($recorder_error_string)
    {
        $this->container['recorder_error_string'] = $recorder_error_string;

        return $this;
    }

    /**
     * Gets segment_size
     *
     * @return int
     */
    public function getSegmentSize()
    {
        return $this->container['segment_size'];
    }

    /**
     * Sets segment_size
     *
     * @param int $segment_size segment_size
     *
     * @return $this
     */
    public function setSegmentSize($segment_size)
    {
        $this->container['segment_size'] = $segment_size;

        return $this;
    }

    /**
     * Gets default_recorder
     *
     * @return bool
     */
    public function getDefaultRecorder()
    {
        return $this->container['default_recorder'];
    }

    /**
     * Sets default_recorder
     *
     * @param bool $default_recorder default_recorder
     *
     * @return $this
     */
    public function setDefaultRecorder($default_recorder)
    {
        $this->container['default_recorder'] = $default_recorder;

        return $this;
    }

    /**
     * Gets split_on_tc_discontinuity
     *
     * @return bool
     */
    public function getSplitOnTcDiscontinuity()
    {
        return $this->container['split_on_tc_discontinuity'];
    }

    /**
     * Sets split_on_tc_discontinuity
     *
     * @param bool $split_on_tc_discontinuity split_on_tc_discontinuity
     *
     * @return $this
     */
    public function setSplitOnTcDiscontinuity($split_on_tc_discontinuity)
    {
        $this->container['split_on_tc_discontinuity'] = $split_on_tc_discontinuity;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets skip_key_frame_until_audio_timeout
     *
     * @return int
     */
    public function getSkipKeyFrameUntilAudioTimeout()
    {
        return $this->container['skip_key_frame_until_audio_timeout'];
    }

    /**
     * Sets skip_key_frame_until_audio_timeout
     *
     * @param int $skip_key_frame_until_audio_timeout skip_key_frame_until_audio_timeout
     *
     * @return $this
     */
    public function setSkipKeyFrameUntilAudioTimeout($skip_key_frame_until_audio_timeout)
    {
        $this->container['skip_key_frame_until_audio_timeout'] = $skip_key_frame_until_audio_timeout;

        return $this;
    }

    /**
     * Gets base_file
     *
     * @return string
     */
    public function getBaseFile()
    {
        return $this->container['base_file'];
    }

    /**
     * Sets base_file
     *
     * @param string $base_file base_file
     *
     * @return $this
     */
    public function setBaseFile($base_file)
    {
        $this->container['base_file'] = $base_file;

        return $this;
    }

    /**
     * Gets segment_duration
     *
     * @return int
     */
    public function getSegmentDuration()
    {
        return $this->container['segment_duration'];
    }

    /**
     * Sets segment_duration
     *
     * @param int $segment_duration segment_duration
     *
     * @return $this
     */
    public function setSegmentDuration($segment_duration)
    {
        $this->container['segment_duration'] = $segment_duration;

        return $this;
    }

    /**
     * Gets recording_start_time
     *
     * @return string
     */
    public function getRecordingStartTime()
    {
        return $this->container['recording_start_time'];
    }

    /**
     * Sets recording_start_time
     *
     * @param string $recording_start_time recording_start_time
     *
     * @return $this
     */
    public function setRecordingStartTime($recording_start_time)
    {
        $this->container['recording_start_time'] = $recording_start_time;

        return $this;
    }

    /**
     * Gets file_template
     *
     * @return string
     */
    public function getFileTemplate()
    {
        return $this->container['file_template'];
    }

    /**
     * Sets file_template
     *
     * @param string $file_template file_template
     *
     * @return $this
     */
    public function setFileTemplate($file_template)
    {
        $this->container['file_template'] = $file_template;

        return $this;
    }

    /**
     * Gets back_buffer_time
     *
     * @return int
     */
    public function getBackBufferTime()
    {
        return $this->container['back_buffer_time'];
    }

    /**
     * Sets back_buffer_time
     *
     * @param int $back_buffer_time back_buffer_time
     *
     * @return $this
     */
    public function setBackBufferTime($back_buffer_time)
    {
        $this->container['back_buffer_time'] = $back_buffer_time;

        return $this;
    }

    /**
     * Gets segmentation_type
     *
     * @return string
     */
    public function getSegmentationType()
    {
        return $this->container['segmentation_type'];
    }

    /**
     * Sets segmentation_type
     *
     * @param string $segmentation_type segmentation_type
     *
     * @return $this
     */
    public function setSegmentationType($segmentation_type)
    {
        $this->container['segmentation_type'] = $segmentation_type;

        return $this;
    }

    /**
     * Gets current_duration
     *
     * @return int
     */
    public function getCurrentDuration()
    {
        return $this->container['current_duration'];
    }

    /**
     * Sets current_duration
     *
     * @param int $current_duration current_duration
     *
     * @return $this
     */
    public function setCurrentDuration($current_duration)
    {
        $this->container['current_duration'] = $current_duration;

        return $this;
    }

    /**
     * Gets file_format
     *
     * @return string
     */
    public function getFileFormat()
    {
        return $this->container['file_format'];
    }

    /**
     * Sets file_format
     *
     * @param string $file_format file_format
     *
     * @return $this
     */
    public function setFileFormat($file_format)
    {
        $this->container['file_format'] = $file_format;

        return $this;
    }

    /**
     * Gets recorder_state
     *
     * @return string
     */
    public function getRecorderState()
    {
        return $this->container['recorder_state'];
    }

    /**
     * Sets recorder_state
     *
     * @param string $recorder_state recorder_state
     *
     * @return $this
     */
    public function setRecorderState($recorder_state)
    {
        $this->container['recorder_state'] = $recorder_state;

        return $this;
    }

    /**
     * Gets option
     *
     * @return string
     */
    public function getOption()
    {
        return $this->container['option'];
    }

    /**
     * Sets option
     *
     * @param string $option option
     *
     * @return $this
     */
    public function setOption($option)
    {
        $this->container['option'] = $option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


