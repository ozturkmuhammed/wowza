<?php
/**
 * TranscoderTemplateConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TranscoderTemplateConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TranscoderTemplateConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TranscoderTemplateConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stream_name_groups' => '\Swagger\Client\Model\TranscoderStreamNameGroupConfig[]',
        'deinterlace' => 'bool',
        'implementation' => 'string',
        'overlays' => '\Swagger\Client\Model\TranscoderOverlayDecodeConfig[]',
        'name' => 'string',
        'server_name' => 'string',
        'description' => 'string',
        'save_field_list' => 'string[]',
        'encodes' => '\Swagger\Client\Model\TranscoderEncodeConfig[]',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stream_name_groups' => null,
        'deinterlace' => null,
        'implementation' => null,
        'overlays' => null,
        'name' => null,
        'server_name' => null,
        'description' => null,
        'save_field_list' => null,
        'encodes' => null,
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stream_name_groups' => 'streamNameGroups',
        'deinterlace' => 'deinterlace',
        'implementation' => 'implementation',
        'overlays' => 'overlays',
        'name' => 'name',
        'server_name' => 'serverName',
        'description' => 'description',
        'save_field_list' => 'saveFieldList',
        'encodes' => 'encodes',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stream_name_groups' => 'setStreamNameGroups',
        'deinterlace' => 'setDeinterlace',
        'implementation' => 'setImplementation',
        'overlays' => 'setOverlays',
        'name' => 'setName',
        'server_name' => 'setServerName',
        'description' => 'setDescription',
        'save_field_list' => 'setSaveFieldList',
        'encodes' => 'setEncodes',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stream_name_groups' => 'getStreamNameGroups',
        'deinterlace' => 'getDeinterlace',
        'implementation' => 'getImplementation',
        'overlays' => 'getOverlays',
        'name' => 'getName',
        'server_name' => 'getServerName',
        'description' => 'getDescription',
        'save_field_list' => 'getSaveFieldList',
        'encodes' => 'getEncodes',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stream_name_groups'] = isset($data['stream_name_groups']) ? $data['stream_name_groups'] : null;
        $this->container['deinterlace'] = isset($data['deinterlace']) ? $data['deinterlace'] : null;
        $this->container['implementation'] = isset($data['implementation']) ? $data['implementation'] : null;
        $this->container['overlays'] = isset($data['overlays']) ? $data['overlays'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['encodes'] = isset($data['encodes']) ? $data['encodes'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stream_name_groups'] === null) {
            $invalidProperties[] = "'stream_name_groups' can't be null";
        }
        if ($this->container['deinterlace'] === null) {
            $invalidProperties[] = "'deinterlace' can't be null";
        }
        if ($this->container['implementation'] === null) {
            $invalidProperties[] = "'implementation' can't be null";
        }
        if ($this->container['overlays'] === null) {
            $invalidProperties[] = "'overlays' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['encodes'] === null) {
            $invalidProperties[] = "'encodes' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stream_name_groups
     *
     * @return \Swagger\Client\Model\TranscoderStreamNameGroupConfig[]
     */
    public function getStreamNameGroups()
    {
        return $this->container['stream_name_groups'];
    }

    /**
     * Sets stream_name_groups
     *
     * @param \Swagger\Client\Model\TranscoderStreamNameGroupConfig[] $stream_name_groups stream_name_groups
     *
     * @return $this
     */
    public function setStreamNameGroups($stream_name_groups)
    {
        $this->container['stream_name_groups'] = $stream_name_groups;

        return $this;
    }

    /**
     * Gets deinterlace
     *
     * @return bool
     */
    public function getDeinterlace()
    {
        return $this->container['deinterlace'];
    }

    /**
     * Sets deinterlace
     *
     * @param bool $deinterlace deinterlace
     *
     * @return $this
     */
    public function setDeinterlace($deinterlace)
    {
        $this->container['deinterlace'] = $deinterlace;

        return $this;
    }

    /**
     * Gets implementation
     *
     * @return string
     */
    public function getImplementation()
    {
        return $this->container['implementation'];
    }

    /**
     * Sets implementation
     *
     * @param string $implementation implementation
     *
     * @return $this
     */
    public function setImplementation($implementation)
    {
        $this->container['implementation'] = $implementation;

        return $this;
    }

    /**
     * Gets overlays
     *
     * @return \Swagger\Client\Model\TranscoderOverlayDecodeConfig[]
     */
    public function getOverlays()
    {
        return $this->container['overlays'];
    }

    /**
     * Sets overlays
     *
     * @param \Swagger\Client\Model\TranscoderOverlayDecodeConfig[] $overlays overlays
     *
     * @return $this
     */
    public function setOverlays($overlays)
    {
        $this->container['overlays'] = $overlays;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets encodes
     *
     * @return \Swagger\Client\Model\TranscoderEncodeConfig[]
     */
    public function getEncodes()
    {
        return $this->container['encodes'];
    }

    /**
     * Sets encodes
     *
     * @param \Swagger\Client\Model\TranscoderEncodeConfig[] $encodes encodes
     *
     * @return $this
     */
    public function setEncodes($encodes)
    {
        $this->container['encodes'] = $encodes;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


