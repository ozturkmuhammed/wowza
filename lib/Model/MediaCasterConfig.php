<?php
/**
 * MediaCasterConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MediaCasterConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MediaCasterConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MediaCasterConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stream_type' => 'string',
        'keep_alive_time' => 'string',
        'name' => 'string',
        'server_name' => 'string',
        'description' => 'string',
        'base_class' => 'string',
        'save_field_list' => 'string[]',
        'version' => 'string',
        'connection_timeout' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stream_type' => null,
        'keep_alive_time' => null,
        'name' => null,
        'server_name' => null,
        'description' => null,
        'base_class' => null,
        'save_field_list' => null,
        'version' => null,
        'connection_timeout' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stream_type' => 'streamType',
        'keep_alive_time' => 'keepAliveTime',
        'name' => 'name',
        'server_name' => 'serverName',
        'description' => 'description',
        'base_class' => 'baseClass',
        'save_field_list' => 'saveFieldList',
        'version' => 'version',
        'connection_timeout' => 'connectionTimeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stream_type' => 'setStreamType',
        'keep_alive_time' => 'setKeepAliveTime',
        'name' => 'setName',
        'server_name' => 'setServerName',
        'description' => 'setDescription',
        'base_class' => 'setBaseClass',
        'save_field_list' => 'setSaveFieldList',
        'version' => 'setVersion',
        'connection_timeout' => 'setConnectionTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stream_type' => 'getStreamType',
        'keep_alive_time' => 'getKeepAliveTime',
        'name' => 'getName',
        'server_name' => 'getServerName',
        'description' => 'getDescription',
        'base_class' => 'getBaseClass',
        'save_field_list' => 'getSaveFieldList',
        'version' => 'getVersion',
        'connection_timeout' => 'getConnectionTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stream_type'] = isset($data['stream_type']) ? $data['stream_type'] : null;
        $this->container['keep_alive_time'] = isset($data['keep_alive_time']) ? $data['keep_alive_time'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['base_class'] = isset($data['base_class']) ? $data['base_class'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['connection_timeout'] = isset($data['connection_timeout']) ? $data['connection_timeout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stream_type'] === null) {
            $invalidProperties[] = "'stream_type' can't be null";
        }
        if ($this->container['keep_alive_time'] === null) {
            $invalidProperties[] = "'keep_alive_time' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['base_class'] === null) {
            $invalidProperties[] = "'base_class' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['connection_timeout'] === null) {
            $invalidProperties[] = "'connection_timeout' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stream_type
     *
     * @return string
     */
    public function getStreamType()
    {
        return $this->container['stream_type'];
    }

    /**
     * Sets stream_type
     *
     * @param string $stream_type stream_type
     *
     * @return $this
     */
    public function setStreamType($stream_type)
    {
        $this->container['stream_type'] = $stream_type;

        return $this;
    }

    /**
     * Gets keep_alive_time
     *
     * @return string
     */
    public function getKeepAliveTime()
    {
        return $this->container['keep_alive_time'];
    }

    /**
     * Sets keep_alive_time
     *
     * @param string $keep_alive_time keep_alive_time
     *
     * @return $this
     */
    public function setKeepAliveTime($keep_alive_time)
    {
        $this->container['keep_alive_time'] = $keep_alive_time;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets base_class
     *
     * @return string
     */
    public function getBaseClass()
    {
        return $this->container['base_class'];
    }

    /**
     * Sets base_class
     *
     * @param string $base_class base_class
     *
     * @return $this
     */
    public function setBaseClass($base_class)
    {
        $this->container['base_class'] = $base_class;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets connection_timeout
     *
     * @return string
     */
    public function getConnectionTimeout()
    {
        return $this->container['connection_timeout'];
    }

    /**
     * Sets connection_timeout
     *
     * @param string $connection_timeout connection_timeout
     *
     * @return $this
     */
    public function setConnectionTimeout($connection_timeout)
    {
        $this->container['connection_timeout'] = $connection_timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


