<?php
/**
 * ApplicationConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicationConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'http_optimize_file_reads' => 'bool',
        'caption_live_ıngest_type' => 'string',
        'stream_config' => '\Swagger\Client\Model\StreamConfigurationConfig',
        'server_name' => 'string',
        'description' => 'string',
        'media_cache_source_list' => 'string[]',
        'repeater_origin_url' => 'string',
        'client_stream_read_access' => 'string',
        'app_type' => 'string',
        'ping_timeout' => 'int',
        'vod_timed_text_providers' => 'string[]',
        'save_field_list' => 'string[]',
        'media_reader_random_access_reader_class' => 'string',
        'media_reader_buffer_seek_ıo' => 'bool',
        'http_streamers' => 'string[]',
        'http_cors_headers_enabled' => 'bool',
        'av_sync_method' => 'string',
        'transcoder_config' => '\Swagger\Client\Model\TranscoderAppConfig',
        'client_stream_write_access' => 'string',
        'repeater_query_string' => 'string',
        'drm_config' => '\Swagger\Client\Model\DRMConfig',
        'version' => 'string',
        'modules' => '\Swagger\Client\Model\ModulesConfig',
        'max_rtcp_wait_time' => 'int',
        'security_config' => '\Swagger\Client\Model\SecurityConfig',
        'dvr_config' => '\Swagger\Client\Model\DVRConfig',
        'application_timeout' => 'int',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'http_optimize_file_reads' => null,
        'caption_live_ıngest_type' => null,
        'stream_config' => null,
        'server_name' => null,
        'description' => null,
        'media_cache_source_list' => null,
        'repeater_origin_url' => null,
        'client_stream_read_access' => null,
        'app_type' => null,
        'ping_timeout' => 'int32',
        'vod_timed_text_providers' => null,
        'save_field_list' => null,
        'media_reader_random_access_reader_class' => null,
        'media_reader_buffer_seek_ıo' => null,
        'http_streamers' => null,
        'http_cors_headers_enabled' => null,
        'av_sync_method' => null,
        'transcoder_config' => null,
        'client_stream_write_access' => null,
        'repeater_query_string' => null,
        'drm_config' => null,
        'version' => null,
        'modules' => null,
        'max_rtcp_wait_time' => 'int32',
        'security_config' => null,
        'dvr_config' => null,
        'application_timeout' => 'int32',
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'http_optimize_file_reads' => 'httpOptimizeFileReads',
        'caption_live_ıngest_type' => 'captionLiveIngestType',
        'stream_config' => 'streamConfig',
        'server_name' => 'serverName',
        'description' => 'description',
        'media_cache_source_list' => 'mediaCacheSourceList',
        'repeater_origin_url' => 'repeaterOriginURL',
        'client_stream_read_access' => 'clientStreamReadAccess',
        'app_type' => 'appType',
        'ping_timeout' => 'pingTimeout',
        'vod_timed_text_providers' => 'vodTimedTextProviders',
        'save_field_list' => 'saveFieldList',
        'media_reader_random_access_reader_class' => 'mediaReaderRandomAccessReaderClass',
        'media_reader_buffer_seek_ıo' => 'mediaReaderBufferSeekIO',
        'http_streamers' => 'httpStreamers',
        'http_cors_headers_enabled' => 'httpCORSHeadersEnabled',
        'av_sync_method' => 'avSyncMethod',
        'transcoder_config' => 'transcoderConfig',
        'client_stream_write_access' => 'clientStreamWriteAccess',
        'repeater_query_string' => 'repeaterQueryString',
        'drm_config' => 'drmConfig',
        'version' => 'version',
        'modules' => 'modules',
        'max_rtcp_wait_time' => 'maxRTCPWaitTime',
        'security_config' => 'securityConfig',
        'dvr_config' => 'dvrConfig',
        'application_timeout' => 'applicationTimeout',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'http_optimize_file_reads' => 'setHttpOptimizeFileReads',
        'caption_live_ıngest_type' => 'setCaptionLiveIngestType',
        'stream_config' => 'setStreamConfig',
        'server_name' => 'setServerName',
        'description' => 'setDescription',
        'media_cache_source_list' => 'setMediaCacheSourceList',
        'repeater_origin_url' => 'setRepeaterOriginUrl',
        'client_stream_read_access' => 'setClientStreamReadAccess',
        'app_type' => 'setAppType',
        'ping_timeout' => 'setPingTimeout',
        'vod_timed_text_providers' => 'setVodTimedTextProviders',
        'save_field_list' => 'setSaveFieldList',
        'media_reader_random_access_reader_class' => 'setMediaReaderRandomAccessReaderClass',
        'media_reader_buffer_seek_ıo' => 'setMediaReaderBufferSeekIo',
        'http_streamers' => 'setHttpStreamers',
        'http_cors_headers_enabled' => 'setHttpCorsHeadersEnabled',
        'av_sync_method' => 'setAvSyncMethod',
        'transcoder_config' => 'setTranscoderConfig',
        'client_stream_write_access' => 'setClientStreamWriteAccess',
        'repeater_query_string' => 'setRepeaterQueryString',
        'drm_config' => 'setDrmConfig',
        'version' => 'setVersion',
        'modules' => 'setModules',
        'max_rtcp_wait_time' => 'setMaxRtcpWaitTime',
        'security_config' => 'setSecurityConfig',
        'dvr_config' => 'setDvrConfig',
        'application_timeout' => 'setApplicationTimeout',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'http_optimize_file_reads' => 'getHttpOptimizeFileReads',
        'caption_live_ıngest_type' => 'getCaptionLiveIngestType',
        'stream_config' => 'getStreamConfig',
        'server_name' => 'getServerName',
        'description' => 'getDescription',
        'media_cache_source_list' => 'getMediaCacheSourceList',
        'repeater_origin_url' => 'getRepeaterOriginUrl',
        'client_stream_read_access' => 'getClientStreamReadAccess',
        'app_type' => 'getAppType',
        'ping_timeout' => 'getPingTimeout',
        'vod_timed_text_providers' => 'getVodTimedTextProviders',
        'save_field_list' => 'getSaveFieldList',
        'media_reader_random_access_reader_class' => 'getMediaReaderRandomAccessReaderClass',
        'media_reader_buffer_seek_ıo' => 'getMediaReaderBufferSeekIo',
        'http_streamers' => 'getHttpStreamers',
        'http_cors_headers_enabled' => 'getHttpCorsHeadersEnabled',
        'av_sync_method' => 'getAvSyncMethod',
        'transcoder_config' => 'getTranscoderConfig',
        'client_stream_write_access' => 'getClientStreamWriteAccess',
        'repeater_query_string' => 'getRepeaterQueryString',
        'drm_config' => 'getDrmConfig',
        'version' => 'getVersion',
        'modules' => 'getModules',
        'max_rtcp_wait_time' => 'getMaxRtcpWaitTime',
        'security_config' => 'getSecurityConfig',
        'dvr_config' => 'getDvrConfig',
        'application_timeout' => 'getApplicationTimeout',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['http_optimize_file_reads'] = isset($data['http_optimize_file_reads']) ? $data['http_optimize_file_reads'] : null;
        $this->container['caption_live_ıngest_type'] = isset($data['caption_live_ıngest_type']) ? $data['caption_live_ıngest_type'] : null;
        $this->container['stream_config'] = isset($data['stream_config']) ? $data['stream_config'] : null;
        $this->container['server_name'] = isset($data['server_name']) ? $data['server_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['media_cache_source_list'] = isset($data['media_cache_source_list']) ? $data['media_cache_source_list'] : null;
        $this->container['repeater_origin_url'] = isset($data['repeater_origin_url']) ? $data['repeater_origin_url'] : null;
        $this->container['client_stream_read_access'] = isset($data['client_stream_read_access']) ? $data['client_stream_read_access'] : null;
        $this->container['app_type'] = isset($data['app_type']) ? $data['app_type'] : null;
        $this->container['ping_timeout'] = isset($data['ping_timeout']) ? $data['ping_timeout'] : null;
        $this->container['vod_timed_text_providers'] = isset($data['vod_timed_text_providers']) ? $data['vod_timed_text_providers'] : null;
        $this->container['save_field_list'] = isset($data['save_field_list']) ? $data['save_field_list'] : null;
        $this->container['media_reader_random_access_reader_class'] = isset($data['media_reader_random_access_reader_class']) ? $data['media_reader_random_access_reader_class'] : null;
        $this->container['media_reader_buffer_seek_ıo'] = isset($data['media_reader_buffer_seek_ıo']) ? $data['media_reader_buffer_seek_ıo'] : null;
        $this->container['http_streamers'] = isset($data['http_streamers']) ? $data['http_streamers'] : null;
        $this->container['http_cors_headers_enabled'] = isset($data['http_cors_headers_enabled']) ? $data['http_cors_headers_enabled'] : null;
        $this->container['av_sync_method'] = isset($data['av_sync_method']) ? $data['av_sync_method'] : null;
        $this->container['transcoder_config'] = isset($data['transcoder_config']) ? $data['transcoder_config'] : null;
        $this->container['client_stream_write_access'] = isset($data['client_stream_write_access']) ? $data['client_stream_write_access'] : null;
        $this->container['repeater_query_string'] = isset($data['repeater_query_string']) ? $data['repeater_query_string'] : null;
        $this->container['drm_config'] = isset($data['drm_config']) ? $data['drm_config'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['modules'] = isset($data['modules']) ? $data['modules'] : null;
        $this->container['max_rtcp_wait_time'] = isset($data['max_rtcp_wait_time']) ? $data['max_rtcp_wait_time'] : null;
        $this->container['security_config'] = isset($data['security_config']) ? $data['security_config'] : null;
        $this->container['dvr_config'] = isset($data['dvr_config']) ? $data['dvr_config'] : null;
        $this->container['application_timeout'] = isset($data['application_timeout']) ? $data['application_timeout'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['http_optimize_file_reads'] === null) {
            $invalidProperties[] = "'http_optimize_file_reads' can't be null";
        }
        if ($this->container['caption_live_ıngest_type'] === null) {
            $invalidProperties[] = "'caption_live_ıngest_type' can't be null";
        }
        if ($this->container['stream_config'] === null) {
            $invalidProperties[] = "'stream_config' can't be null";
        }
        if ($this->container['server_name'] === null) {
            $invalidProperties[] = "'server_name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['media_cache_source_list'] === null) {
            $invalidProperties[] = "'media_cache_source_list' can't be null";
        }
        if ($this->container['repeater_origin_url'] === null) {
            $invalidProperties[] = "'repeater_origin_url' can't be null";
        }
        if ($this->container['client_stream_read_access'] === null) {
            $invalidProperties[] = "'client_stream_read_access' can't be null";
        }
        if ($this->container['app_type'] === null) {
            $invalidProperties[] = "'app_type' can't be null";
        }
        if ($this->container['ping_timeout'] === null) {
            $invalidProperties[] = "'ping_timeout' can't be null";
        }
        if ($this->container['vod_timed_text_providers'] === null) {
            $invalidProperties[] = "'vod_timed_text_providers' can't be null";
        }
        if ($this->container['media_reader_random_access_reader_class'] === null) {
            $invalidProperties[] = "'media_reader_random_access_reader_class' can't be null";
        }
        if ($this->container['media_reader_buffer_seek_ıo'] === null) {
            $invalidProperties[] = "'media_reader_buffer_seek_ıo' can't be null";
        }
        if ($this->container['http_streamers'] === null) {
            $invalidProperties[] = "'http_streamers' can't be null";
        }
        if ($this->container['http_cors_headers_enabled'] === null) {
            $invalidProperties[] = "'http_cors_headers_enabled' can't be null";
        }
        if ($this->container['av_sync_method'] === null) {
            $invalidProperties[] = "'av_sync_method' can't be null";
        }
        if ($this->container['transcoder_config'] === null) {
            $invalidProperties[] = "'transcoder_config' can't be null";
        }
        if ($this->container['client_stream_write_access'] === null) {
            $invalidProperties[] = "'client_stream_write_access' can't be null";
        }
        if ($this->container['repeater_query_string'] === null) {
            $invalidProperties[] = "'repeater_query_string' can't be null";
        }
        if ($this->container['drm_config'] === null) {
            $invalidProperties[] = "'drm_config' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['modules'] === null) {
            $invalidProperties[] = "'modules' can't be null";
        }
        if ($this->container['max_rtcp_wait_time'] === null) {
            $invalidProperties[] = "'max_rtcp_wait_time' can't be null";
        }
        if ($this->container['security_config'] === null) {
            $invalidProperties[] = "'security_config' can't be null";
        }
        if ($this->container['dvr_config'] === null) {
            $invalidProperties[] = "'dvr_config' can't be null";
        }
        if ($this->container['application_timeout'] === null) {
            $invalidProperties[] = "'application_timeout' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets http_optimize_file_reads
     *
     * @return bool
     */
    public function getHttpOptimizeFileReads()
    {
        return $this->container['http_optimize_file_reads'];
    }

    /**
     * Sets http_optimize_file_reads
     *
     * @param bool $http_optimize_file_reads http_optimize_file_reads
     *
     * @return $this
     */
    public function setHttpOptimizeFileReads($http_optimize_file_reads)
    {
        $this->container['http_optimize_file_reads'] = $http_optimize_file_reads;

        return $this;
    }

    /**
     * Gets caption_live_ıngest_type
     *
     * @return string
     */
    public function getCaptionLiveIngestType()
    {
        return $this->container['caption_live_ıngest_type'];
    }

    /**
     * Sets caption_live_ıngest_type
     *
     * @param string $caption_live_ıngest_type caption_live_ıngest_type
     *
     * @return $this
     */
    public function setCaptionLiveIngestType($caption_live_ıngest_type)
    {
        $this->container['caption_live_ıngest_type'] = $caption_live_ıngest_type;

        return $this;
    }

    /**
     * Gets stream_config
     *
     * @return \Swagger\Client\Model\StreamConfigurationConfig
     */
    public function getStreamConfig()
    {
        return $this->container['stream_config'];
    }

    /**
     * Sets stream_config
     *
     * @param \Swagger\Client\Model\StreamConfigurationConfig $stream_config stream_config
     *
     * @return $this
     */
    public function setStreamConfig($stream_config)
    {
        $this->container['stream_config'] = $stream_config;

        return $this;
    }

    /**
     * Gets server_name
     *
     * @return string
     */
    public function getServerName()
    {
        return $this->container['server_name'];
    }

    /**
     * Sets server_name
     *
     * @param string $server_name server_name
     *
     * @return $this
     */
    public function setServerName($server_name)
    {
        $this->container['server_name'] = $server_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets media_cache_source_list
     *
     * @return string[]
     */
    public function getMediaCacheSourceList()
    {
        return $this->container['media_cache_source_list'];
    }

    /**
     * Sets media_cache_source_list
     *
     * @param string[] $media_cache_source_list media_cache_source_list
     *
     * @return $this
     */
    public function setMediaCacheSourceList($media_cache_source_list)
    {
        $this->container['media_cache_source_list'] = $media_cache_source_list;

        return $this;
    }

    /**
     * Gets repeater_origin_url
     *
     * @return string
     */
    public function getRepeaterOriginUrl()
    {
        return $this->container['repeater_origin_url'];
    }

    /**
     * Sets repeater_origin_url
     *
     * @param string $repeater_origin_url repeater_origin_url
     *
     * @return $this
     */
    public function setRepeaterOriginUrl($repeater_origin_url)
    {
        $this->container['repeater_origin_url'] = $repeater_origin_url;

        return $this;
    }

    /**
     * Gets client_stream_read_access
     *
     * @return string
     */
    public function getClientStreamReadAccess()
    {
        return $this->container['client_stream_read_access'];
    }

    /**
     * Sets client_stream_read_access
     *
     * @param string $client_stream_read_access client_stream_read_access
     *
     * @return $this
     */
    public function setClientStreamReadAccess($client_stream_read_access)
    {
        $this->container['client_stream_read_access'] = $client_stream_read_access;

        return $this;
    }

    /**
     * Gets app_type
     *
     * @return string
     */
    public function getAppType()
    {
        return $this->container['app_type'];
    }

    /**
     * Sets app_type
     *
     * @param string $app_type 
     *
     * @return $this
     */
    public function setAppType($app_type)
    {
        $this->container['app_type'] = $app_type;

        return $this;
    }

    /**
     * Gets ping_timeout
     *
     * @return int
     */
    public function getPingTimeout()
    {
        return $this->container['ping_timeout'];
    }

    /**
     * Sets ping_timeout
     *
     * @param int $ping_timeout ping_timeout
     *
     * @return $this
     */
    public function setPingTimeout($ping_timeout)
    {
        $this->container['ping_timeout'] = $ping_timeout;

        return $this;
    }

    /**
     * Gets vod_timed_text_providers
     *
     * @return string[]
     */
    public function getVodTimedTextProviders()
    {
        return $this->container['vod_timed_text_providers'];
    }

    /**
     * Sets vod_timed_text_providers
     *
     * @param string[] $vod_timed_text_providers vod_timed_text_providers
     *
     * @return $this
     */
    public function setVodTimedTextProviders($vod_timed_text_providers)
    {
        $this->container['vod_timed_text_providers'] = $vod_timed_text_providers;

        return $this;
    }

    /**
     * Gets save_field_list
     *
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['save_field_list'];
    }

    /**
     * Sets save_field_list
     *
     * @param string[] $save_field_list save_field_list
     *
     * @return $this
     */
    public function setSaveFieldList($save_field_list)
    {
        $this->container['save_field_list'] = $save_field_list;

        return $this;
    }

    /**
     * Gets media_reader_random_access_reader_class
     *
     * @return string
     */
    public function getMediaReaderRandomAccessReaderClass()
    {
        return $this->container['media_reader_random_access_reader_class'];
    }

    /**
     * Sets media_reader_random_access_reader_class
     *
     * @param string $media_reader_random_access_reader_class media_reader_random_access_reader_class
     *
     * @return $this
     */
    public function setMediaReaderRandomAccessReaderClass($media_reader_random_access_reader_class)
    {
        $this->container['media_reader_random_access_reader_class'] = $media_reader_random_access_reader_class;

        return $this;
    }

    /**
     * Gets media_reader_buffer_seek_ıo
     *
     * @return bool
     */
    public function getMediaReaderBufferSeekIo()
    {
        return $this->container['media_reader_buffer_seek_ıo'];
    }

    /**
     * Sets media_reader_buffer_seek_ıo
     *
     * @param bool $media_reader_buffer_seek_ıo media_reader_buffer_seek_ıo
     *
     * @return $this
     */
    public function setMediaReaderBufferSeekIo($media_reader_buffer_seek_ıo)
    {
        $this->container['media_reader_buffer_seek_ıo'] = $media_reader_buffer_seek_ıo;

        return $this;
    }

    /**
     * Gets http_streamers
     *
     * @return string[]
     */
    public function getHttpStreamers()
    {
        return $this->container['http_streamers'];
    }

    /**
     * Sets http_streamers
     *
     * @param string[] $http_streamers http_streamers
     *
     * @return $this
     */
    public function setHttpStreamers($http_streamers)
    {
        $this->container['http_streamers'] = $http_streamers;

        return $this;
    }

    /**
     * Gets http_cors_headers_enabled
     *
     * @return bool
     */
    public function getHttpCorsHeadersEnabled()
    {
        return $this->container['http_cors_headers_enabled'];
    }

    /**
     * Sets http_cors_headers_enabled
     *
     * @param bool $http_cors_headers_enabled http_cors_headers_enabled
     *
     * @return $this
     */
    public function setHttpCorsHeadersEnabled($http_cors_headers_enabled)
    {
        $this->container['http_cors_headers_enabled'] = $http_cors_headers_enabled;

        return $this;
    }

    /**
     * Gets av_sync_method
     *
     * @return string
     */
    public function getAvSyncMethod()
    {
        return $this->container['av_sync_method'];
    }

    /**
     * Sets av_sync_method
     *
     * @param string $av_sync_method av_sync_method
     *
     * @return $this
     */
    public function setAvSyncMethod($av_sync_method)
    {
        $this->container['av_sync_method'] = $av_sync_method;

        return $this;
    }

    /**
     * Gets transcoder_config
     *
     * @return \Swagger\Client\Model\TranscoderAppConfig
     */
    public function getTranscoderConfig()
    {
        return $this->container['transcoder_config'];
    }

    /**
     * Sets transcoder_config
     *
     * @param \Swagger\Client\Model\TranscoderAppConfig $transcoder_config transcoder_config
     *
     * @return $this
     */
    public function setTranscoderConfig($transcoder_config)
    {
        $this->container['transcoder_config'] = $transcoder_config;

        return $this;
    }

    /**
     * Gets client_stream_write_access
     *
     * @return string
     */
    public function getClientStreamWriteAccess()
    {
        return $this->container['client_stream_write_access'];
    }

    /**
     * Sets client_stream_write_access
     *
     * @param string $client_stream_write_access client_stream_write_access
     *
     * @return $this
     */
    public function setClientStreamWriteAccess($client_stream_write_access)
    {
        $this->container['client_stream_write_access'] = $client_stream_write_access;

        return $this;
    }

    /**
     * Gets repeater_query_string
     *
     * @return string
     */
    public function getRepeaterQueryString()
    {
        return $this->container['repeater_query_string'];
    }

    /**
     * Sets repeater_query_string
     *
     * @param string $repeater_query_string repeater_query_string
     *
     * @return $this
     */
    public function setRepeaterQueryString($repeater_query_string)
    {
        $this->container['repeater_query_string'] = $repeater_query_string;

        return $this;
    }

    /**
     * Gets drm_config
     *
     * @return \Swagger\Client\Model\DRMConfig
     */
    public function getDrmConfig()
    {
        return $this->container['drm_config'];
    }

    /**
     * Sets drm_config
     *
     * @param \Swagger\Client\Model\DRMConfig $drm_config drm_config
     *
     * @return $this
     */
    public function setDrmConfig($drm_config)
    {
        $this->container['drm_config'] = $drm_config;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets modules
     *
     * @return \Swagger\Client\Model\ModulesConfig
     */
    public function getModules()
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param \Swagger\Client\Model\ModulesConfig $modules modules
     *
     * @return $this
     */
    public function setModules($modules)
    {
        $this->container['modules'] = $modules;

        return $this;
    }

    /**
     * Gets max_rtcp_wait_time
     *
     * @return int
     */
    public function getMaxRtcpWaitTime()
    {
        return $this->container['max_rtcp_wait_time'];
    }

    /**
     * Sets max_rtcp_wait_time
     *
     * @param int $max_rtcp_wait_time max_rtcp_wait_time
     *
     * @return $this
     */
    public function setMaxRtcpWaitTime($max_rtcp_wait_time)
    {
        $this->container['max_rtcp_wait_time'] = $max_rtcp_wait_time;

        return $this;
    }

    /**
     * Gets security_config
     *
     * @return \Swagger\Client\Model\SecurityConfig
     */
    public function getSecurityConfig()
    {
        return $this->container['security_config'];
    }

    /**
     * Sets security_config
     *
     * @param \Swagger\Client\Model\SecurityConfig $security_config security_config
     *
     * @return $this
     */
    public function setSecurityConfig($security_config)
    {
        $this->container['security_config'] = $security_config;

        return $this;
    }

    /**
     * Gets dvr_config
     *
     * @return \Swagger\Client\Model\DVRConfig
     */
    public function getDvrConfig()
    {
        return $this->container['dvr_config'];
    }

    /**
     * Sets dvr_config
     *
     * @param \Swagger\Client\Model\DVRConfig $dvr_config dvr_config
     *
     * @return $this
     */
    public function setDvrConfig($dvr_config)
    {
        $this->container['dvr_config'] = $dvr_config;

        return $this;
    }

    /**
     * Gets application_timeout
     *
     * @return int
     */
    public function getApplicationTimeout()
    {
        return $this->container['application_timeout'];
    }

    /**
     * Sets application_timeout
     *
     * @param int $application_timeout application_timeout
     *
     * @return $this
     */
    public function setApplicationTimeout($application_timeout)
    {
        $this->container['application_timeout'] = $application_timeout;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


