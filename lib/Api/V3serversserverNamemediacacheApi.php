<?php
/**
 * V3serversserverNamemediacacheApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * V3serversserverNamemediacacheApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V3serversserverNamemediacacheApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteMediaCacheSourceConfig3
     *
     * Deletes the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMediaCacheSourceConfig3($server_name, $source_name)
    {
        $this->deleteMediaCacheSourceConfig3WithHttpInfo($server_name, $source_name);
    }

    /**
     * Operation deleteMediaCacheSourceConfig3WithHttpInfo
     *
     * Deletes the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMediaCacheSourceConfig3WithHttpInfo($server_name, $source_name)
    {
        $returnType = '';
        $request = $this->deleteMediaCacheSourceConfig3Request($server_name, $source_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMediaCacheSourceConfig3Async
     *
     * Deletes the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaCacheSourceConfig3Async($server_name, $source_name)
    {
        return $this->deleteMediaCacheSourceConfig3AsyncWithHttpInfo($server_name, $source_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMediaCacheSourceConfig3AsyncWithHttpInfo
     *
     * Deletes the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaCacheSourceConfig3AsyncWithHttpInfo($server_name, $source_name)
    {
        $returnType = '';
        $request = $this->deleteMediaCacheSourceConfig3Request($server_name, $source_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMediaCacheSourceConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMediaCacheSourceConfig3Request($server_name, $source_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling deleteMediaCacheSourceConfig3'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling deleteMediaCacheSourceConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/sources/{sourceName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMediaCacheStoreConfig3
     *
     * Deletes the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name store_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMediaCacheStoreConfig3($server_name, $store_name)
    {
        $this->deleteMediaCacheStoreConfig3WithHttpInfo($server_name, $store_name);
    }

    /**
     * Operation deleteMediaCacheStoreConfig3WithHttpInfo
     *
     * Deletes the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMediaCacheStoreConfig3WithHttpInfo($server_name, $store_name)
    {
        $returnType = '';
        $request = $this->deleteMediaCacheStoreConfig3Request($server_name, $store_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMediaCacheStoreConfig3Async
     *
     * Deletes the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaCacheStoreConfig3Async($server_name, $store_name)
    {
        return $this->deleteMediaCacheStoreConfig3AsyncWithHttpInfo($server_name, $store_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMediaCacheStoreConfig3AsyncWithHttpInfo
     *
     * Deletes the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaCacheStoreConfig3AsyncWithHttpInfo($server_name, $store_name)
    {
        $returnType = '';
        $request = $this->deleteMediaCacheStoreConfig3Request($server_name, $store_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMediaCacheStoreConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMediaCacheStoreConfig3Request($server_name, $store_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling deleteMediaCacheStoreConfig3'
            );
        }
        // verify the required parameter 'store_name' is set
        if ($store_name === null || (is_array($store_name) && count($store_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_name when calling deleteMediaCacheStoreConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/stores/{storeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($store_name !== null) {
            $resourcePath = str_replace(
                '{' . 'storeName' . '}',
                ObjectSerializer::toPathValue($store_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheConfig3
     *
     * Retrieves the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheConfig3
     */
    public function getMediaCacheConfig3($server_name)
    {
        list($response) = $this->getMediaCacheConfig3WithHttpInfo($server_name);
        return $response;
    }

    /**
     * Operation getMediaCacheConfig3WithHttpInfo
     *
     * Retrieves the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheConfig3, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheConfig3WithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheConfig3';
        $request = $this->getMediaCacheConfig3Request($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheConfig3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheConfig3Async
     *
     * Retrieves the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheConfig3Async($server_name)
    {
        return $this->getMediaCacheConfig3AsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheConfig3AsyncWithHttpInfo
     *
     * Retrieves the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheConfig3AsyncWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheConfig3';
        $request = $this->getMediaCacheConfig3Request($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheConfig3Request($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheSourceConfig3
     *
     * Retrieves the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheSourceConfig3
     */
    public function getMediaCacheSourceConfig3($server_name, $source_name)
    {
        list($response) = $this->getMediaCacheSourceConfig3WithHttpInfo($server_name, $source_name);
        return $response;
    }

    /**
     * Operation getMediaCacheSourceConfig3WithHttpInfo
     *
     * Retrieves the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheSourceConfig3, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheSourceConfig3WithHttpInfo($server_name, $source_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourceConfig3';
        $request = $this->getMediaCacheSourceConfig3Request($server_name, $source_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheSourceConfig3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheSourceConfig3Async
     *
     * Retrieves the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourceConfig3Async($server_name, $source_name)
    {
        return $this->getMediaCacheSourceConfig3AsyncWithHttpInfo($server_name, $source_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheSourceConfig3AsyncWithHttpInfo
     *
     * Retrieves the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourceConfig3AsyncWithHttpInfo($server_name, $source_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourceConfig3';
        $request = $this->getMediaCacheSourceConfig3Request($server_name, $source_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheSourceConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheSourceConfig3Request($server_name, $source_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheSourceConfig3'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling getMediaCacheSourceConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/sources/{sourceName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheSourceConfigAdv3
     *
     * Retrieves the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheSourceConfigAdv3
     */
    public function getMediaCacheSourceConfigAdv3($server_name, $source_name)
    {
        list($response) = $this->getMediaCacheSourceConfigAdv3WithHttpInfo($server_name, $source_name);
        return $response;
    }

    /**
     * Operation getMediaCacheSourceConfigAdv3WithHttpInfo
     *
     * Retrieves the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheSourceConfigAdv3, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheSourceConfigAdv3WithHttpInfo($server_name, $source_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourceConfigAdv3';
        $request = $this->getMediaCacheSourceConfigAdv3Request($server_name, $source_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheSourceConfigAdv3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheSourceConfigAdv3Async
     *
     * Retrieves the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourceConfigAdv3Async($server_name, $source_name)
    {
        return $this->getMediaCacheSourceConfigAdv3AsyncWithHttpInfo($server_name, $source_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheSourceConfigAdv3AsyncWithHttpInfo
     *
     * Retrieves the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourceConfigAdv3AsyncWithHttpInfo($server_name, $source_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourceConfigAdv3';
        $request = $this->getMediaCacheSourceConfigAdv3Request($server_name, $source_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheSourceConfigAdv3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheSourceConfigAdv3Request($server_name, $source_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheSourceConfigAdv3'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling getMediaCacheSourceConfigAdv3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/sources/{sourceName}/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheSourcesConfig3
     *
     * Retrieves the list of MediaCache Sources
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheSourcesConfig3
     */
    public function getMediaCacheSourcesConfig3($server_name)
    {
        list($response) = $this->getMediaCacheSourcesConfig3WithHttpInfo($server_name);
        return $response;
    }

    /**
     * Operation getMediaCacheSourcesConfig3WithHttpInfo
     *
     * Retrieves the list of MediaCache Sources
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheSourcesConfig3, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheSourcesConfig3WithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourcesConfig3';
        $request = $this->getMediaCacheSourcesConfig3Request($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheSourcesConfig3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheSourcesConfig3Async
     *
     * Retrieves the list of MediaCache Sources
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourcesConfig3Async($server_name)
    {
        return $this->getMediaCacheSourcesConfig3AsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheSourcesConfig3AsyncWithHttpInfo
     *
     * Retrieves the list of MediaCache Sources
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourcesConfig3AsyncWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourcesConfig3';
        $request = $this->getMediaCacheSourcesConfig3Request($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheSourcesConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheSourcesConfig3Request($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheSourcesConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheStoreConfig3
     *
     * Retrieves the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name store_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheStoreConfig3
     */
    public function getMediaCacheStoreConfig3($server_name, $store_name)
    {
        list($response) = $this->getMediaCacheStoreConfig3WithHttpInfo($server_name, $store_name);
        return $response;
    }

    /**
     * Operation getMediaCacheStoreConfig3WithHttpInfo
     *
     * Retrieves the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheStoreConfig3, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheStoreConfig3WithHttpInfo($server_name, $store_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoreConfig3';
        $request = $this->getMediaCacheStoreConfig3Request($server_name, $store_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheStoreConfig3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheStoreConfig3Async
     *
     * Retrieves the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoreConfig3Async($server_name, $store_name)
    {
        return $this->getMediaCacheStoreConfig3AsyncWithHttpInfo($server_name, $store_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheStoreConfig3AsyncWithHttpInfo
     *
     * Retrieves the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoreConfig3AsyncWithHttpInfo($server_name, $store_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoreConfig3';
        $request = $this->getMediaCacheStoreConfig3Request($server_name, $store_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheStoreConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheStoreConfig3Request($server_name, $store_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheStoreConfig3'
            );
        }
        // verify the required parameter 'store_name' is set
        if ($store_name === null || (is_array($store_name) && count($store_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_name when calling getMediaCacheStoreConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/stores/{storeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($store_name !== null) {
            $resourcePath = str_replace(
                '{' . 'storeName' . '}',
                ObjectSerializer::toPathValue($store_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheStoresConfig3
     *
     * Retrieves the list of MediaCache Stores
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheStoresConfig3
     */
    public function getMediaCacheStoresConfig3($server_name)
    {
        list($response) = $this->getMediaCacheStoresConfig3WithHttpInfo($server_name);
        return $response;
    }

    /**
     * Operation getMediaCacheStoresConfig3WithHttpInfo
     *
     * Retrieves the list of MediaCache Stores
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheStoresConfig3, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheStoresConfig3WithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoresConfig3';
        $request = $this->getMediaCacheStoresConfig3Request($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheStoresConfig3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheStoresConfig3Async
     *
     * Retrieves the list of MediaCache Stores
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoresConfig3Async($server_name)
    {
        return $this->getMediaCacheStoresConfig3AsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheStoresConfig3AsyncWithHttpInfo
     *
     * Retrieves the list of MediaCache Stores
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoresConfig3AsyncWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoresConfig3';
        $request = $this->getMediaCacheStoresConfig3Request($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheStoresConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheStoresConfig3Request($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheStoresConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheSourceConfig3
     *
     * Adds the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheSourceConfig3($server_name, $source_name, $body)
    {
        $this->postMediaCacheSourceConfig3WithHttpInfo($server_name, $source_name, $body);
    }

    /**
     * Operation postMediaCacheSourceConfig3WithHttpInfo
     *
     * Adds the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheSourceConfig3WithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourceConfig3Request($server_name, $source_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheSourceConfig3Async
     *
     * Adds the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourceConfig3Async($server_name, $source_name, $body)
    {
        return $this->postMediaCacheSourceConfig3AsyncWithHttpInfo($server_name, $source_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheSourceConfig3AsyncWithHttpInfo
     *
     * Adds the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourceConfig3AsyncWithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourceConfig3Request($server_name, $source_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheSourceConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheSourceConfig3Request($server_name, $source_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheSourceConfig3'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling postMediaCacheSourceConfig3'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheSourceConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/sources/{sourceName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheSourceConfigAdv3
     *
     * Adds the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheSourceConfigAdv3($server_name, $source_name, $body)
    {
        $this->postMediaCacheSourceConfigAdv3WithHttpInfo($server_name, $source_name, $body);
    }

    /**
     * Operation postMediaCacheSourceConfigAdv3WithHttpInfo
     *
     * Adds the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheSourceConfigAdv3WithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourceConfigAdv3Request($server_name, $source_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheSourceConfigAdv3Async
     *
     * Adds the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourceConfigAdv3Async($server_name, $source_name, $body)
    {
        return $this->postMediaCacheSourceConfigAdv3AsyncWithHttpInfo($server_name, $source_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheSourceConfigAdv3AsyncWithHttpInfo
     *
     * Adds the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourceConfigAdv3AsyncWithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourceConfigAdv3Request($server_name, $source_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheSourceConfigAdv3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheSourceConfigAdv3Request($server_name, $source_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheSourceConfigAdv3'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling postMediaCacheSourceConfigAdv3'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheSourceConfigAdv3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/sources/{sourceName}/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheSourcesConfig3
     *
     * Adds the specified MediaCache Source to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheSourcesConfig3($server_name, $body)
    {
        $this->postMediaCacheSourcesConfig3WithHttpInfo($server_name, $body);
    }

    /**
     * Operation postMediaCacheSourcesConfig3WithHttpInfo
     *
     * Adds the specified MediaCache Source to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheSourcesConfig3WithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourcesConfig3Request($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheSourcesConfig3Async
     *
     * Adds the specified MediaCache Source to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourcesConfig3Async($server_name, $body)
    {
        return $this->postMediaCacheSourcesConfig3AsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheSourcesConfig3AsyncWithHttpInfo
     *
     * Adds the specified MediaCache Source to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourcesConfig3AsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourcesConfig3Request($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheSourcesConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheSourcesConfig3Request($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheSourcesConfig3'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheSourcesConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheStoreConfig3
     *
     * Adds the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheStoreConfig3($server_name, $store_name, $body)
    {
        $this->postMediaCacheStoreConfig3WithHttpInfo($server_name, $store_name, $body);
    }

    /**
     * Operation postMediaCacheStoreConfig3WithHttpInfo
     *
     * Adds the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheStoreConfig3WithHttpInfo($server_name, $store_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoreConfig3Request($server_name, $store_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheStoreConfig3Async
     *
     * Adds the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoreConfig3Async($server_name, $store_name, $body)
    {
        return $this->postMediaCacheStoreConfig3AsyncWithHttpInfo($server_name, $store_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheStoreConfig3AsyncWithHttpInfo
     *
     * Adds the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoreConfig3AsyncWithHttpInfo($server_name, $store_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoreConfig3Request($server_name, $store_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheStoreConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheStoreConfig3Request($server_name, $store_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheStoreConfig3'
            );
        }
        // verify the required parameter 'store_name' is set
        if ($store_name === null || (is_array($store_name) && count($store_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_name when calling postMediaCacheStoreConfig3'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheStoreConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/stores/{storeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($store_name !== null) {
            $resourcePath = str_replace(
                '{' . 'storeName' . '}',
                ObjectSerializer::toPathValue($store_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheStoresConfig3
     *
     * Adds the specified MediaCache Store to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheStoresConfig3($server_name, $body)
    {
        $this->postMediaCacheStoresConfig3WithHttpInfo($server_name, $body);
    }

    /**
     * Operation postMediaCacheStoresConfig3WithHttpInfo
     *
     * Adds the specified MediaCache Store to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheStoresConfig3WithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoresConfig3Request($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheStoresConfig3Async
     *
     * Adds the specified MediaCache Store to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoresConfig3Async($server_name, $body)
    {
        return $this->postMediaCacheStoresConfig3AsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheStoresConfig3AsyncWithHttpInfo
     *
     * Adds the specified MediaCache Store to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoresConfig3AsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoresConfig3Request($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheStoresConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheStoresConfig3Request($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheStoresConfig3'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheStoresConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheConfig3
     *
     * Updates the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig3 $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheConfig3($server_name, $body)
    {
        $this->putMediaCacheConfig3WithHttpInfo($server_name, $body);
    }

    /**
     * Operation putMediaCacheConfig3WithHttpInfo
     *
     * Updates the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig3 $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheConfig3WithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheConfig3Request($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheConfig3Async
     *
     * Updates the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheConfig3Async($server_name, $body)
    {
        return $this->putMediaCacheConfig3AsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheConfig3AsyncWithHttpInfo
     *
     * Updates the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheConfig3AsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheConfig3Request($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheConfig3Request($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheConfig3'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheSourceConfig3
     *
     * Updates the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheSourceConfig3($server_name, $source_name, $body)
    {
        $this->putMediaCacheSourceConfig3WithHttpInfo($server_name, $source_name, $body);
    }

    /**
     * Operation putMediaCacheSourceConfig3WithHttpInfo
     *
     * Updates the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheSourceConfig3WithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheSourceConfig3Request($server_name, $source_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheSourceConfig3Async
     *
     * Updates the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheSourceConfig3Async($server_name, $source_name, $body)
    {
        return $this->putMediaCacheSourceConfig3AsyncWithHttpInfo($server_name, $source_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheSourceConfig3AsyncWithHttpInfo
     *
     * Updates the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheSourceConfig3AsyncWithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheSourceConfig3Request($server_name, $source_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheSourceConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheSourceConfig3Request($server_name, $source_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheSourceConfig3'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling putMediaCacheSourceConfig3'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheSourceConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/sources/{sourceName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheSourceConfigAdv3
     *
     * Updates the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheSourceConfigAdv3($server_name, $source_name, $body)
    {
        $this->putMediaCacheSourceConfigAdv3WithHttpInfo($server_name, $source_name, $body);
    }

    /**
     * Operation putMediaCacheSourceConfigAdv3WithHttpInfo
     *
     * Updates the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheSourceConfigAdv3WithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheSourceConfigAdv3Request($server_name, $source_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheSourceConfigAdv3Async
     *
     * Updates the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheSourceConfigAdv3Async($server_name, $source_name, $body)
    {
        return $this->putMediaCacheSourceConfigAdv3AsyncWithHttpInfo($server_name, $source_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheSourceConfigAdv3AsyncWithHttpInfo
     *
     * Updates the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheSourceConfigAdv3AsyncWithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheSourceConfigAdv3Request($server_name, $source_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheSourceConfigAdv3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheSourceConfigAdv3Request($server_name, $source_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheSourceConfigAdv3'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling putMediaCacheSourceConfigAdv3'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheSourceConfigAdv3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/sources/{sourceName}/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheStoreConfig3
     *
     * Updates the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheStoreConfig3($server_name, $store_name, $body)
    {
        $this->putMediaCacheStoreConfig3WithHttpInfo($server_name, $store_name, $body);
    }

    /**
     * Operation putMediaCacheStoreConfig3WithHttpInfo
     *
     * Updates the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheStoreConfig3WithHttpInfo($server_name, $store_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheStoreConfig3Request($server_name, $store_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheStoreConfig3Async
     *
     * Updates the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheStoreConfig3Async($server_name, $store_name, $body)
    {
        return $this->putMediaCacheStoreConfig3AsyncWithHttpInfo($server_name, $store_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheStoreConfig3AsyncWithHttpInfo
     *
     * Updates the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheStoreConfig3AsyncWithHttpInfo($server_name, $store_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheStoreConfig3Request($server_name, $store_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheStoreConfig3'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig3 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheStoreConfig3Request($server_name, $store_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheStoreConfig3'
            );
        }
        // verify the required parameter 'store_name' is set
        if ($store_name === null || (is_array($store_name) && count($store_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_name when calling putMediaCacheStoreConfig3'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheStoreConfig3'
            );
        }

        $resourcePath = '/v3/servers/{serverName}/mediacache/stores/{storeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($store_name !== null) {
            $resourcePath = str_replace(
                '{' . 'storeName' . '}',
                ObjectSerializer::toPathValue($store_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
