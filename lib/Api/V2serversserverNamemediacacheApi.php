<?php
/**
 * V2serversserverNamemediacacheApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * V2serversserverNamemediacacheApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2serversserverNamemediacacheApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteMediaCacheSourceConfig
     *
     * Deletes the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMediaCacheSourceConfig($server_name)
    {
        $this->deleteMediaCacheSourceConfigWithHttpInfo($server_name);
    }

    /**
     * Operation deleteMediaCacheSourceConfigWithHttpInfo
     *
     * Deletes the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMediaCacheSourceConfigWithHttpInfo($server_name)
    {
        $returnType = '';
        $request = $this->deleteMediaCacheSourceConfigRequest($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMediaCacheSourceConfigAsync
     *
     * Deletes the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaCacheSourceConfigAsync($server_name)
    {
        return $this->deleteMediaCacheSourceConfigAsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMediaCacheSourceConfigAsyncWithHttpInfo
     *
     * Deletes the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaCacheSourceConfigAsyncWithHttpInfo($server_name)
    {
        $returnType = '';
        $request = $this->deleteMediaCacheSourceConfigRequest($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMediaCacheSourceConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMediaCacheSourceConfigRequest($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling deleteMediaCacheSourceConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/sources/{sourceName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMediaCacheStoreConfig
     *
     * Deletes the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMediaCacheStoreConfig($server_name)
    {
        $this->deleteMediaCacheStoreConfigWithHttpInfo($server_name);
    }

    /**
     * Operation deleteMediaCacheStoreConfigWithHttpInfo
     *
     * Deletes the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMediaCacheStoreConfigWithHttpInfo($server_name)
    {
        $returnType = '';
        $request = $this->deleteMediaCacheStoreConfigRequest($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMediaCacheStoreConfigAsync
     *
     * Deletes the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaCacheStoreConfigAsync($server_name)
    {
        return $this->deleteMediaCacheStoreConfigAsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMediaCacheStoreConfigAsyncWithHttpInfo
     *
     * Deletes the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaCacheStoreConfigAsyncWithHttpInfo($server_name)
    {
        $returnType = '';
        $request = $this->deleteMediaCacheStoreConfigRequest($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMediaCacheStoreConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMediaCacheStoreConfigRequest($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling deleteMediaCacheStoreConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/stores/{storeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheConfig
     *
     * Retrieves the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheConfig
     */
    public function getMediaCacheConfig($server_name)
    {
        list($response) = $this->getMediaCacheConfigWithHttpInfo($server_name);
        return $response;
    }

    /**
     * Operation getMediaCacheConfigWithHttpInfo
     *
     * Retrieves the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheConfigWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheConfig';
        $request = $this->getMediaCacheConfigRequest($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheConfigAsync
     *
     * Retrieves the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheConfigAsync($server_name)
    {
        return $this->getMediaCacheConfigAsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheConfigAsyncWithHttpInfo
     *
     * Retrieves the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheConfigAsyncWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheConfig';
        $request = $this->getMediaCacheConfigRequest($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheConfigRequest($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheConfigAdv
     *
     * Retrieves the advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheConfigAdv
     */
    public function getMediaCacheConfigAdv($server_name)
    {
        list($response) = $this->getMediaCacheConfigAdvWithHttpInfo($server_name);
        return $response;
    }

    /**
     * Operation getMediaCacheConfigAdvWithHttpInfo
     *
     * Retrieves the advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheConfigAdv, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheConfigAdvWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheConfigAdv';
        $request = $this->getMediaCacheConfigAdvRequest($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheConfigAdv',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheConfigAdvAsync
     *
     * Retrieves the advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheConfigAdvAsync($server_name)
    {
        return $this->getMediaCacheConfigAdvAsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheConfigAdvAsyncWithHttpInfo
     *
     * Retrieves the advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheConfigAdvAsyncWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheConfigAdv';
        $request = $this->getMediaCacheConfigAdvRequest($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheConfigAdv'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheConfigAdvRequest($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheConfigAdv'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheSourceConfig
     *
     * Retrieves the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheSourceConfig
     */
    public function getMediaCacheSourceConfig($server_name)
    {
        list($response) = $this->getMediaCacheSourceConfigWithHttpInfo($server_name);
        return $response;
    }

    /**
     * Operation getMediaCacheSourceConfigWithHttpInfo
     *
     * Retrieves the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheSourceConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheSourceConfigWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourceConfig';
        $request = $this->getMediaCacheSourceConfigRequest($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheSourceConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheSourceConfigAsync
     *
     * Retrieves the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourceConfigAsync($server_name)
    {
        return $this->getMediaCacheSourceConfigAsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheSourceConfigAsyncWithHttpInfo
     *
     * Retrieves the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourceConfigAsyncWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourceConfig';
        $request = $this->getMediaCacheSourceConfigRequest($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheSourceConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheSourceConfigRequest($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheSourceConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/sources/{sourceName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheSourceConfigAdv
     *
     * Retrieves the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheSourceConfigAdv
     */
    public function getMediaCacheSourceConfigAdv($server_name, $source_name)
    {
        list($response) = $this->getMediaCacheSourceConfigAdvWithHttpInfo($server_name, $source_name);
        return $response;
    }

    /**
     * Operation getMediaCacheSourceConfigAdvWithHttpInfo
     *
     * Retrieves the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheSourceConfigAdv, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheSourceConfigAdvWithHttpInfo($server_name, $source_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourceConfigAdv';
        $request = $this->getMediaCacheSourceConfigAdvRequest($server_name, $source_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheSourceConfigAdv',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheSourceConfigAdvAsync
     *
     * Retrieves the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourceConfigAdvAsync($server_name, $source_name)
    {
        return $this->getMediaCacheSourceConfigAdvAsyncWithHttpInfo($server_name, $source_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheSourceConfigAdvAsyncWithHttpInfo
     *
     * Retrieves the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourceConfigAdvAsyncWithHttpInfo($server_name, $source_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourceConfigAdv';
        $request = $this->getMediaCacheSourceConfigAdvRequest($server_name, $source_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheSourceConfigAdv'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheSourceConfigAdvRequest($server_name, $source_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheSourceConfigAdv'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling getMediaCacheSourceConfigAdv'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/sources/{sourceName}/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheSourcesConfig
     *
     * Retrieves the list of MediaCache Sources
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheSourcesConfig
     */
    public function getMediaCacheSourcesConfig($server_name)
    {
        list($response) = $this->getMediaCacheSourcesConfigWithHttpInfo($server_name);
        return $response;
    }

    /**
     * Operation getMediaCacheSourcesConfigWithHttpInfo
     *
     * Retrieves the list of MediaCache Sources
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheSourcesConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheSourcesConfigWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourcesConfig';
        $request = $this->getMediaCacheSourcesConfigRequest($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheSourcesConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheSourcesConfigAsync
     *
     * Retrieves the list of MediaCache Sources
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourcesConfigAsync($server_name)
    {
        return $this->getMediaCacheSourcesConfigAsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheSourcesConfigAsyncWithHttpInfo
     *
     * Retrieves the list of MediaCache Sources
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheSourcesConfigAsyncWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheSourcesConfig';
        $request = $this->getMediaCacheSourcesConfigRequest($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheSourcesConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheSourcesConfigRequest($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheSourcesConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheStoreConfig
     *
     * Retrieves the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheStoreConfig
     */
    public function getMediaCacheStoreConfig($server_name)
    {
        list($response) = $this->getMediaCacheStoreConfigWithHttpInfo($server_name);
        return $response;
    }

    /**
     * Operation getMediaCacheStoreConfigWithHttpInfo
     *
     * Retrieves the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheStoreConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheStoreConfigWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoreConfig';
        $request = $this->getMediaCacheStoreConfigRequest($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheStoreConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheStoreConfigAsync
     *
     * Retrieves the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoreConfigAsync($server_name)
    {
        return $this->getMediaCacheStoreConfigAsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheStoreConfigAsyncWithHttpInfo
     *
     * Retrieves the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoreConfigAsyncWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoreConfig';
        $request = $this->getMediaCacheStoreConfigRequest($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheStoreConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheStoreConfigRequest($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheStoreConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/stores/{storeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheStoreConfigAdv
     *
     * Retrieves the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name store_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheStoreConfigAdv
     */
    public function getMediaCacheStoreConfigAdv($server_name, $store_name)
    {
        list($response) = $this->getMediaCacheStoreConfigAdvWithHttpInfo($server_name, $store_name);
        return $response;
    }

    /**
     * Operation getMediaCacheStoreConfigAdvWithHttpInfo
     *
     * Retrieves the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheStoreConfigAdv, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheStoreConfigAdvWithHttpInfo($server_name, $store_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoreConfigAdv';
        $request = $this->getMediaCacheStoreConfigAdvRequest($server_name, $store_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheStoreConfigAdv',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheStoreConfigAdvAsync
     *
     * Retrieves the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoreConfigAdvAsync($server_name, $store_name)
    {
        return $this->getMediaCacheStoreConfigAdvAsyncWithHttpInfo($server_name, $store_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheStoreConfigAdvAsyncWithHttpInfo
     *
     * Retrieves the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoreConfigAdvAsyncWithHttpInfo($server_name, $store_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoreConfigAdv';
        $request = $this->getMediaCacheStoreConfigAdvRequest($server_name, $store_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheStoreConfigAdv'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheStoreConfigAdvRequest($server_name, $store_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheStoreConfigAdv'
            );
        }
        // verify the required parameter 'store_name' is set
        if ($store_name === null || (is_array($store_name) && count($store_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_name when calling getMediaCacheStoreConfigAdv'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/stores/{storeName}/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($store_name !== null) {
            $resourcePath = str_replace(
                '{' . 'storeName' . '}',
                ObjectSerializer::toPathValue($store_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMediaCacheStoresConfig
     *
     * Retrieves the list of MediaCache Stores
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MediaCacheStoresConfig
     */
    public function getMediaCacheStoresConfig($server_name)
    {
        list($response) = $this->getMediaCacheStoresConfigWithHttpInfo($server_name);
        return $response;
    }

    /**
     * Operation getMediaCacheStoresConfigWithHttpInfo
     *
     * Retrieves the list of MediaCache Stores
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MediaCacheStoresConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaCacheStoresConfigWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoresConfig';
        $request = $this->getMediaCacheStoresConfigRequest($server_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MediaCacheStoresConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaCacheStoresConfigAsync
     *
     * Retrieves the list of MediaCache Stores
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoresConfigAsync($server_name)
    {
        return $this->getMediaCacheStoresConfigAsyncWithHttpInfo($server_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaCacheStoresConfigAsyncWithHttpInfo
     *
     * Retrieves the list of MediaCache Stores
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaCacheStoresConfigAsyncWithHttpInfo($server_name)
    {
        $returnType = '\Swagger\Client\Model\MediaCacheStoresConfig';
        $request = $this->getMediaCacheStoresConfigRequest($server_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMediaCacheStoresConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMediaCacheStoresConfigRequest($server_name)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling getMediaCacheStoresConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheConfigAdv
     *
     * Adds an advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheConfigAdv($server_name, $body)
    {
        $this->postMediaCacheConfigAdvWithHttpInfo($server_name, $body);
    }

    /**
     * Operation postMediaCacheConfigAdvWithHttpInfo
     *
     * Adds an advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheConfigAdvWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheConfigAdvRequest($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheConfigAdvAsync
     *
     * Adds an advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheConfigAdvAsync($server_name, $body)
    {
        return $this->postMediaCacheConfigAdvAsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheConfigAdvAsyncWithHttpInfo
     *
     * Adds an advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheConfigAdvAsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheConfigAdvRequest($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheConfigAdv'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheConfigAdvRequest($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheConfigAdv'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheConfigAdv'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheSourceConfig
     *
     * Adds the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheSourceConfig($server_name, $body)
    {
        $this->postMediaCacheSourceConfigWithHttpInfo($server_name, $body);
    }

    /**
     * Operation postMediaCacheSourceConfigWithHttpInfo
     *
     * Adds the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheSourceConfigWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourceConfigRequest($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheSourceConfigAsync
     *
     * Adds the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourceConfigAsync($server_name, $body)
    {
        return $this->postMediaCacheSourceConfigAsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheSourceConfigAsyncWithHttpInfo
     *
     * Adds the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourceConfigAsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourceConfigRequest($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheSourceConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheSourceConfigRequest($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheSourceConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheSourceConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/sources/{sourceName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheSourceConfigAdv
     *
     * Adds the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheSourceConfigAdv($server_name, $source_name, $body)
    {
        $this->postMediaCacheSourceConfigAdvWithHttpInfo($server_name, $source_name, $body);
    }

    /**
     * Operation postMediaCacheSourceConfigAdvWithHttpInfo
     *
     * Adds the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheSourceConfigAdvWithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourceConfigAdvRequest($server_name, $source_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheSourceConfigAdvAsync
     *
     * Adds the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourceConfigAdvAsync($server_name, $source_name, $body)
    {
        return $this->postMediaCacheSourceConfigAdvAsyncWithHttpInfo($server_name, $source_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheSourceConfigAdvAsyncWithHttpInfo
     *
     * Adds the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourceConfigAdvAsyncWithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourceConfigAdvRequest($server_name, $source_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheSourceConfigAdv'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheSourceConfigAdvRequest($server_name, $source_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheSourceConfigAdv'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling postMediaCacheSourceConfigAdv'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheSourceConfigAdv'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/sources/{sourceName}/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheSourcesConfig
     *
     * Adds the specified MediaCache Source to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheSourcesConfig($server_name, $body)
    {
        $this->postMediaCacheSourcesConfigWithHttpInfo($server_name, $body);
    }

    /**
     * Operation postMediaCacheSourcesConfigWithHttpInfo
     *
     * Adds the specified MediaCache Source to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheSourcesConfigWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourcesConfigRequest($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheSourcesConfigAsync
     *
     * Adds the specified MediaCache Source to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourcesConfigAsync($server_name, $body)
    {
        return $this->postMediaCacheSourcesConfigAsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheSourcesConfigAsyncWithHttpInfo
     *
     * Adds the specified MediaCache Source to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheSourcesConfigAsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheSourcesConfigRequest($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheSourcesConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheSourcesConfigRequest($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheSourcesConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheSourcesConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheStoreConfig
     *
     * Adds the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheStoreConfig($server_name, $body)
    {
        $this->postMediaCacheStoreConfigWithHttpInfo($server_name, $body);
    }

    /**
     * Operation postMediaCacheStoreConfigWithHttpInfo
     *
     * Adds the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheStoreConfigWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoreConfigRequest($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheStoreConfigAsync
     *
     * Adds the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoreConfigAsync($server_name, $body)
    {
        return $this->postMediaCacheStoreConfigAsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheStoreConfigAsyncWithHttpInfo
     *
     * Adds the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoreConfigAsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoreConfigRequest($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheStoreConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheStoreConfigRequest($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheStoreConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheStoreConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/stores/{storeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheStoreConfigAdv
     *
     * Adds the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheStoreConfigAdv($server_name, $store_name, $body)
    {
        $this->postMediaCacheStoreConfigAdvWithHttpInfo($server_name, $store_name, $body);
    }

    /**
     * Operation postMediaCacheStoreConfigAdvWithHttpInfo
     *
     * Adds the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheStoreConfigAdvWithHttpInfo($server_name, $store_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoreConfigAdvRequest($server_name, $store_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheStoreConfigAdvAsync
     *
     * Adds the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoreConfigAdvAsync($server_name, $store_name, $body)
    {
        return $this->postMediaCacheStoreConfigAdvAsyncWithHttpInfo($server_name, $store_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheStoreConfigAdvAsyncWithHttpInfo
     *
     * Adds the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoreConfigAdvAsyncWithHttpInfo($server_name, $store_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoreConfigAdvRequest($server_name, $store_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheStoreConfigAdv'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheStoreConfigAdvRequest($server_name, $store_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheStoreConfigAdv'
            );
        }
        // verify the required parameter 'store_name' is set
        if ($store_name === null || (is_array($store_name) && count($store_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_name when calling postMediaCacheStoreConfigAdv'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheStoreConfigAdv'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/stores/{storeName}/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($store_name !== null) {
            $resourcePath = str_replace(
                '{' . 'storeName' . '}',
                ObjectSerializer::toPathValue($store_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMediaCacheStoresConfig
     *
     * Adds the specified MediaCache Store to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMediaCacheStoresConfig($server_name, $body)
    {
        $this->postMediaCacheStoresConfigWithHttpInfo($server_name, $body);
    }

    /**
     * Operation postMediaCacheStoresConfigWithHttpInfo
     *
     * Adds the specified MediaCache Store to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMediaCacheStoresConfigWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoresConfigRequest($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postMediaCacheStoresConfigAsync
     *
     * Adds the specified MediaCache Store to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoresConfigAsync($server_name, $body)
    {
        return $this->postMediaCacheStoresConfigAsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMediaCacheStoresConfigAsyncWithHttpInfo
     *
     * Adds the specified MediaCache Store to the list
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMediaCacheStoresConfigAsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->postMediaCacheStoresConfigRequest($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMediaCacheStoresConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMediaCacheStoresConfigRequest($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling postMediaCacheStoresConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postMediaCacheStoresConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheConfig
     *
     * Updates the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheConfig($server_name, $body)
    {
        $this->putMediaCacheConfigWithHttpInfo($server_name, $body);
    }

    /**
     * Operation putMediaCacheConfigWithHttpInfo
     *
     * Updates the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheConfigWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheConfigRequest($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheConfigAsync
     *
     * Updates the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheConfigAsync($server_name, $body)
    {
        return $this->putMediaCacheConfigAsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheConfigAsyncWithHttpInfo
     *
     * Updates the server MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheConfigAsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheConfigRequest($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheConfigRequest($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheConfigAdv
     *
     * Updates the advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheConfigAdv($server_name, $body)
    {
        $this->putMediaCacheConfigAdvWithHttpInfo($server_name, $body);
    }

    /**
     * Operation putMediaCacheConfigAdvWithHttpInfo
     *
     * Updates the advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheConfigAdvWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheConfigAdvRequest($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheConfigAdvAsync
     *
     * Updates the advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheConfigAdvAsync($server_name, $body)
    {
        return $this->putMediaCacheConfigAdvAsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheConfigAdvAsyncWithHttpInfo
     *
     * Updates the advanced MediaCache configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheConfigAdvAsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheConfigAdvRequest($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheConfigAdv'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheConfigAdvRequest($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheConfigAdv'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheConfigAdv'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheSourceConfig
     *
     * Updates the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheSourceConfig($server_name, $body)
    {
        $this->putMediaCacheSourceConfigWithHttpInfo($server_name, $body);
    }

    /**
     * Operation putMediaCacheSourceConfigWithHttpInfo
     *
     * Updates the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheSourceConfigWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheSourceConfigRequest($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheSourceConfigAsync
     *
     * Updates the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheSourceConfigAsync($server_name, $body)
    {
        return $this->putMediaCacheSourceConfigAsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheSourceConfigAsyncWithHttpInfo
     *
     * Updates the specified MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheSourceConfigAsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheSourceConfigRequest($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheSourceConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheSourceConfigRequest($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheSourceConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheSourceConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/sources/{sourceName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheSourceConfigAdv
     *
     * Updates the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheSourceConfigAdv($server_name, $source_name, $body)
    {
        $this->putMediaCacheSourceConfigAdvWithHttpInfo($server_name, $source_name, $body);
    }

    /**
     * Operation putMediaCacheSourceConfigAdvWithHttpInfo
     *
     * Updates the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheSourceConfigAdvWithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheSourceConfigAdvRequest($server_name, $source_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheSourceConfigAdvAsync
     *
     * Updates the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheSourceConfigAdvAsync($server_name, $source_name, $body)
    {
        return $this->putMediaCacheSourceConfigAdvAsyncWithHttpInfo($server_name, $source_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheSourceConfigAdvAsyncWithHttpInfo
     *
     * Updates the specified advanced MediaCache Source configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheSourceConfigAdvAsyncWithHttpInfo($server_name, $source_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheSourceConfigAdvRequest($server_name, $source_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheSourceConfigAdv'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $source_name (required)
     * @param  \Swagger\Client\Model\MediaCacheSourceConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheSourceConfigAdvRequest($server_name, $source_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheSourceConfigAdv'
            );
        }
        // verify the required parameter 'source_name' is set
        if ($source_name === null || (is_array($source_name) && count($source_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_name when calling putMediaCacheSourceConfigAdv'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheSourceConfigAdv'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/sources/{sourceName}/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($source_name !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceName' . '}',
                ObjectSerializer::toPathValue($source_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheStoreConfig
     *
     * Updates the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheStoreConfig($server_name, $body)
    {
        $this->putMediaCacheStoreConfigWithHttpInfo($server_name, $body);
    }

    /**
     * Operation putMediaCacheStoreConfigWithHttpInfo
     *
     * Updates the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheStoreConfigWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheStoreConfigRequest($server_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheStoreConfigAsync
     *
     * Updates the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheStoreConfigAsync($server_name, $body)
    {
        return $this->putMediaCacheStoreConfigAsyncWithHttpInfo($server_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheStoreConfigAsyncWithHttpInfo
     *
     * Updates the specified MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheStoreConfigAsyncWithHttpInfo($server_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheStoreConfigRequest($server_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheStoreConfig'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfig $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheStoreConfigRequest($server_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheStoreConfig'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheStoreConfig'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/stores/{storeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putMediaCacheStoreConfigAdv
     *
     * Updates the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putMediaCacheStoreConfigAdv($server_name, $store_name, $body)
    {
        $this->putMediaCacheStoreConfigAdvWithHttpInfo($server_name, $store_name, $body);
    }

    /**
     * Operation putMediaCacheStoreConfigAdvWithHttpInfo
     *
     * Updates the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMediaCacheStoreConfigAdvWithHttpInfo($server_name, $store_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheStoreConfigAdvRequest($server_name, $store_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putMediaCacheStoreConfigAdvAsync
     *
     * Updates the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheStoreConfigAdvAsync($server_name, $store_name, $body)
    {
        return $this->putMediaCacheStoreConfigAdvAsyncWithHttpInfo($server_name, $store_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putMediaCacheStoreConfigAdvAsyncWithHttpInfo
     *
     * Updates the specified advanced MediaCache Store configuration
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putMediaCacheStoreConfigAdvAsyncWithHttpInfo($server_name, $store_name, $body)
    {
        $returnType = '';
        $request = $this->putMediaCacheStoreConfigAdvRequest($server_name, $store_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putMediaCacheStoreConfigAdv'
     *
     * @param  string $server_name Reserved for future use (required)
     * @param  string $store_name (required)
     * @param  \Swagger\Client\Model\MediaCacheStoreConfigAdv $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putMediaCacheStoreConfigAdvRequest($server_name, $store_name, $body)
    {
        // verify the required parameter 'server_name' is set
        if ($server_name === null || (is_array($server_name) && count($server_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_name when calling putMediaCacheStoreConfigAdv'
            );
        }
        // verify the required parameter 'store_name' is set
        if ($store_name === null || (is_array($store_name) && count($store_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_name when calling putMediaCacheStoreConfigAdv'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putMediaCacheStoreConfigAdv'
            );
        }

        $resourcePath = '/v2/servers/{serverName}/mediacache/stores/{storeName}/adv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($server_name !== null) {
            $resourcePath = str_replace(
                '{' . 'serverName' . '}',
                ObjectSerializer::toPathValue($server_name),
                $resourcePath
            );
        }
        // path params
        if ($store_name !== null) {
            $resourcePath = str_replace(
                '{' . 'storeName' . '}',
                ObjectSerializer::toPathValue($store_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'text/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'text/xml', 'application/json'],
                ['application/xml', 'text/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
